/*==================================================================================================================================
  Rotina...: <l> mc_00582 </l>
  --------------------------------------------------------------------------------------------------------------------------------
  Descrição: <d> Apresenta Realizado diário Total do Fluxo de Caixa diário por empresa - tabela FC4  </d>
  --------------------------------------------------------------------------------------------------------------------------------
  Tipo.....: <t> Stored Procedure </t>
  --------------------------------------------------------------------------------------------------------------------------------
  Empresa..: MultCont Informática
  --------------------------------------------------------------------------------------------------------------------------------
  Autor....: Jurandy da Silva Costa
  --------------------------------------------------------------------------------------------------------------------------------
  Data.....: 13/02/2009 20:00:00                                               Alterado.: 16/01/2015
  --------------------------------------------------------------------------------------------------------------------------------
  Parametros
   [Entrada ]·····················································································································
            in_dDataIni:      Date             Data Inicial do período
            in_dDataFim:      Date             Data Final do período
   [Saida ]·······················································································································
            out_res:         Integer
==================================================================================================================================*/
Create or Replace Function mc_00582####???
( In  in_dDataIni    Date,
      in_dDataFim    Date,
  Out out_res       Integer ) As $$
Declare

-- {Variáveis para cursores}
   xFluxo     refcursor;                    -- Cursor para o movimento do fluxo de caixa
   xConta     refcursor;                    -- Cursor para as contas bancárias e caixas

-- {Variáveis de uso interno}
   iRecno01   [(fc4)].recno%type;           -- Número do registro
   cConta     [(fc4)].ak_cc%type;           -- Número da conta corrente
   cConta_1   [(fc4)].ak_cc%type;           -- Número da conta corrente
   dDataSaldo [(fc4)].fc4_data%type;        -- Data do último saldo bancario
   nAnterior  [(fc4)].fc4_anterior%type;    -- Saldo anterior do dia - geral
   nAntesCta  [(fc4)].fc4_anterior%type;    -- Saldo anterior do dia - bancos
   nAntesCxa  [(fc4)].fc4_anterior%type;    -- Saldo anterior do dia - caixas
   nEntradas  [(fc4)].fc4_entradas%type;    -- Entradas do dia
   nSaidas    [(fc4)].fc4_saidas%type;      -- Saidas do dia
   nSaldo     [(fc4)].fc4_saldo%type;       -- Saldo do dia
   iCaixa     [(fa2)].fa1_caixa%type;       -- Número do caixa
   dDataNatu  [(fr1)].fr1_data01%type;      -- Data do total por natureza
   iNatureza  [(sf1)].f1_codnat%type;       -- Código da natureza financeira
   cNatureza  [(sf1)].f1_descri%type;       -- Descrição da natureza financeira
   cSessao    [(fr2)].session%type;         -- Sessão atual do usuário

   iOrdem     Integer;

Begin
   out_res := 0;

   -- Recupera a sessão do usuário
   cSessao := sys_session();

   -- Limpa os dados da Sessão antes de montar um novo relatório
   Delete From [(fr1)] Where session = cSessao;
   Delete From [(fr2)] Where session = cSessao;
   Delete From [(fc4)] Where session = cSessao;

   -- Fixa o número da conta bancária
   cConta_1 := 'TODAS AS CONTAS';

   -- Transfere o detalhamento para a tabela temporária do usuário
   Insert Into [(fr2)] ( session,         fr2_origem,  fr2_recno,  fr2_data,    fr2_tipo,     fr2_filial,    fr2_compete,
                         fr2_conta,       fr2_entrada, fr2_dbaixa, fr2_saida,   fr2_cli_for,  fr2_historico, fr2_dfluxo,
                         fr2_nota_numero, fr2_nota_serie)
                 Select  cSessao,   sar_origem,  sar_recno,  sar_data,    sar_tipo * 3, ???, sys_compete(sar_data),
                         sar.ak_cc, (Case When sar.sar_tipo < 3 Then sar_valor Else 0.00 End),
                         sar_data,  (Case When sar.sar_tipo > 2 Then sar_valor Else 0.00 End),
                         sar_nome,
                         -- Coalesce(Trim(sar_docto) || ' - ', '') || sar_observar,
                         sar_historico, Coalesce(sar_dtcompe, sar_data), sar_nota_numero, sar_nota_serie
                   From [(sar)] sar
              Left Join [(sak)] sak
                     On sar.ak_cc = sak.ak_cc
                  Where sar_data >= in_dDataIni
                    And sar_data <= in_dDataFim
                    And sak.ak_fluxo  = 1
                    And sak.sak_ativo = 1
                 Union All
                 Select  cSessao,     fa2_origem,  fa2_recno,  fa2_data,  fa2_tipo * 3, ???, sys_compete(fa2_data),
                         'Caixa ' || fa1_caixa, (Case When fa2.fa2_tipo < 3 Then fa2_valor Else 0.00 End),
                         fa2_data,              (Case When fa2.fa2_tipo > 2 Then fa2_valor Else 0.00 End),
                         --Coalesce(Trim(fa2_docto) || ' - ', '') || fa2_observar,
                         fa2_nome,    fa2_historico, fa2_data, fa2_nota_numero, fa2_nota_serie
                   From [(fa2)] fa2
                  Where fa2_data >= in_dDataIni
                    And fa2_data <= in_dDataFim;

  -- Abre cursor para totalizar entradas e saídas data / natureza
   Open xFluxo For
         Select  f1_codnat, f1_descri, fr2_data, Sum(entrada), Sum(saida), Sum(entrada - saida)
           From
         (Select far.f1_codnat, sf1.f1_descri, fr2_data,
                 case when far.sar_tipo < 3 then far_valor else 0 end as entrada,
                 case when far.sar_tipo > 2 then far_valor else 0 end as saida
            From [(fr2)] fr2
            Join [(far)] far
              On fr2.fr2_origem = far.sar_origem And fr2.fr2_recno = far.sar_recno
            Join [(sf1)] sf1
              On far.f1_codnat = sf1.f1_codnat
           Where Substr(fr2.fr2_conta, 1, 5) <> 'Caixa'
           Union All
          Select fa4.f1_codnat, sf1.f1_descri, fr2_data,
                 case when fa4.fa2_tipo < 3 then fa4_valor else 0 end as entrada,
                 case when fa4.fa2_tipo > 2 then fa4_valor else 0 end as saida
            From [(fr2)] fr2
            Join [(fa4)] fa4
              On fr2.fr2_origem = fa4.fa2_origem And fr2.fr2_recno = fa4.fa2_recno
            Join [(sf1)] sf1
              On fa4.f1_codnat = sf1.f1_codnat
           Where Substr(fr2.fr2_conta, 1, 5) = 'Caixa') as foo
           Group by f1_codnat, f1_descri, fr2_data
           Order by fr2_data, f1_codnat;
   Fetch xFluxo Into iNatureza, cNatureza, dDataNatu, nEntradas, nSaidas, nSaldo;
   iOrdem := 0;
   While Found Loop
      iOrdem := iOrdem + 1;
      Insert Into [(fr1)] ( session,      fr1_ordem,    fr1_numero01, fr1_texto01,
                            fr1_data01,   fr1_valor01,  fr1_valor02,  fr1_valor03 )
                   Values ( cSessao,      iOrdem,       iNatureza,    cNatureza,
                            dDataNatu,    nEntradas,    nSaidas,      nSaldo );
      Fetch xFluxo Into iNatureza, cNatureza, dDataNatu, nEntradas, nSaidas, nSaldo;
   End Loop;
   Close xFluxo;

   nAnterior := 0.00;
   -- Abre cursor com as contas bancárias para busca do saldo
   Open xConta For
        Select ak_cc
          From [(sak)]
         Where ak_fluxo  = 1
           And sak_ativo = 1
         Order By ak_cc;
   Fetch xConta Into cConta;
   While Found Loop
      -- Busca saldo anterior nos bancos
      Select Max(saq_data) Into dDataSaldo
        From [(saq)]
       Where ak_cc = cConta
         And saq_data < in_dDataIni;
      If dDataSaldo Is Null Then
         nAntesCta := 0.00;
      Else
         Select Sum(Coalesce(saq_saldo, 0)) Into nAntesCta
           From [(saq)]
          Where ak_cc = cConta
            And saq_data = dDataSaldo;
      End If;
      nAnterior := nAnterior + nAntesCta;
      Fetch xConta Into cConta;
   End Loop;
   Close xConta;

   -- Abre cursor com os caixas para busca do saldo
   Open xConta For
        Select fa1_caixa
          From [(fa1)]
         Where fa1_fluxo = 1
           And fa1_ativo = 1
         Order By fa1_caixa;
   Fetch xConta Into iCaixa;
   While Found Loop
      -- Busca saldo anterior nos caixas
      Select Max(fa3_data) Into dDataSaldo
        From [(fa3)]
       Where fa1_caixa = iCaixa
         And fa3_data < in_dDataIni;
      If dDataSaldo Is Null Then
         nAntesCxa := 0.00;
      Else
         Select Sum(Coalesce(fa3_saldo, 0)) Into nAntesCxa
           From [(fa3)]
          Where fa1_caixa = iCaixa
            And fa3_data = dDataSaldo;
      End If;
      nAnterior := nAnterior + nAntesCxa;
      Fetch xConta Into iCaixa;
   End Loop;
   Close xConta;

   -- Abre cursor para totalizar periodo selecionado por data em FC4
   Open xFluxo For
        Select fr2_data, Sum(fr2_entrada), Sum(fr2_saida)
          From [(fr2)]
         Where session = cSessao
      Group by fr2_data
      Order by fr2_data;

   Fetch xFluxo Into dDataSaldo, nEntradas, nSaidas;
   While Found Loop
      -- Calcula o saldo da data atual
      nSaldo := nAnterior + nEntradas - nSaidas;
      If (nEntradas + nSaidas) > 0.00 Then
         -- Verifica a existencia de um registro para a data atual
         Select recno Into iRecno01
           From [(fc4)]
          Where session  = cSessao
            And ak_cc    = cConta_1
            And fc4_data = dDataSaldo;
         -- Inclui ou atualiza saldo da data atual
         If iRecno01 Is Null Then
            Insert Into [(fc4)] ( session,      ak_cc,      fc4_data,   fc4_anterior,
                                  fc4_entradas, fc4_saidas, fc4_saldo )
                 Values         ( cSessao,      cConta_1,   dDataSaldo,   nAnterior,
                                  nEntradas,    nSaidas,    nSaldo );
         Else
            Update [(fc4)]
               Set fc4_anterior = nAnterior, fc4_entradas = nEntradas,
                   fc4_saidas   = nSaidas,   fc4_saldo    = nSaldo
             Where recno = iRecno01;
         End If;
      End If;
      -- Calcula o saldo anterior para a proxima data
      nAnterior := nSaldo;
      Fetch xFluxo Into dDataSaldo, nEntradas, nSaidas;
   End Loop;
   Close xFluxo;
   out_res := 1;
End;
$$ language 'plpgsql';
