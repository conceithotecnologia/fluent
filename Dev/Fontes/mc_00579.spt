/*==================================================================================================================================
  Rotina...: <l> mc_00579 </l>
  --------------------------------------------------------------------------------------------------------------------------------
  Descrição: <d> Apresenta saldo diário Total do Fluxo de Caixa diário por empresa - tabela FC4 </d>
  --------------------------------------------------------------------------------------------------------------------------------
  Tipo.....: <t> Stored Procedure </t>
  --------------------------------------------------------------------------------------------------------------------------------
  Empresa..: MultCont Informática
  --------------------------------------------------------------------------------------------------------------------------------
  Autor....: Jurandy da Silva Costa
  --------------------------------------------------------------------------------------------------------------------------------
  Data.....: 20/12/2004 21:00:00                                   Alterado.: 23/06/2017
  --------------------------------------------------------------------------------------------------------------------------------
  Parametros
   [Entrada ]·····················································································································
            in_iAtraso:      Integer             Inclui Atrasados? 0-Não 1-Sim
            in_Data_A:       Date                Data inicial para os atrasados
            in_APagar:       Integer             Inclui Contas a Pagar? 0-Não 1-Sim
            in_OPagtos:      Integer             Inclui Outros Pagamentos? 0-Não 1-Sim
            in_ARecebe:      Integer             Inclui Contas a Receber? 0-Não 1-Sim
            in_ORecbto:      Integer             Inclui Outros Recebimentos? 0-Não 1-Sim
   [Saida ]·······················································································································
            out_res:         Integer
==================================================================================================================================*/
Create or Replace Function mc_00579####???
( In  in_iAtraso    Integer,
  In  in_Data_A     Date,
  In  in_APagar     Integer,
  In  in_OPagtos    Integer,
  In  in_ARecebe    Integer,
  In  in_ORecbto    Integer,
  Out out_res       Integer )
As $$
Declare

-- {Variáveis para cursores}
   xContas    refcursor;                    -- Cursor para as contas correntes
   xFluxo     refcursor;                    -- Cursor para o movimento do fluxo de caixa

-- {Variáveis de uso interno}
   iRecno01   [(fc4)].recno%type;           -- Número do registro
   cConta_1   [(fc4)].ak_cc%type;           -- Número da conta corrente
   dDataBase  [(fc4)].fc4_data%type;        -- Data base para saldo inicial
   dDataAntes [(fc4)].fc4_data%type;        -- Data base para saldo anterior
   dDataSaldo [(fc4)].fc4_data%type;        -- Data do último saldo bancario
   nAnterior  [(fc4)].fc4_anterior%type;    -- Saldo anterior do dia
   nEntradas  [(fc4)].fc4_entradas%type;    -- Entradas do dia
   nSaidas    [(fc4)].fc4_saidas%type;      -- Saidas do dia
   nSaldo     [(fc4)].fc4_saldo%type;       -- Saldo do dia
   cObserva   [(fc4)].fc4_observa%type;     -- Observações sobre o saldo
   iCaixa     [(fa2)].fa1_caixa%type;       -- Número do caixa
   cSessao    [(fr2)].session%type;         -- Sessão atual do usuário

Begin
   out_res := 0;
   -- Recupera a sessão do usuário
   cSessao := sys_session();
   -- Busca data base informada pelo usuário
   Select sys_getdatabase####???() Into dDataBase;
   -- Calcula data anterior à data base
   dDataAntes := dDataBase - 1;
   -- Limpa os dados da Sessão antes de montar um novo relatório
   Delete From [(fr2)] Where session = cSessao;
   Delete From [(fc4)] Where session = cSessao;

     -- Atualiza a coluna FC2_DFLUXO antes da montagem do Fluxo de Caixa
   Perform mc_00574####???( in_iAtraso, dDataBase, in_Data_A, cSessao );

   -- Transfere o detalhamento para a tabela temporária do usuário
   Insert Into [(fr2)] ( session,    fr2_origem,  fr2_recno,  fr2_data,      fr2_tipo,        fr2_filial,
                         fr2_conta,  fr2_entrada, fr2_saida,  fr2_compete,   fr2_status,      fr2_cli_for,
                         fr2_vbaixa, fr2_dbaixa,  fr2_dfluxo, fr2_historico, fr2_nota_numero, fr2_nota_serie, fr2_emissao )
                 Select  cSessao,    fc2_origem,  fc2_recno,  fc2_data,      fc2_tipo,        ???,
                         Coalesce(Case When fc2.ak_cc Is Null Then 'Caixa ' || fa1_caixa
                                       Else fc2.ak_cc End, 'INDEFINIDA'),
                                     fc2_entrada, fc2_saida,  fc2_compete,   fc2_status,      fc2_cli_for,
                         fc2_vbaixa, fc2_dbaixa,  fc2_dfluxo, fc2_historico, fc2_num_nf,      fc2_nf_serie,  fc2_emissao
                   From [(fc2)] fc2
              Left Join [(sak)] sak
                     On fc2.ak_cc = sak.ak_cc
                  Where fc2_dfluxo >= dDataAntes
                    And fc2_fluxo = 1
                    And ((sak.ak_fluxo = 1 And sak.sak_ativo = 1) Or fc2.ak_cc Is Null)
                    And ((fc2_tipo = 5 And fc2_origem = 'SAO'  And in_APagar  = 1)
                      Or (fc2_tipo > 4 And fc2_origem <> 'SAO' And in_OPagtos = 1)
                      Or (fc2_tipo = 0 And fc2_origem = 'SAN'  And in_ARecebe = 1)
                      Or (fc2_tipo < 5 And fc2_origem <> 'SAN' And in_ORecbto = 1));

   -- Cursor com as Contas Bancárias
   Open xContas For
        Select fr2_conta
          From [(fr2)]
         Where session = cSessao
      Group by fr2_conta
      Order by fr2_conta;

   Fetch xContas Into cConta_1;

   While Found Loop
      -- Busca saldo anterior no banco ou no caixa
      If Substr(cConta_1, 1, 6) = 'Caixa ' Then
         iCaixa := Substr(cConta_1, 7, 2)::Integer;
         Select Max(fa3_data) Into dDataSaldo
           From [(fa3)]
          Where fa1_caixa = iCaixa
            And fa3_data < dDataBase;
         If dDataSaldo Is Null Then
            nAnterior := 0.00;
         Else
            Select Sum(Coalesce(fa3_saldo, 0)) Into nAnterior
              From [(fa3)]
             Where fa1_caixa = iCaixa
               And fa3_data = dDataSaldo;
         End If;
      Else
         Select Max(saq_data) Into dDataSaldo
           From [(saq)]
          Where ak_cc    = cConta_1
            And saq_data < dDataBase;
         If dDataSaldo Is Null Then
            nAnterior := 0.00;
         Else
            Select Coalesce(saq_saldo, 0) Into nAnterior
              From [(saq)]
             Where ak_cc    = cConta_1
               And saq_data = dDataSaldo;
         End If;
      End If;
      -- Cursor com o detalhamento do saldo
      Open xFluxo For
           Select fr2_dfluxo, Sum(fr2_entrada - (Case When fr2_tipo = 2 Or fr2_tipo = 8 Or fr2_entrada <= 0 Or fr2_entrada = fr2_vbaixa Then 0 Else fr2_vbaixa End)),
                              Sum(fr2_saida   - (Case When fr2_tipo = 2 Or fr2_tipo = 8 Or fr2_saida <= 0 Or fr2_saida = fr2_vbaixa Then 0 Else fr2_vbaixa End))
             From [(fr2)]
            Where session   = cSessao
              And fr2_conta = cConta_1
         Group by fr2_dfluxo
         Order by fr2_dfluxo;

      Fetch xFluxo Into dDataSaldo, nEntradas, nSaidas;
      While Found Loop
         -- Calcula o saldo da data atual
         If dDataSaldo = dDataAntes Then
            nSaldo := nAnterior;
         Else
            nSaldo := nAnterior + nEntradas - nSaidas;
         End If;
         If (nEntradas + nSaidas) > 0.00 Then
            -- Verifica a existencia de um registro para a data atual
            Select recno Into iRecno01
              From [(fc4)]
             Where session  = cSessao
               And ak_cc    = cConta_1
               And fc4_data = dDataSaldo;
            -- Inclui ou atualiza saldo da data atual
            If iRecno01 Is Null Then
               If dDataSaldo = dDataAntes Then
                  If in_iAtraso > 0 Then
                     cObserva := 'ATRASADOS ENTRE ' || to_char( in_Data_A, 'DD/MM/YYYY' ) || ' E ' ||
                                 to_char( dDataAntes, 'DD/MM/YYYY' );
                     Insert Into [(fc4)] ( session,      ak_cc,      fc4_data,   fc4_anterior,
                                           fc4_entradas, fc4_saidas, fc4_saldo,  fc4_observa )
                          Values         ( cSessao,      cConta_1,   dDataSaldo, 0,
                                           nEntradas,    nSaidas,    0,          cObserva );
                  End If;
               Else
                  Insert Into [(fc4)] ( session,      ak_cc,      fc4_data,   fc4_anterior,
                                        fc4_entradas, fc4_saidas, fc4_saldo )
                       Values         ( cSessao,      cConta_1,   dDataSaldo, nAnterior,
                                        nEntradas,    nSaidas,    nSaldo );
               End If;
            Else
               Update [(fc4)]
                  Set fc4_anterior = nAnterior, fc4_entradas = nEntradas,
                      fc4_saidas   = nSaidas,   fc4_saldo    = nSaldo
                Where recno = iRecno01;
            End If;
         End If;
         -- Calcula o saldo anterior para a proxima data
         nAnterior := nSaldo;
         Fetch xFluxo Into dDataSaldo, nEntradas, nSaidas;
      End Loop;
      Close xFluxo;
      Fetch xContas Into cConta_1;
   End Loop;
   Close xContas;
   out_res := 1;
End;
$$ language 'plpgsql';
