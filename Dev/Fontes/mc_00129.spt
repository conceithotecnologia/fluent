/**
   Validações do cabeçalho da nota fiscal de saída - SAI

	@author    Jurandy da Silva Costa
	@date      26/04/2008 15:30:00
	@trigger   SAI B IUD

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso

   18/12/2009 Ricardo Gonçalves        [+] Os campos sai_codtable e sai_recno passam ser preenchidos na inserção quando contiverem nulo.
   11/01/2010 Ricardo Gonçalves        [+] Checagem de flag para permitir excluão da nota fiscal.
   03/07/2010 Wagner Mobile Costa      [+] Processo de cancelamento de nota fiscal eletronica de terceiros.
   05/07/2010 Ricardo Gonçalves        [*] Criação da variável va17_historico.
   17/08/2010 Wagner Mobile Costa      [+] Implementação do processo de contigência e transferência da indicação do tipo de ambiente para série - BUG 683
   11/12/2010 Jurandy da Silva Costa   [*] Inclusão de testes para natureza de operação bloqueada.
   01/02/2011 Wagner Mobile Costa      [-] Notas fiscais denegadas devem ser mantidas - Bug 861
   19/03/2011 Ricardo Gonçalves        [*] Checagem da TES passa a ser pela função ck_00004####???(new.f4_tes) <> 1
   17/09/2011 Wagner Mobile Costa      [-] Permitir alteração de status da nota quando a mudança for no campo de status da nota eletronica controlada pelo monitor
   20/09/2011 Wagner Mobile Costa      [-] Permitir a exclusão de notas fiscais em pré-nota
   04/10/2011 Wagner Mobile Costa      [+] Configuração que permite aprovação automática das parcelas
   28/10/2011 Wagner Mobile Costa      [+] Calculo da comissão
   11/02/2011 Wagner Mobile Costa      [-] Correção no mecanismo para verificação das parcelas movidos da procedure MC_00009
   21/07/2012 Wagner Mobile Costa      [-] Correção no tratamento para nota complementar
   08/01/2013 Wagner Mobile Costa      [-] Permitir alterações na nota fiscal em status de digitação após geração de nota eletronica
   11/01/2013 Ricardo Gonçalves        [-] Preenchimento automático do endereçamento da transportadora.
   11/01/2013 Ricardo Gonçalves        [-] Preenchimento da data de saída na geração da NF-e quando o não estiver informada.
*/
Create or Replace Function mc_00129####???()
Returns trigger AS
$$
Declare
   r           record;
   iRequisita  [(sdl)].sdl_docto%type;         -- Número da requisiçao
   cHistorico  [(sdl)].sdl_historico%type;     -- Historico da requisição
   vhistorico  [(a49)].a49_historico%type;

   iReimprime  Integer;
   Idiaforames integer;
   nTotIsento  Numeric(15, 2);
   nSerIsento  Numeric(15, 2);
   nProIsento  Numeric(15, 2);
   nTotal_IPI  Numeric(15, 2);
   nTotalNota  Numeric(15, 2);
   iAlterou    Integer;
   xCursor     record;
   iParcelas   [(sfa)].fa_parcs%type;        -- Numero de parcelas da condicao de pagto
   iPrimeira   [(sfa)].fa_priparc%type;      -- Primeira parcela da condicao de pagto
   iIntervalo  [(sfa)].fa_intervalo%type;    -- Intervalo em dias entre as parcelas
   sDias       [(sfa)].fa_condpgto%type;
   iNrTitulo   [(san)].an_codtit%type;
   dVencto     [(san)].an_vencto%type;       -- Data de vencimento
   dVenceReal  [(san)].an_venctoreal%type;   -- Data de vencimento real
   iVezes      Integer;
   nVlrParcela Numeric(15, 2);
   div         varchar;
   bGeraParc   boolean;
   vmsg        varchar;
   iBuscCom	   integer;
   iComitem	   integer;
   vField     varchar;
   vChar      varchar;
   i           integer;

Begin
   If tg_op <> 'DELETE' Then
      	  
	  if new.sai_nota > 0 and new.sai_nf is null then
		 new.sai_nf = new.sai_nota;
	  end if;
	  
	  if new.sai_nf > 0 and new.sai_nota = 0 then
	     new.sai_nota = new.sai_nf;
	  end if;
	  
	  if new.f4_tes is not null then
		select sf4_obs_nfcab 
		  into new.sf4_obs_nfcab
		  from [(sf4)] 
		 where f4_tes = new.f4_tes;
	  end if;
	  
	  bGeraParc := false;

      -- verifica se Pessoa esta como inativa no cadastro
      if exists (
         select 1
           from [(sfj)]
          where sfj_pessoa = new.a1_codcli
            and sfj_situacao = 0)
      then
         raise '[[ATENÇÃO. A Pessoa selecionada está INATIVA. Verifique!]]';
      end if;
      
      if (new.sai_placa is null     and new.sai_placauf is not null) or
         (new.sai_placa is not null and new.sai_placauf is null) 
      then
         raise '[[ATENÇÃO. Preencha os dados de placa e placa UF.]]';
      end if;      
      
      -- Trata tabela e recno de origem
      if tg_op = 'INSERT' then
         --raise '[["%"]]',new.saf_pedcli;
         new.sai_codtable := coalesce(new.sai_codtable, 'SAI');
         new.sai_recno := coalesce(new.sai_recno, new.recno);

         -- Preenche o vendedor e comissão
         if new.sai_codtable <> 'SAI' and new.a7_codvend is null then
            -- Recupera informações padrão do cliente
            select sa8.a7_codvend, sa7.a7_comissao
              into new.a7_codvend, new.a7_comissao
              from [(sa8)] sa8
                   left join [(sa7)] sa7
                     on sa7.a7_codvend = sa8.a7_codvend
             where sa8.a1_codcli = new.a1_codcli;
            new.a7_comissao := coalesce(new.a7_comissao, 0);
         end if;
      end if;
         
      -- Valida se a pessoa tem um perfil cadastrado de acordo com o tipo de nota.
      if new.sai_tipo = 0 and not exists (select 1 from [(sa1)] where a1_codcli = new.a1_codcli) then
         raise '[[ATENÇÃO. A pessoa selecionada não tem perfil de Cliente cadastrado.]]';
      elsif new.sai_tipo = 1 and not exists (select 1 from [(sac)] where ac_codforn = new.a1_codcli) then
         raise '[[ATENÇÃO. A pessoa selecionada não tem perfil de Fornecedor cadastrado.]]';
      end if;
      
      -- Testa se TES utilizada nos produtos gera contas a receber
      If exists(
          Select 1
            From [(saj)] saj, [(sf4)] sf4
           Where saj.sai_serial = new.sai_serial
             And sf4.f4_tes     = saj.f4_tes
             and new.fa_codcond is null
             And sf4.f4_geradupl = 1 and new.sai_comple_icms = 0)
      then
         raise '[[ATENÇÃO. Uma Natureza de Operação utilizada nos produtos exige Condição de Pagamento.]]';
      end if;

      -- Testa se TES utilizada nos serviços gera contas a receber
      If exists(
         Select 1
            From [(sgj)] sgj, [(sf4)] sf4
           Where sgj.sai_serial = new.sai_serial
             And sf4.f4_tes     = sgj.f4_tes
             and new.fa_codcond is null
             And sf4.f4_geradupl = 1)
      then
         raise '[[ATENÇÃO. Uma Natureza de Operação utilizada nos serviços exige Condição de Pagamento.]]';
      end if;

      If tg_op = 'UPDATE' Then
	    
         if new.sai_afrmm <> old.sai_afrmm then
            new.sai_total_ger = new.sai_total_ger - old.sai_afrmm + new.sai_afrmm;
         end if;
         
         -- Recupera as configurações do calculo da comissão e atualiza cabeçalho do pedido
         iBuscCom := sys_param_int####???('busca_comissao', 0);  -- 0 = Não Calcula Comissão, 1 = Busca no representante, 2 = Busca no Cliente/Produto
         iComitem := sys_param_int####???('comissao_item', 0);   -- 0 = Não Calcula Por Item, 1 = Calcula por Item
         
         if new.sai_crt <> old.sai_crt and exists (select 1 from [(saj)] where sai_serial = new.sai_serial)
         then
            raise '[[Regime tributário não pode ser altrado quando há itens inseridos na nota. Exclua os itens e altere o regime tributário.]]';
         end if;
         
         If iBuscCom > 0 And iComitem = 0 Then				
            -- Monta a base de calculo se a comissão não for informada
            if new.a7_inf_com = 0 then
               new.a7_bas_com := new.sai_total_fat + new.sai_vlajustes - new.sai_vlipi_pro;
            end if;
            new.sai_comissao := round(new.a7_bas_com * (new.a7_comissao / 100), 2);
            
            -- Zera base de calculo, percentual e valor de comissão se não houver vendedor
            if new.a7_codvend is null or new.a7_comissao = 0 then
               new.a7_bas_com   := 0.00;
               new.a7_comissao  := 0.00;
               new.sai_comissao := 0.00;
            end if;
         end if;
		
         -- Recupera a configuração da aprovação financeira
         Select fat_altera_p, fat_altera_a, fcc_aprovauto_nf Into xCursor From [(fcc)];

         iReimprime := mc_getflag####???( 'SAI', new.recno );

         -- Tratamento para o status da nota eletrônica
         if new.nf0_cod in (100,101) and new.sai_estado = 3 and old.sai_estado <> 3 then
            -- Aprovação do envio da nota fiscal
            if new.nf0_cod = 100 then
               new.sai_status := 1;
               new.sai_estoque := 3;
            -- Aprovação do cancelamento da nota fiscal ou Nota Fiscal denegadas
            elsif new.nf0_cod = 101 or new.nf0_cod in (301,302) then
               new.sai_status := 2;
               new.sai_estoque := 3;
            end if;
         end if;

         -- Testa se Retrocedeu Status
         If old.sai_status > new.sai_status And iReimprime = 0 Then
            raise '[[ATENÇÃO. Não é possivel alterar este Status. Verifique.]]';
         End if;

         -- Testa se está cancelando a NF e se vem da rotina de cancelamento
         If (old.sai_status < 2 and new.sai_status = 2) And iReimprime = 0 And new.nf0_cod = old.nf0_cod Then
            raise '[[ATENÇÃO. Cancele a NF através da rotina específica.]]';
         End if;

         -- Testa se NF Foi Impressa
         If new.sai_nf is null and new.sai_status = 2 then
            raise '[[ATENÇÃO. A NF ainda não foi impressa. Não é possivel cancela-la.]]';
         End if;

         -- Verifica se o endereço de entrega que é obrigatório não foi preenchido
         If new.sai_entregar Is Null And (Select se1_exig_entrega
                                            From [(se1)]
                                           Where se1_entrega = new.se1_entrega) > 0 Then
            raise '[[ATENÇÃO. O endereço de entrega é obrigatório para este tipo de entrega. Verifique.]]';
         End If;
         -- Não permite alterar notas fiscais que já geraram títulos em Contas a Receber
         If old.sai_financas <> 0 And old.sai_financas = new.sai_financas And new.nf0_cod = old.nf0_cod
            And iReimprime = 0 And new.sai_manual = 0 Then
            raise '[[ATENÇÃO. Não é permitido alterar uma nota fiscal que já gerou os títulos em Contas a Receber. Verifique.]]';
         End If;

         -- Não permite alterar a nota depois que o status do estoque está como Faturado
         If old.sai_estoque > 2 And iReimprime = 0 And old.sai_financas = new.sai_financas And new.nf0_cod = old.nf0_cod And new.sai_manual = 0 Then
            raise '[[ATENÇÃO. Não é permitido alterar uma nota fiscal já faturada. Verifique.]]';
         End If;

         -- Não permite pular etapas no status do estoque
         If new.sai_estoque > 2 And old.sai_estoque < 2 And new.sai_manual = 0 Then
            raise '[[ATENÇÃO. O status do estoque não pode ser alterado para Faturado diretamente. Verifique.]]';
         End If;

         -- Verifica aprovação financeira
         If new.sai_nf is null And old.sai_financas = 0 And new.sai_financas <> 0 Then
            raise '[[ATENÇÃO. A aprovação financeira só é possível após a impressão da nota fiscal. Verifique.]]';
         End If;

         If new.sai_avulso = 0 And mc_getflag####???('SAI', new.recno ) = 0 And old.sai_financas = new.sai_financas And
            new.nf0_cod = old.nf0_cod And old.sai_financas = new.sai_financas Then           
			 if (old.sai_estoque > 1 and new.sai_estoque > 1) or (new.sai_nf > 0) then           
             -- raise '[[ATENÇÃO. Apenas as notas fiscais avulsas não impressas podem ser alteradas. Verifique.]]';
          end if;
         End If;
         -- Se diminuir o status e houver transmissão pendente deleta
         if old.sai_estoque = 2 and new.sai_estoque = 0 and new.nf0_cod <= 6 then
			
             delete from [(nfa)] where table_origem = 'SAI' and recno_origem = new.recno;
             new.nf0_cod := null;
         end if;

         -- Não permitir alterar o código do cliente se já tiverem sido digitados os itens da nota
         If Exists(Select 1 From [(saj)] Where sai_serial = new.sai_serial) And
            old.a1_codcli <> new.a1_codcli Then
             raise '[[ATENÇÃO. O código do cliente só pode ser alterado enquanto não for incluído nenhum item na nota.]]';
         End If;

         -- TRATAMENTO PARA NOTA FISCAL AVULSA
         If new.sai_avulso = 1 and new.sai_comple_icms = 0 then     -- nota fiscal avulsa
            -- Tratamento para a requisição e para o status de estoque na nota avulsa
            If exists(
               Select 1
                 From [(saj)]
                Where sai_serial = new.sai_serial)
            Then
               -- Verifica se a TES nos itens da nota movimentam estoque
               If exists (
                  Select 1
                    From [(saj)] saj
                         Join [(sf8)] sf8
                           on sf8.f8_cfop = saj.f8_cfop
                          and sf8.f8_estoque = 1 
                   Where saj.sai_serial = new.sai_serial)
               Then
                  -- Os campos Etapa da requisição nao podem ser pulados
                  If new.sai_estoque - old.sai_estoque > 1 And new.sai_manual = 0 Then
                     --raise '[[ATENÇÃO. Não é permitido pular estágios no Status de estoque da nota fiscal. Verifique.]]';
                  End If;

                  -- Os campos Etapa da requisicao não podem retroceder
                  If old.sai_estoque > new.sai_estoque And new.sai_manual = 0 Then
                     --raise '[[ATENÇÃO. Não é permitido retroceder o STATUS do estoque na nota fiscal. Verifique.]]';
                  End If;

                  -- Status mudou para 1-Aguardando Material - Gerar requisição
                  If new.sai_estoque = 1 And old.sai_estoque = 0 then
                     -- Movimento de saída.
                     if new.sai_tipo = 0 then
                        -- Define histórico da requisição
                        cHistorico := 'Referente a nota avulsa '|| new.sai_serial;
                     end if;
                  End If;
               End If;
            End If;
         End if;

         -- Preenche a indicação da aprovação financeira de acordo com a configuração
         If new.nf0_cod in (100,101) and new.sai_estado = 3 and old.sai_estado <> 3 Then
           if ((new.sai_avulso = 1 And xCursor.fat_altera_a = 0) Or (new.sai_avulso = 0 And xCursor.fat_altera_p = 0)) or (xCursor.fcc_aprovauto_nf = 1) then
              new.sai_financas := 1;
           end if;
         End If;
      End If;

      -- Inicializa flag indicador de alteração na Natureza de Operação
      iAlterou := 0;
      If tg_op = 'UPDATE' Then
         If old.f4_tes <> new.f4_tes Then
            iAlterou := 1;
         End If;
      End If;
      If iAlterou = 1 Or (tg_op = 'INSERT' And new.f4_tes Is Not Null) Then
         If ck_00004####???(new.f4_tes) <> 1 Then
            raise '[[ATENÇÃO. A natureza de operação % está inativa. Favor verificar.]]', new.f4_tes;
         End If;
      End If;

      If tg_op = 'UPDATE' Then
         -- Preenche o total faturado no cabeçalho da nota

         if ((new.nf0_cod in (100,101) and new.sai_estado = 3 and old.sai_estado <> 3) or (old.sai_estoque <> 2 and new.sai_estoque = 2)) then
            If exists (
                  Select 1
                    From [(saj)] saj
                         Join [(sf8)] sf8
                           on sf8.f8_cfop = saj.f8_cfop
                          and sf8.f8_estoque = 1 
                   Where saj.sai_serial = new.sai_serial)
            then
               if exists(
                  select 1
                  from [(a4k)]
                  where sai_serial = new.sai_serial
                     and (a4k_qtdnsertot > 0 or a4k_qtdloteu1 <> a4k_qtdu1))
               then
                  raise '[[ATENÇÃO. Há produtos com Lotes/N°s de Série pendentes de distribuição.]]';
               end if;
            end if;

            -- Somatória das Naturezas Financeiras que Não geram Contas a Receber - Produtos
            Select Sum(Coalesce(saj.saj_total + saj.saj_vlr_ipi + saj.saj_vicmsst  + saj.saj_vicmsst + saj_frete + saj_seguro + saj_encargos + saj_acessorias + saj_ii - saj.saj_desc, 0))
              Into nProIsento
              From [(saj)] saj
              Join [(sf4)] sf4
                On sf4.f4_tes = saj.f4_tes
               And sf4.f4_geradupl <> 1
             Where saj.sai_serial = new.sai_serial;

            -- Somatória das Naturezas Financeiras que Não geram Contas a Receber - Serviços
            Select Sum(Coalesce(sgj.sgj_total, 0))
              Into nSerIsento
              From [(sgj)] sgj
              Join [(sf4)] sf4
                On sf4.f4_tes = sgj.f4_tes
               And sf4.f4_geradupl <> 1
             Where sgj.sai_serial = new.sai_serial;

            -- Total dos itens que não geram cobrança - Produtos e Serviços
            nTotIsento := Coalesce(nProIsento, 0) + Coalesce(nSerIsento, 0);

            -- Gera as parcelas na tabela FNR
            nTotal_IPI := new.sai_vlipi_pro + new.sai_vicmsst;
            nTotalNota := new.sai_total_ger - nTotal_IPI - nTotIsento;

            -- Grava o total da fatura no cabeçalho da nota fiscal
            new.sai_total_fat := nTotalNota + nTotal_IPI;
            new.sai_dtsaida := coalesce(new.sai_dtsaida, current_date);
            
            if new.sai_codtable = 'SAF' then
               new.sai_origem := 'Pedido(s)';
               div := '';
               for r in (
                  select sag.saf_codped
                    from [(sag)] sag
                         join [(saj)] saj
                           on saj.saj_recno = sag.recno
                          and saj.codtable = 'SAG'
                          and saj.sai_serial = new.sai_serial
                   group by sag.saf_codped)
               Loop
                  new.sai_origem := new.sai_origem || div || r.saf_codped;
                  div := ', ';
               End Loop;
            end if;
         end if;

		 If new.nf0_cod = 135 and new.sai_estado = 3 and old.sai_estado <> 3 or new.sai_status = 2 Then
			new.sai_financas = 2;
		 End If;
		
         -- Gera as parcelas caso haja alguma alteração de valor, condição de pagamento ou data
         If old.sai_total_ger <> new.sai_total_ger Or old.f4_tes        <> new.f4_tes        Or 
            old.fa_codcond    <> new.fa_codcond    Or old.sai_dtemissao <> new.sai_dtemissao Or 
            old.sai_arredonda <> old.sai_arredonda Or old.sai_ipi_antes <> new.sai_ipi_antes or
            old.sai_estoque   <> new.sai_estoque Then      --Fabio re-incluiu um 13/03/2017 pois não gerava na Ultraprint
            --new.sai_estoque = 0;

            bGeraParc := true;

         End If;

         -- Gera as parcelas caso receba o número da nota e não existam
         If bGeraParc Then
            
            -- Verifica se pelo menos um dos itens gera cobrança - Produtos e Serviços
            If (new.sai_frete + new.sai_seguro + new.sai_acessorias + new.sai_encargos) <= 0.00 And
               (not exists (
                  Select 1 
                    From [(saj)] saj, [(sf4)] sf4
                   Where saj.sai_serial = new.sai_serial
                     And sf4.f4_tes     = saj.f4_tes And sf4.f4_geradupl = 1)) And
               (not exists(
                  Select 1 
                    From [(sgj)] sgj, [(sf4)] sf4
                   Where sgj.sai_serial = new.sai_serial
                     And sf4.f4_tes     = sgj.f4_tes And sf4.f4_geradupl = 1)) 
            Then
               -- Se for impressão da nota atualiza a coluna de aprovação financeira
               -- Altera o status para 2 - Não Gera Cobrança

               Delete From [(tgd)] Where codtable = 'SAI' and recno_origem = new.recno;

               insert into [(tgd)] (tgd_vencimento, tg9_recno, codtable, recno_origem)
                    values (current_date, 13,        'SAI',    new.recno);

               Return New;
            End If;

            -- Exclui parcelas calculadas anteriormente
            Delete From [(fnr)] Where sai_serial = new.sai_serial;

            -- Exclui formas de pagamento
            Delete From [(tgd)] Where codtable = 'SAI' and recno_origem = new.recno;

            -- Recupera a condição de Pagamento
            Select sfa.fa_parcs, sfa.fa_priparc, sfa.fa_intervalo, sfa.fa_dfm,  sfa.fa_condpgto
              Into iParcelas,    iPrimeira,      iIntervalo,       Idiaforames, sDias
              From [(sfa)] sfa
             Where sfa.fa_codcond = new.fa_codcond;

            if FOUND and iParcelas > 0 then
               --Baseado no Campo fa_condpgto
               if sDias is not null then
                  vField := '';
                  iVezes := 0;
                  for i in 1..length(sDias) loop
                      vChar := substr(sDias,i,1);
                      if vChar <> '/' then
                         vField := vField || vChar;
                      elsif vChar = '/' then
                         iVezes := iVezes + 1;

                         If new.sai_ipi_antes = 1 Then
                            nVlrParcela := sys_parcelas(new.sai_total_fat - (new.sai_vlipi_pro + new.sai_vicmsst), iParcelas, iVezes, new.sai_arredonda);
                            If iVezes = 1 Then
                               nVlrParcela := nVlrParcela + new.sai_vlipi_pro + new.sai_vicmsst;
                            End If;
                         Else
                            nVlrParcela := sys_parcelas(new.sai_total_fat, iParcelas, iVezes, new.sai_arredonda);
                         End If;

                         -- Inclui o cabeçalho do título em FNP
                         dVencto := new.sai_dtemissao + vField::integer;

                         -- Calcula o vencimento verificando Domingos e Feriados
                         dVenceReal := mc_vence_real####???( dVencto, 1, sys_iif(new.sai_tipo = 0, 1, 2), new.a1_codcli, 0, '', new.fa_codcond);

                         If nVlrParcela > 0 then
                             Insert Into [(fnr)] ( sai_serial,     fnr_parce,   fnr_vencto,
                                                   fnr_vencto_o,   fnr_valor,   fnr_valor_o )
                                  Values         ( new.sai_serial, iVezes,      dVenceReal,
                                                   dVencto,        nVlrParcela, nVlrParcela );
                             vField := '';         
                         end if;
                      end if;
                  end loop;

                  insert into [(tgd)] (tgd_valor, tgd_vencimento, tg9_recno, codtable, recno_origem)
                              select sum(fnr_valor), max(fnr_vencto), 6, 'SAI', new.recno
                              from [(fnr)]
                              where sai_serial = new.sai_serial;
               else
                  raise '[[Condição de pagamento incompleta. Favor preencher texto que detalha dias entre parcelas. Exemplo: 15/28/40.]]';
               end if;
            else
               -- Gera forma de pagamento sem pagamento
               insert into [(tgd)] (tgd_vencimento, tg9_recno, codtable, recno_origem)
                    values (current_date, 13,        'SAI',    new.recno);
            end if;
         End If;

         -- Verifica se há pendencias de atribuição de números de série
         vmsg := '';
         
         if old.sai_estoque = 0 and new.sai_estoque > 0 then
         
            for r in (
               select b.b1_codpro, b.b1_nome, b.b1_ref
                 from [(saj)] a
                      join [(sb1)] b
                        on b.b1_codpro = a.b1_codpro
                where sai_serial = new.sai_serial
                  and saj_estado = 0)
            loop
               vmsg := 'O material "%s - %s%s" possui pendências. %s';
               vmsg := format(vmsg, r.b1_codpro, r.b1_nome, coalesce(', referência ' || r.b1_ref, ''), 'Registrar nº de série para 1 ou mais itens.');

               perform sys_msg####???(2, vmsg);
            end loop;
         end if;
      end if;   
      
      -- preenche o endereço da transportadora
      if new.ab_codtrans is not null and new.sai_transp_ender is null then
         new.sai_transp_ender := mc_00205####???(new.ab_codtrans);
      end if;

      Return New;
   Else
   
      if old.sai_codtable = 'SAF' and sys_mod####???() <> 'TN' then
         for r in(
            select a.b1_codpro, current_date as data, a.saj_quantos, 0,
                   a.z2_coduni, 'SAI',        a.recno,   a.saj_unitario,
                   1,         'Cancelamento da nota ??? retorno ao estoque' as va49_historico, 10, old.recno,
                   old.a1_codcli, a.f8_cfop
              from [(saj)] a
                   join [(sag)] b
                     on b.recno = a.saj_recno
                    and b.sag_estoque = 1
                   join [(sbf)] c
                     on c.b1_codpro = a.b1_codpro
                    and sbf_estocavel = 1
             where a.sai_serial = old.sai_serial
               and a.codtable = 'SAG')
         loop
            -- Tenta gerar o ordem de movimentação
            insert into [(a49)] (b1_codpro,      a49_data,       a49_qtd,        a49_notificar,
                                 z2_coduni,      codtable,       a49_recno,      a49_custou,
                                 a49_tipo,       a49_historico,  a4i_tipo,       a49_doc,
                                 sfj_pessoa,     f8_cfop)
                 values         (r.b1_codpro,    r.data,         r.saj_quantos,  1,
                                 r.z2_coduni,    'SAJ',          r.recno,      r.saj_unitario,
                                 1,              r.va49_historico, 10, r.recno,
                                 r.a1_codcli,    r.f8_cfop);
         
         end loop;
      end if;
      
      -- Permite a exclusão de pré-danfe
      if old.nf0_cod = 6 then
         delete from [(nfa)] where table_origem = 'SAI' and recno_origem = old.recno;
          
      -- Testa se NF não foi emitida ou eh eletronica para permitir exclusão
      --elsIf ((old.sai_status <> 0) or (not old.nf0_cod is null)) and (mc_getflag####???('sai', old.recno) <> 1) Then
      -- Se nota faturada ou aguardando transmissão/Transmitida com sucesso ou com flag, não permite exclusão
      elsIf ((old.sai_estoque = 3) or (old.sai_estado in (1,3))) and (mc_getflag####???('sai', old.recno) <> 1) Then
         if old.nf0_cod is not null and old.sai_estado = 1 then
            raise '[[ATENÇÃO. NF em processo de emissão de NFe. Não é possivel exclui-la. Verifique!]]';
         else
            raise '[[ATENÇÃO. NF Já emitida. Não é possível exclui-la. Verifique!]]';
         end if;
      End If;

      -- inserir registro na tabela sej para excluir o movimento do estoque
      Return Old;
   End If;
End;
$$  LANGUAGE plpgsql;