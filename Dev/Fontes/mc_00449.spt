/**
   Leitura do arquivo de retorno do pagamento eletronico -  SISPAG - banco Itau

	@author    Fabio Carvalho
	@date      19/11/2012
	@trigger

	@param pConta Número da conta bancária a gerar o arquivo

        @return 1 - sucesso / 0 falha

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso

*/
Create or Replace Function mc_00449####???
( In  pConta  VarChar(25),
  Out out_res       Integer )
As $$
Declare
-- {Variáveis para cursores}
   xSelecao       refcursor;             -- Cursor para Títulos selecionados

-- {Variáveis de uso interno}
   cSessao        [(fr5)].session%type;     -- Sessão atual do usuário
   sApelido       [(sfj)].sfj_apelido%type; -- Apelido
   rBanco         Record;                   -- Dados da C/C
   rDados         Record;                   -- Dados Lidos
   iLotes         integer;                  -- Numero de Lotes no Arquivo
   iRegistros     integer;                  -- Numero de Registros Lidos
   iTLotes        integer;                  -- Numero de Lotes Lidos
   iTRegistros    integer;                  -- Numero de Registros no Arquivo
   iTitulo        integer;                  -- Numero do Titulo
   iParcela       integer;                  -- Numero da Parcela
   sNNumero       varchar;                  -- Nosso Numero fornecido pelo banco
   iRegLote       integer;                  -- Numero de registros nos lotes
   dPgto          date;
   dVecto         date;
   nvalor         numeric;
   nJuros         numeric;
   nDescto        numeric;
   sRejeicao      varchar;
   sRetorno       varchar;
   iStatus        integer;
   iLote          integer;    --Numero do Lote de Retorno
   iProcessar     integer;    --Se Vai processar o registro da Filial     0-nao 1-sim
   rFilial        Record;
Begin
   out_res := 0;
   -- Recupera a sessão do usuário
   cSessao := sys_session();

   --Recupera Dados da Filial para Ver se Processa/Nao Registro
   select cnpj, cpf
     into rFilial
     from [(ss063)]
    where filial = sys_filial####???();

  -- Recupera dados do banco a partir da conta bancária
   Select sak.sak_cp_convenio, sak.a0_codag, sak.ak_digito, sak.ak_conta, sak.a9_codbanco, sa9.p_febraban, sak.ak_digito_ac,
          sa0.a0_digito
     Into rBanco
     From [(sak)] sak
     join [(sa9)] sa9 on sa9.a9_codbanco = sak.a9_codbanco
     join [(sa0)] sa0 on sa0.a9_codbanco = sak.a9_codbanco and sa0.a0_codag = sak.a0_codag
    Where ak_cc = pConta;

   --Total de Lotes Lidos no Registro Trailer
   iTLotes     := 0;

   --Total de registros Lidos no registro Trailer
   iTRegistros := 0;

   -- Limpa Valores Para Testes de acumulados
   iLotes     := 0;
   iRegistros := 0;
   iProcessar := 0;

   -- Cursor com os registros lidos no arquivo de retorno
   for rDados in (Select *
                    from [(fr4)]
                   Where session = cSessao
                   order by recno) loop

       --Teste de Banco
       if substr(rDados.fr4_texto,01,03) <> '341' then
          raise '[[ATENÇÃO. Este arquivo de retorno não pertence ao Banco Itau. Verifique!]]';

       -- Header de Arquivo
       elsif substr(rDados.fr4_texto,04,04) = '0000' then

          -- Versao Invalida
          if substr(rdados.fr4_texto,15,03) <> '080' then
             raise '[[ATENÇÃO. Versão de Retorno Inválida. Consulte Desenvolvedor. Verifique !!]]';

          -- Testa se Arquivo é de Retorno
          elsif substr(rDados.fr4_texto,143,01) <> '2' then
             raise '[[ATENÇÃO. Arquivo Não é de retorno. Verifique!]]';
          end if;

       -- Header de Lote
       elsif substr(rDados.fr4_texto,08,01) = '1'    then
          --Vai Processar Detalhe Somente dos Registros da Filial Corrente
          if (substr(rDados.fr4_texto,18,1)  = '1'  and substr(rDados.fr4_texto,19,14) = rFilial.cpf) or
             (substr(rDados.fr4_texto,18,1)  = '2'  and substr(rDados.fr4_texto,19,14) = rFilial.cnpj) then
             iProcessar := 1;
          else
             iProcessar := 0;   
          end if;

       -- Pagamento de Contas e tributos
       elsif substr(rDados.fr4_texto,008,01) = '3' and
             iProcessar = 1 then

          if iLote is null then

             if    substr(rDados.fr4_texto,14,01) = 'N' then
                iLote := substr(rDados.fr4_texto,199,05)::integer;

             elsif substr(rDados.fr4_texto,14,01) = 'O' then
                iLote := substr(rDados.fr4_texto,178,05)::integer;

             elsif substr(rDados.fr4_texto,14,01) = 'A' then           --Ted - Ajustado Gelco 09/08/2019
                iLote := substr(rDados.fr4_texto,004,04)::integer;

             elsif substr(rDados.fr4_texto,14,01) = 'J' then          --Boletos
                iLote := substr(rDados.fr4_texto,186,05)::integer;
             else
                raise '[[Validar]]';
             end if;
          end if;

          -- Segmento <O>
          if substr(rDados.fr4_texto,14,01) = 'O' then
             iTitulo  := substr(rDados.fr4_texto,184,06)::integer;
             iParcela := substr(rDados.fr4_texto,191,04)::integer;
             sNNumero := substr(rDados.fr4_texto,216,15);
             dPgto    := (substr(rDados.fr4_texto,137,02) || '-' ||
                          substr(rDados.fr4_texto,139,02) || '-' ||
                          substr(rDados.fr4_texto,141,04))::date;
             dVecto   := (substr(rDados.fr4_texto,096,02) || '-' ||
                          substr(rDados.fr4_texto,098,02) || '-' ||
                          substr(rDados.fr4_texto,100,04))::date;
             nValor   := substr(rDados.fr4_texto,145,15)::numeric(15,2) / 100;
             nJuros   := 0;
             nDescto  := 0;

          --Segmento J
          elsif substr(rDados.fr4_texto,14,01) = 'J' then
             iTitulo  := substr(rDados.fr4_texto,192,06)::integer;
             iParcela := substr(rDados.fr4_texto,199,04)::integer;
             sNNumero := substr(rDados.fr4_texto,216,15);
             dPgto    := (substr(rDados.fr4_texto,145,02) || '-' ||
                          substr(rDados.fr4_texto,147,02) || '-' ||
                          substr(rDados.fr4_texto,149,04))::date;
             dVecto   := (substr(rDados.fr4_texto,092,02) || '-' ||
                          substr(rDados.fr4_texto,094,02) || '-' ||
                          substr(rDados.fr4_texto,096,04))::date;
             nValor   := substr(rDados.fr4_texto,153,15)::numeric(15,2) / 100;
             nJuros   := substr(rDados.fr4_texto,130,15)::numeric(15,2) / 100;
             nDescto  := substr(rDados.fr4_texto,115,15)::numeric(15,2) / 100;


          -- Segmento <a>  Ted
          elsif substr(rDados.fr4_texto,14,01) = 'A' then
             iTitulo  := substr(rDados.fr4_texto,075,06)::integer;
             iParcela := substr(rDados.fr4_texto,084,04)::integer;
             sNNumero := substr(rDados.fr4_texto,135,15);
             dPgto    := (substr(rDados.fr4_texto,094,02) || '-' ||
                          substr(rDados.fr4_texto,096,02) || '-' ||
                          substr(rDados.fr4_texto,098,04))::date;
             dVecto   := (substr(rDados.fr4_texto,094,02) || '-' ||
                          substr(rDados.fr4_texto,096,02) || '-' ||
                          substr(rDados.fr4_texto,098,04))::date;
             nValor   := substr(rDados.fr4_texto,163,15)::numeric(15,2) / 100;
             nJuros   := 0;
             nDescto  := 0;

          -- Segmento <N>
          elsif substr(rDados.fr4_texto,14,01) = 'N' then
             iTitulo  := substr(rDados.fr4_texto,205,06)::integer;
             iParcela := substr(rDados.fr4_texto,212,04)::integer;
             sNNumero := substr(rDados.fr4_texto,216,15);

             -- Darf
             if substr(rDados.fr4_texto,018,02) = '02' then
                nValor  := substr(rDados.fr4_texto,106,14)::numeric(15,2) / 100;
                dPgto   := (substr(rDados.fr4_texto,128,02) || '-' ||
                            substr(rDados.fr4_texto,130,02) || '-' ||
                            substr(rDados.fr4_texto,132,04))::date;
                dVecto  := (substr(rDados.fr4_texto,120,02) || '-' ||
                            substr(rDados.fr4_texto,122,02) || '-' ||
                            substr(rDados.fr4_texto,124,04))::date;
                nJuros  := 0;
                nDescto := 0;

             -- Gps
             elsif substr(rDados.fr4_texto,018,02) = '01' then
                nValor  :=  substr(rDados.fr4_texto,086,14)::numeric(15,2) / 100;
                dPgto   := (substr(rDados.fr4_texto,100,02) || '-' ||
                            substr(rDados.fr4_texto,102,02) || '-' ||
                            substr(rDados.fr4_texto,104,04))::date;
                dVecto  := null;
                nJuros  := 0;
                nDescto := 0;

             else
                nValor  := 0.01;
                dPgto   := current_date;
                dVecto  := null;
                nJuros  := 0;
                nDescto := 0;
             end if;
          end if;

          --Seleciona Nome do Fornecedor
          select sfj.sfj_apelido
            into sApelido
            from [(sfj)] sfj
            join [(sao)] sao on sao.ac_codforn = sfj.sfj_pessoa
           where sao.ao_codtit = iTitulo
             and sao.ao_parce  = iParcela;

          -- Soma registros processados
          iRegistros := iRegistros + 1;

          if substr(rDados.fr4_texto,233,02) = '  ' then
             sRejeicao := null;
          else
             sRejeicao := substr(rDados.fr4_texto,233,02);
          end if;

          sRetorno := substr(rDados.fr4_texto,231,02);

          --Status
          if sRetorno  in ('EM', 'CP', 'BE', 'BD', 'AE') or
             sRejeicao in ('EM', 'CP', 'BE', 'BD', 'AE') then
             iStatus := 2;                                                                          --status: 2-aceito 3-rejeitado 4-pago
          elsif sRetorno = '00' then
             iStatus := 4;
          else
             iStatus := 3;
          end if;

          -- Insere o registro na tabela FRR
          insert into [(frr)] (an_codtit,    an_parce,     sfj_apelido, ak_cc,         frr_nnumero,
                               frr_dpagto,   frr_valor,    frr_vpagto,  frr_juros,     frr_descto,
                               frr_tarifa,   frr_status,   session,     a9_codbanco,   frr_retorno,
                               frr_lote,     frr_atualiza, frr_dvecto )
                       values (iTitulo,      iParcela,     sApelido,    pConta,        sNNumero,
                               dPgto,        nValor,       nValor,      nJuros,        nDescto,
                               0,            iStatus,      cSessao,     341,           sRetorno,
                               iLote,        case when iStatus in (2,4) then 1 else 0 end,  dvecto);

       -- Trailer de Lote
       elsif substr(rDados.fr4_texto,008,01) = '5' then

--          if substr(rDados.fr4_texto,18,06)::integer <> iRegLote then
--             raise '[[ATENÇÃO. Foram lidos % registros no lote % e no registro de retorno constam % registros. '
--                             'Verifique !]]',
--                             iRegLote,
--                             substr(rDados.fr4_texto,04,04)::integer,
--                             iRegistros;
 --         end if;
 --         iRegistros  := iRegistros + 1;

       -- Trailer de Arquivo
       elsif substr(rDados.fr4_texto,04,05) = '99999' then

          -- Registra os Totalizadores do Arquivo
--          iTLotes     := substr(rDados.fr4_texto,18,06)::integer;
--          iTRegistros := substr(rDados.fr4_texto,24,06)::integer;
--          iRegistros  := iRegistros + 1;
       end if;
   End Loop;

   -- Testa se Registros Processados # de Registros no Arquivo
   if iTRegistros <> iRegistros then
--      raise '[[ATENÇÃO. O Arquivo possui % registros e foram processados % registros. Verifique !!]]',
--                      iTRegistros, iRegistros;
   end if;

   -- Testa se Nº de Lotes do arquivo = Lotes Processados
--   if TLotes <> iLotes then
--      raise '[[ATENÇÃO. O Arquivo possui % lotes e foram processados % lotes. Verifique !!]]',
--                      iTLotes, iLotes;
--   end if;

   if iLote is null then
      raise '[[Atenção. Não houve processamento. verifique!]]';
   end if;

   -- Atualiza o número do retorno nos parâmetros da procedure de leitura
   -- Na realidade engano o parametro colocando o numero do lote no integer, pois não peço este parametro.
   Update [(ss041)]
      set integer_ = iLote
    Where coduser  = Upper(sys_user####???())
      And ctrl     = 1
      And rotina   = 'CNAB_CPAGAR_LEITURA';

   out_res := 1;
End;
$$ language 'plpgsql';
