/**
   Rotina para conversão do banco de dados do BuddyWin Controller para o Fluent

	@author    Wagner Mobile Costa
	@date      13/07/2011 23:30:00
	@function

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso

   30/07/2011 12:00:00  v1    Wagner Mobile Costa
      [+] Conversão do cadastro de endereços e produtos

   05/08/2011 15:45:00  v2    Wagner Mobile Costa
      [*] Agrupamento por CNPJ e CPF para conversão de somente um CNPJ e validação do cadastro de endereços

   02/09/2011 15:45:00  v3    Wagner Mobile Costa
      [+] Geração da amarração produto x cliente [SA3] a partir da tabela [notasitensent]

   20/09/2011 09:00:00  v4    Wagner Mobile Costa
      [+] Geração da tabela sf4 (Naturezas de Operação), san (contas a receber), sao (contas a pagar) e sai (notas fiscais)

   22/09/2011 18:00:00  v5    Wagner Mobile Costa
      [+] Geração da tabela fan (Baixas a Receber), fcl (Baixas a Pagar) e a0g (Notas de Entrada de Terceiros)

   14/10/2011 07:30:00  v6    Wagner Mobile Costa
      [+] Criação de parametro para indicar as tabelas a serem convertidas e geração da tabela de notas de vendas

   16/10/2011 01:00:00  v7    Wagner Mobile Costa
      [+] Conversão das notas fiscais de compras
*/
create or replace function sys_glandata####???(
   in_tabelas varchar(255), in_empsa1 varchar(6), 
   in_empsac varchar(6), in_empsb1 varchar(6), 
   in_empresa varchar(6), in_a7_codvend integer)
  returns integer as
$$
Declare
   vCodEmp  varchar(4);
   vFilial  varchar(3);
   fak_cc   [(sar)].ak_cc%type;  -- Número da conta corrente
   xCursor  record;
   iLimit   integer;
   iOffSet  integer;
   isai_crt integer;
begin
   vCodEmp := ####;
   vFilial := lpad(coalesce(cast(??? as varchar), '0'), 3, '0');

/*
CREATE TABLE clientes
(
  empresa character varying(6) NOT NULL,
  cliente integer NOT NULL DEFAULT 0,
  razaosocial character varying(50),
  nomefantasia character varying(50),
  tipopessoa character varying(1),
  cnpjcpf character varying(14),
  inscricaorg character varying(20),

  tipologradouro character varying(15),
  logradouro character varying(40),
  numero character varying(10),
  complemento character varying(30),
  bairro character varying(50),
  codmunicipio character varying(7),
  estado character varying(2),
  cep character varying(8),
  ddd character varying(4),
  telefone character varying(10),
  ramal character varying(5),
  fax character varying(8),

  contato character varying(25),
  cargocontato character varying(20),
  nasccontato timestamp without time zone,

  homepage character varying(50),
  email character varying(50),
  zfmmunicipio character varying(5),
  dipamcodigo character varying(2),
  dipammunicipio character varying(4),
  clascontabil integer DEFAULT 0,
  compcontabil character varying(19),
  caixapostal integer DEFAULT 0,
  nomepai character varying(30),
  nomemae character varying(30),
  maladireta integer DEFAULT 0,
  bloqueado integer DEFAULT 0,
  produto character varying(15),
  observacao text,
  transportadora integer DEFAULT 0,
  transptipo character varying(1),
  tipotransportear character varying(1),
  datacadastro timestamp without time zone,
  datanascimento timestamp without time zone,
  ultcomprdata timestamp without time zone,
  ultcomprqtde double precision DEFAULT 0,
  ultcomprnota integer DEFAULT 0,
  ultcomprvalor double precision DEFAULT 0,
  vendaprazo integer DEFAULT 0,
  suframa character varying(9),
  vendedor integer DEFAULT 0,
  tipoempresa integer DEFAULT 0,
  limite double precision DEFAULT 0,
  historico integer DEFAULT 0,
  conta character varying(20),
  jucesp character varying(15),
  jucespdata timestamp without time zone,
  nomeempresa character varying(30),

  comtipologradouro character varying(15),
  comlogradouro character varying(40),
  comnumero character varying(6),
  combairro character varying(25),
  communicipio character varying(7),
  comcep character varying(8),
  comestado character varying(2),
  comtelefone character varying(8),
  comramal character varying(5),

  cobespecifico integer DEFAULT 0,
  cobtipologradouro character varying(15),
  coblogradouro character varying(40),
  cobnumero character varying(6),
  cobcomplemento character varying(25),
  cobbairro character varying(25),
  cobmunicipio character varying(7),
  cobcep character varying(8),
  cobestado character varying(2),

  entespecifico integer DEFAULT 0,
  enttipologradouro character varying(15),
  entlogradouro character varying(40),
  entnumero character varying(6),
  entcomplemento character varying(25),
  entbairro character varying(25),
  entmunicipio character varying(7),
  entcep character varying(8),
  entcnpj character varying(14),
  entinscricao character varying(20),
  entestado character varying(2),

  planoreceita character varying(4),
  tipotributacao character varying(1),
  importado integer DEFAULT 0,
  codigobancario character varying(8),

  optousimples integer DEFAULT 0,
  inscmunicipal character varying(12),

  ultimomovimentosistemaantigo timestamp without time zone,
  limitediaprazo integer DEFAULT 0,
  sedeexterior integer DEFAULT 0,
  piscofinscliente character varying(1),
  orgaopublico integer DEFAULT 0,
  issretido integer DEFAULT 0,
  clascontabilservicos integer DEFAULT 0,
  compcontabilservicos character varying(19),
  pisauto double precision DEFAULT 0,
  finauto double precision DEFAULT 0,
  clientealfa character varying(15),
  agencia character varying(5),
  digagencia character varying(1),
  numeroconta character varying(16),
  digconta character varying(1),
  obrigacertificado integer DEFAULT 0,
  codigoedi character varying(8),
  pais character varying(5),
  isentoipi integer DEFAULT 0,
  condpag integer DEFAULT 0,
  incuser character varying(10),
  incdata timestamp without time zone,
  altuser character varying(10),
  altdata timestamp without time zone,
  CONSTRAINT pk_clientes PRIMARY KEY (empresa, cliente)
)

CREATE TABLE fornecedores
(
  empresa character varying(6) NOT NULL,
  fornecedor integer NOT NULL DEFAULT 0,
  razaosocial character varying(50),
  tipopessoa character varying(1),
  cnpjcpf character varying(14),
  inscrestadual character varying(20),

  tipologradouro character varying(15),
  logradouro character varying(40),
  numero character varying(6),
  complemento character varying(30),
  bairro character varying(50),
  municipio character varying(7),
  estado character varying(2),
  cep character varying(8),
  ddd character varying(4),
  telefone character varying(10),
  telefone2 character varying(10),
  ramal character varying(5),
  fax character varying(8),

  contato character varying(30),
  cargocontato character varying(30),

  email character varying(50),
  dipamcodigo character varying(2),
  dipammunicipio character varying(4),
  clascontabil integer DEFAULT 0,
  compcontabil character varying(19),
  maladireta integer DEFAULT 0,
  produto character varying(15),
  tipoempresa integer DEFAULT 0,
  observacao text,
  datacadastro timestamp without time zone,
  ultcompradata timestamp without time zone,
  ultcompraqtde double precision DEFAULT 0,
  ultcompranota character varying(8),
  ultcompravalor double precision DEFAULT 0,
  contacontabil character varying(20),
  historicocontabil double precision DEFAULT 0,
  planodespesa character varying(4),
  banco integer DEFAULT 0,
  agencia character varying(5),
  digagencia character varying(1),
  contacorrente character varying(15),
  homologado integer DEFAULT 0,
  importado integer DEFAULT 0,
  pontuacao integer DEFAULT 0,
  administrativo integer DEFAULT 0,
  inscricaomunicipal character varying(12),
  nomefantasia character varying(20),
  ultimomovimentosistemaantigo timestamp without time zone,
  digcontacorrente character varying(2),
  produtosfornecidos character varying(50),
  certificacao character varying(50),
  condpag integer DEFAULT 0,
  entrega integer DEFAULT 0,
  clascontabilservicos integer DEFAULT 0,
  compcontabilservicos character varying(19),
  guia character varying(5),
  pais character varying(5),
  optousimples integer DEFAULT 0,

  retcnpjcpf character varying(14),
  rettipologradouro character varying(15),
  retlogradouro character varying(40),
  retnumero character varying(6),
  retcomplemento character varying(30),
  retbairro character varying(50),
  retmunicipio character varying(7),
  retestado character varying(2),

  produtorrural integer DEFAULT 0,
  situacaotributapis character varying(2),
  situacaotributacofins character varying(2),
  incuser character varying(10),
  incdata timestamp without time zone,
  altuser character varying(10),
  altdata timestamp without time zone,
  CONSTRAINT pk_fornecedores PRIMARY KEY (empresa, fornecedor)
)

*/

   -- @TODO
   -- Sequencia para conversao:
   -- 1. Criar a visão PESSOAS no banco GLANDATA

/*
DROP VIEW pessoas;
CREATE OR REPLACE VIEW pessoas AS 
select empresa, cliente as sfj_pessoa, cliente::varchar(6) || ' ' + coalesce('-' + cnpjcpf, ' ') as sfj_ref, razaosocial as sfj_nome,
       nomefantasia as sfj_apelido, datacadastro as sfj_cadastro,
       case when length(cnpjcpf) = 14 and sys_cnpj_check(cnpjcpf) = 0
             and (select count(*) from clientes cli where cli.cnpjcpf = clientes.cnpjcpf) = 1 
             then 2 else 
             case when coalesce(cnpjcpf, '00000000000') <> '00000000000' and sys_cpf_check(cnpjcpf) = 0
                   and (select count(*) from clientes cli where cli.cnpjcpf = clientes.cnpjcpf) = 1 
                  then 1 else 3 end end as sfj_tipo,
       cnpjcpf, ddd as sfj_ddd, telefone as sfj_fone, fax as sfj_fax,
       email as sfj_email, homepage as sfj_site, left(observacao, 120) as sfj_obs,
       1 as sfj_situacao, 
       case when length(cnpjcpf) = 11 and coalesce(cnpjcpf, '00000000000') <> '00000000000' 
             and sys_cpf_check(cnpjcpf) = 0
             and (select count(*) from clientes cli where cli.cnpjcpf = clientes.cnpjcpf) = 1
            then cnpjcpf else null end as sfi_cpf,
       case when length(cnpjcpf) = 11 and coalesce(cnpjcpf, '00000000000') <> '00000000000'
             and sys_cpf_check(cnpjcpf) = 0
             and (select count(*) from clientes cli where cli.cnpjcpf = clientes.cnpjcpf) = 1
            then inscricaorg else null end as sfi_rg,
       case when length(cnpjcpf) = 14 and sys_cnpj_check(cnpjcpf) = 0
             and (select count(*) from clientes cli where cli.cnpjcpf = clientes.cnpjcpf) = 1
            then cnpjcpf else null end as sfh_cnpj,
       case when length(cnpjcpf) = 14 and sys_cnpj_check(cnpjcpf) = 0 and sys_ie_check(inscricaorg, estado) = 0
             and (select count(*) from clientes cli where cli.cnpjcpf = clientes.cnpjcpf) = 1
            then inscricaorg else null end as sfh_ie,
       cliente as a1_codcli, 0 as ac_codforn
  from clientes
 union all
select empresa, fornecedor + 10000 as sfj_pessoa, fornecedor::varchar(6) || coalesce('-' + cnpjcpf, ' ') as sfj_ref, razaosocial as sfj_nome,
       nomefantasia as sfj_apelido, datacadastro as sfj_cadastro,
       case when length(cnpjcpf) = 14 and sys_cnpj_check(cnpjcpf) = 0
             and (select count(*) from fornecedores forn where forn.cnpjcpf = fornecedores.cnpjcpf) = 1
            then 2 else
            case when coalesce(cnpjcpf, '00000000000') <> '00000000000' and sys_cpf_check(cnpjcpf) = 0
             and (select count(*) from fornecedores forn where forn.cnpjcpf = fornecedores.cnpjcpf) = 1
            then 1 else 3 end end as sfj_tipo,
       cnpjcpf, ddd as sfj_ddd, telefone as sfj_fone, fax as sfj_fax,
       email as sfj_email, null as sfj_site, left(observacao, 120) as sfj_obs,
       1 as sfj_situacao,
       case when length(cnpjcpf) = 11 and coalesce(cnpjcpf, '00000000000') <> '00000000000'
             and sys_cpf_check(cnpjcpf) = 0
             and (select count(*) from fornecedores forn where forn.cnpjcpf = fornecedores.cnpjcpf) = 1
            then cnpjcpf else null end as sfi_cpf,
       case when length(cnpjcpf) = 11 and coalesce(cnpjcpf, '00000000000') <> '00000000000'
             and sys_cpf_check(cnpjcpf) = 0
             and (select count(*) from fornecedores forn where forn.cnpjcpf = fornecedores.cnpjcpf) = 1
            then inscrestadual else null end as sfi_rg,
       case when length(cnpjcpf) = 14 and sys_cnpj_check(cnpjcpf) = 0
             and (select count(*) from fornecedores forn where forn.cnpjcpf = fornecedores.cnpjcpf) = 1
            then cnpjcpf else null end as sfh_cnpj,
       case when length(cnpjcpf) = 14 and sys_cnpj_check(cnpjcpf) = 0 and sys_ie_check(inscrestadual, estado) = 0
             and (select count(*) from fornecedores forn where forn.cnpjcpf = fornecedores.cnpjcpf) = 1
            then inscrestadual else null end as sfh_ie,
       0 as a1_codcli, fornecedor + 10000 as ac_codforn
  from fornecedores;
*/

   -- 2. Aplicar a função sys_cnpj_check, sys_cpf_check, sys_ie_check, sys_left e sys_right no banco GLANDATA

   -- INICIO DOS PROCEDIMENTOS PARA CONVERSAO

   if position('SFJ' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      -- Cadastro de Pessoas
      insert into [(sfj)](sfj_pessoa, sfj_nome, sfj_apelido, sfj_ref, sfj_cadastro,
                          sfj_tipo, sfj_ddd, sfj_fone, sfj_fax, sfj_email, sfj_site,
                          sfj_obs, sfj_situacao)
      select sfj.sfj_pessoa, sfj.sfj_nome, sfj.sfj_apelido, sfj.sfj_ref, sfj.sfj_cadastro, 
             sfj.sfj_tipo, sfj.sfj_ddd, sfj.sfj_fone, sfj.sfj_fax, sfj.sfj_email, 
             sfj.sfj_site, sfj.sfj_obs, sfj.sfj_situacao
        from dblink('dbname=0021_protrevest_gd password=postgres.',
                    'select min(sfj_pessoa) as sfj_pessoa, min(sfj_nome) as sfj_nome, ' 
                           'min(sfj_apelido) as sfj_apelido, min(sfj_ref) as sfj_ref, '
                           'min(sfj_cadastro) as sfj_cadastro, min(sfj_tipo) as sfj_tipo, '
                           'min(sfj_ddd) as sfj_ddd, min(sfj_fone) as sfj_fone, '
                           'min(sfj_fax) as sfj_fax, min(sfj_email) as sfj_email, '
                           'min(sfj_site) as sfj_site, min(sfj_obs) as sfj_obs, '
                           'min(sfj_situacao) as sfj_situacao '
                      'from pessoas '
                     'where case when a1_codcli > 0 then empresa = ' || quote_literal(in_empsa1) ||
                                'else empresa = ' || quote_literal(in_empsac) || ' end ' ||
                     'group by sfh_cnpj, sfi_cpf, '
                              'case when sfh_cnpj is null and sfi_cpf is null then sfj_pessoa else 1 end')
          as sfj( sfj_pessoa integer, sfj_nome varchar(100), sfj_apelido varchar(50),
                  sfj_ref varchar(25), sfj_cadastro timestamp, sfj_tipo integer,
                  sfj_ddd varchar(4), sfj_fone varchar(25), sfj_fax varchar(25),
                  sfj_email varchar(100), sfj_site varchar(100), sfj_obs varchar(120),
                  sfj_situacao integer)
         left join [(sfj)] sfj_2 on sfj_2.sfj_pessoa = sfj.sfj_pessoa
        where sfj_2.sfj_pessoa is null;
   end if;

   -- Cadastro de Pessoas Fisicas
   if position('SFI' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      insert into [(sfi)] ( sfj_pessoa, sfi_cpf, sfi_rg )
      select sfj.sfj_pessoa, sfi.sfi_cpf, sfi.sfi_rg
        from dblink('dbname=0021_protrevest_gd password=postgres.',
                    'select min(sfj_pessoa) as sfj_pessoa, sfi_cpf, sfi_rg '
                      'from pessoas '
                     'where sfi_cpf <> ' || quote_literal('') || ' ' ||
                       'and case when a1_codcli > 0 then empresa = ' || quote_literal(in_empsa1) || ' ' ||
                                 'and empresa = ' || quote_literal(in_empsac) || ' end ' ||
                     'group by sfi_cpf, sfi_rg')
          as sfi( sfj_pessoa integer,
                  sfi_cpf varchar(11),
                  sfi_rg varchar(25))
        join [(sfj)] sfj on sfj.sfj_pessoa = sfi.sfj_pessoa
        left join [(sfi)] sfi_2 on sfi_2.sfj_pessoa = sfi.sfj_pessoa
       where sfi_2.sfj_pessoa is null;
   end if;                  

   -- Cadastro de Pessoas Juridicas
   if position('SFH' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(sfh)] ( sfj_pessoa, sfh_cnpj, sfh_ie )
      select sfj.sfj_pessoa, sfh.sfh_cnpj, sfh.sfh_ie
        from dblink('dbname=0021_protrevest_gd password=postgres.', 
                    'select min(sfj_pessoa) as sfj_pessoa, sfh_cnpj, sfh_ie '
                      'from pessoas '
                     'where sfh_cnpj <> ' || quote_literal('') || ' ' ||
                       'and case when a1_codcli > 0 then empresa = ' || quote_literal(in_empsa1) || ' ' ||
                                'else empresa = ' || quote_literal(in_empsac) || ' end ' ||
                     'group by sfh_cnpj, sfh_ie') 
          as sfh( sfj_pessoa integer,
                  sfh_cnpj varchar(14),
                  sfh_ie varchar(25))
        join [(sfj)] sfj on sfj.sfj_pessoa = sfh.sfj_pessoa
        left join [(sfh)] sfh_2 on sfh_2.sfj_pessoa = sfh.sfj_pessoa
       where sfh_2.sfj_pessoa is null;
   end if;                  

   -- Cadastro de Endereços
   -- @TODO: Tratar endereço de entrega/cobrança

/*
2. Criar visão com os endereços dos clientes/fornecedores

CREATE OR REPLACE VIEW se2 AS
         SELECT cli.empresa, cli.cliente AS sfj_pessoa, 
            cli.datacadastro AS se2_vigencia, cli.cep AS se2_cep, 
            COALESCE(cli.tipologradouro::text || ' '::text, ''::text) || cli.logradouro::text AS se2_ender, 
            cli.numero AS se2_num, cli.complemento AS se2_compl, 
            cli.bairro AS se2_bairro, cli.ddd AS se2_ddd, 
            cli.ramal AS se2_ramal, cli.telefone AS se2_fone, 
            cli.fax AS se2_fax, cli.codmunicipio AS sz9_municipio, 
            pes.sfh_ie AS se2_ie, pes.sfi_rg AS se2_rg, 
            cli.inscmunicipal AS se2_imunicipal, cli.suframa AS se2_suframa, 
            pes.a1_codcli, pes.ac_codforn
           FROM clientes cli
      JOIN pessoas pes ON pes.sfj_pessoa = cli.cliente
     WHERE COALESCE(cli.logradouro, ''::character varying)::text <> ''::text AND length(COALESCE(cli.cep, '12345678'::character varying)::text) = 8
UNION ALL 
         SELECT forn.empresa, forn.fornecedor + 10000 AS sfj_pessoa, 
            forn.datacadastro AS se2_vigencia, forn.cep AS se2_cep, 
            COALESCE(forn.tipologradouro::text || ' '::text, ''::text) || forn.logradouro::text AS se2_ender, 
            forn.numero AS se2_num, forn.complemento AS se2_compl, 
            forn.bairro AS se2_bairro, forn.ddd AS se2_ddd, 
            forn.ramal AS se2_ramal, forn.telefone AS se2_fone, 
            forn.fax AS se2_fax, forn.municipio AS sz9_municipio, 
            pes.sfh_ie AS se2_ie, pes.sfi_rg AS se2_rg, 
            forn.inscricaomunicipal AS se2_imunicipal, 
            NULL::character varying AS se2_suframa, pes.a1_codcli, 
            pes.ac_codforn
           FROM fornecedores forn
      JOIN pessoas pes ON pes.sfj_pessoa = (forn.fornecedor + 10000)
     WHERE COALESCE(forn.logradouro, ''::character varying)::text <> ''::text AND length(COALESCE(forn.cep, '12345678'::character varying)::text) = 8;

*/
   if position('SE2' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      insert into [(se2)] ( a1_codcli, se2_vigencia, se2_cep, se2_ender, 
                            se2_num, se2_compl, se2_bairro, se2_ddd, se2_ramal,
                            se2_fone, se2_fax, sz9_municipio, se2_ie, se2_rg,
                            se2_imunicipal, se2_suframa )
      select se2.a1_codcli, se2.se2_vigencia, se2.se2_cep, se2.se2_ender, se2.se2_num, 
             se2.se2_compl, se2.se2_bairro, se2.se2_ddd, se2.se2_ramal, se2.se2_fone, 
             se2.se2_fax, se2.sz9_municipio, se2.se2_ie, se2.se2_rg, se2.se2_imunicipal, 
             se2.se2_suframa
        from dblink('dbname=0021_protrevest_gd password=postgres.',  
     'select sfj_pessoa, se2_vigencia, se2_cep, se2_ender, se2_num, se2_compl, '
            'se2_bairro, se2_ddd, se2_ramal, se2_fone, se2_fax, sz9_municipio, '
            'se2_ie, se2_rg, se2_imunicipal, se2_suframa ' 
       'from se2 '
       'where case when a1_codcli > 0 then empresa = ' || quote_literal(in_empsa1) ||
                  'else empresa = ' || quote_literal(in_empsac) || ' end') 
          as se2( a1_codcli integer,
                  se2_vigencia date,
                  se2_cep varchar(8),
                  se2_ender varchar(60),
                  se2_num varchar(6),
                  se2_compl varchar(21),
                  se2_bairro varchar(50),
                  se2_ddd varchar(4),
                  se2_ramal varchar(4),
                  se2_fone varchar(25),
                  se2_fax varchar(25),
                  sz9_municipio varchar(7),
                  se2_ie varchar(25),
                  se2_rg varchar(25),
                  se2_imunicipal varchar(12),
                  se2_suframa varchar(9))
         join [(sfj)] sfj on sfj.sfj_pessoa = se2.a1_codcli
         left join [(se2)] se2_2 on se2_2.a1_codcli = se2.a1_codcli and se2_2.se2_vigencia = se2.se2_vigencia
        where se2_2.a1_codcli is null;  
   end if;                  

   -- Perfil de Clientes
   -- @TODO: A1_NFE e A1_NFE_CANC - Envio de E-MAIL
   if position('SA1' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(sa1)] ( a1_codcli, a1_dtcad, ae_codorg)
      select sa1.a1_codcli, sa1.a1_dtcad, 1
        from dblink('dbname=0021_protrevest_gd password=postgres.', 
     'select a1_codcli, sfj_cadastro as a1_dtcad from pessoas '
      'where empresa = ' || quote_literal(in_empsa1) || ' and a1_codcli > 0') 
          as sa1( a1_codcli integer,
                  a1_dtcad timestamp)
        join [(sfj)] sfj on sfj.sfj_pessoa = sa1.a1_codcli
        left join [(sa1)] sa1_2 on sa1_2.a1_codcli = sa1.a1_codcli
       where sa1_2.a1_codcli is null;   
   end if;                  

   -- Perfil de Clientes
   -- @TODO: AC_NFE e AC_NFE_CANC - Envio de E-MAIL
   if position('SAC' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(sac)] ( ac_codforn )
      select ac_codforn
        from dblink('dbname=0021_protrevest_gd password=postgres.',
     'select ac_codforn from pessoas '
      'where empresa = ' || quote_literal(in_empsac) || ' and ac_codforn > 0')
          as sac( ac_codforn integer )
        join [(sfj)] sfj on sfj.sfj_pessoa = sac.ac_codforn;  

      -- Insere fornecedores pelo CNPJ/CPF
      insert into [(sac)] ( ac_codforn )
      select sfj.sfj_pessoa as ac_codforn
        from dblink('dbname=0021_protrevest_gd password=postgres.',
     'select ac_codforn, cnpjcpf from pessoas '
      'where empresa = ' || quote_literal(in_empsac) || ' and ac_codforn > 0')
          as sac( ac_codforn integer,
                  cnpjcpf varchar(14) )
        join (select sfj_pessoa, sfh_cnpj as cnpjcpf from [(sfh)]
               union  
              select sfj_pessoa, sfi_cpf as cnpjcpf from [(sfi)]) sfj on sfj.cnpjcpf = sac.cnpjcpf
        left join [(sac)] sac_2 on sac_2.ac_codforn = sfj.sfj_pessoa
       where sac_2.ac_codforn is null
       group by sfj.sfj_pessoa;
   end if;                  

   -- Cadastro de Produtos
   if position('SB1' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(sb1)] ( b1_codpro, b1_nome, b1_ref, b1_dtcad, b8_codtipo,
                            seb_codigo, z2_coduni, sbm_clf, f1_codnat )
      select sb1.b1_codpro, sb1.b1_nome, sb1.b1_ref, sb1.b1_dtcad, sb1.b8_codtipo,
             sb1.seb_codigo, sb1.z2_coduni, sb1.sbm_clf,
             case when sb1.b8_codtipo = 1 then 11004 else 
             case when sb1.b8_codtipo = 2 then 13001 else 11001 end end
        from dblink('dbname=0021_protrevest_gd password=postgres.',
     'select b1_codpro, b1_nome, b1_ref, b1_dtcad, b8_codtipo, seb_codigo, z2_coduni, '
            'sbm_clf from sb1 '
      'where empresa = ' || quote_literal(in_empsb1))
          as sb1( b1_codpro varchar(25),
                  b1_nome varchar(40),
                  b1_ref varchar(25),
                  b1_dtcad date,
                  b8_codtipo integer,
                  seb_codigo integer,
                  z2_coduni varchar(2),
                  sbm_clf varchar(8))
        left join [(sb1)] sb1_1 on sb1_1.b1_codpro = sb1.b1_codpro
       where sb1_1.b1_codpro is null;
   end if;                  

   -- Cadastro de Produtos - Informações Complementares
   if position('SBF' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      update [(sbf)]
         set sbf_ccusto = 2
        from dblink('dbname=0021_protrevest_gd password=postgres.',
     'select b1_codpro, b1_fatura, sbf_3oc from sb1 '
      'where empresa = ' || quote_literal(in_empsb1)) 
          as sb1( b1_codpro varchar(25), 
                  b1_fatura integer, 
                  sbf_3oc integer )
       where [(sbf)].b1_codpro = sb1.b1_codpro;
   end if;                  

   -- Produtos x Clientes
   if position('SA3' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(sa3)] ( a1_codcli, b1_codpro )
      select sa3.a1_codcli, sa3.b1_codpro
        from dblink('dbname=0021_protrevest_gd password=postgres.',
     'select cliente as a1_codcli, produto as b1_codpro '
       'from notasitensent '
      'where empresa = ' || quote_literal(in_empsb1) || ' '
      'union '
     'select nf.clienteforn as a1_codcli, itm.produto as b1_codpro '
       'from notasitens itm '
       'join notas nf on nf.empresa = itm.empresa and nf.sequencial = itm.sequencial '
      'where itm.empresa = ' || quote_literal(in_empsb1) || ' and itm.tipo = ' || quote_literal('ET') || ' '
      'group by a1_codcli, b1_codpro')
          as sa3( a1_codcli integer,
                  b1_codpro varchar(25))
        left join [(sa3)] sa3_1 on sa3_1.a1_codcli = sa3.a1_codcli
         and sa3_1.b1_codpro = sa3.b1_codpro
       where sa3_1.a1_codcli is null;
   end if;                  

   -- Naturezas de operação
   -- @TODO: F4_DESCRI varchar(60)
   if position('SF4' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(sf4)] ( f4_tes, f4_tipo, f4_descri, f8_cfop_de, f4_geradupl, sbn_codtrib, sbx_st, a0e_cod, a0c_cod, a0f_cod, sf4_mod_icms, sf4_mod_icms_st )
      select f4_tes, f4_tipo, f4_descri, f8_cfop_de, f4_geradupl, sbn_codtrib, sbx_st, a0e_cod, a0c_cod, a0f_cod, sf4_mod_icms, sf4_mod_icms_st
        from dblink('dbname=0021_protrevest_gd password=postgres.',
     'select natureza as f4_tes, case when cfop < ' || quote_literal('5000') || ' then 1 else 2 end as f4_tipo, descricao as f4_descri, '
            'case when sys_left(cfop, 1) < ' || quote_literal('5') || ' then ' || quote_literal('1') || ' '
                 'else ' || quote_literal('5') || ' end || sys_right(cfop, 3) as f8_cfop_de, '
            'case when sys_left(cfop, 1) < ' || quote_literal('5') || ' then ' || quote_literal('2') || ' '
                 'else ' || quote_literal('6') || ' end || sys_right(cfop, 3) as f8_cfop_fe, '
            'case when geracontas = -1 then 1 else 0 end as f4_geradupl, '
            'sys_left(situacaotrib, 1) as sbn_codtrib, sys_right(situacaotrib, 2) as sbx_st, '
            'case when coalesce(situacaotribcofins, ' || quote_literal('') || ')  = ' || quote_literal('') || ' then ' || quote_literal('07') || ' '
                 'else situacaotribcofins end as a0e_cod, '
            'case when coalesce(situacaotribpis, ' || quote_literal('') || ')  = ' || quote_literal('') || ' then ' || quote_literal('07') || ' '
                 'else situacaotribpis end as a0f_cod, '
            'case when coalesce(situacaotribipi, ' || quote_literal('') || ')  = ' || quote_literal('') || ' and cfop < ' || quote_literal('5000') || ' '
                 'then ' || quote_literal('02') || ' else '
            'case when coalesce(situacaotribipi, ' || quote_literal('') || ')  = ' || quote_literal('') || ' and cfop > ' || quote_literal('5000') || ' '
                 'then ' || quote_literal('52') || ' else situacaotribipi end end '
            'as a0c_cod, cast(coalesce(modalidadeicms, ' || quote_literal('0') || ') as integer) as sf4_mod_icms, '
            'cast(coalesce(modalidadeicmsst, ' || quote_literal('0') || ') as integer) as sf4_mod_icms_st '
       'from naturezascontroller')
          as sf4( f4_tes integer,
                  f4_tipo integer,
                  f4_descri varchar(60),
                  f8_cfop_de varchar(4),
                  f8_cfop_fe varchar(4),                  
                  f4_geradupl integer,
                  sbn_codtrib varchar(1),
                  sbx_st varchar(2),
                  a0e_cod varchar(2),
                  a0f_cod varchar(2),
                  a0c_cod varchar(2),
                  sf4_mod_icms integer,
                  sf4_mod_icms_st integer);
   end if;                  

   -- Contas a Receber
   if position('SAN' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(san)] ( an_codtit, an_parce,     a1_codcli, an_valor,
                            an_tipo,   an_emissao,   an_vencto, an_venctoreal,
                            f1_codnat, c015_cod,     an_historico  )
                     select an_codtit, an_parce,     a1_codcli, an_valor,
                            an_tipo,   an_emissao,   an_vencto, an_vencto,
                            f1_codnat, '02',
                            coalesce(an_historico, 'Titulo ' || cast(an_codtit as varchar)) as an_historico
                       from dblink('dbname=0021_protrevest_gd password=postgres.',
                            'select ficharesp as an_codtit, 1 as an_parce, cliente as a1_codcli, valordocumento as an_valor, '
                                  'case when tipodocumento = ' || quote_literal('NF') || ' then ' || quote_literal('DPL') || ' else '
                                  'case when tipodocumento = ' || quote_literal('BLT') || ' then ' || quote_literal('BLT') || ' else ' ||
                                  quote_literal('AVL') || ' end end as an_tipo, '
                                  'dataemissao as an_emissao, datavencimento as an_vencto, 11004 as f1_codnat, '
                                  'tipodocumento || ' || quote_literal(': ') || ' || documento as an_historico '
                            'from receber '
                            'where empresa = ' || quote_literal(in_empresa) || ' and valordocumento > 0')
                        as san(an_codtit integer,
                               an_parce integer,
                               a1_codcli integer,
                               an_valor float,
                               an_tipo varchar(3),
                               an_emissao timestamp,
                               an_vencto timestamp,
                               f1_codnat integer,
                               an_historico varchar(80));
   end if;

   -- Baixas a Receber
   if position('FAN' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(fan)] ( ak_cc, an_codtit, an_parce, fan_item, fan_data, fan_valor,
                            fan_multa )
      select fan.ak_cc, fan.an_codtit, fan.an_parce, fan.fan_item, fan.fan_data,
             fan.fan_valor, 
             case when fan.fan_valor > san.an_valor 
                  then fan.fan_valor - san.an_valor else 0 end as fan_multa   
        from dblink('dbname=0021_protrevest_gd password=postgres.',
     'select cta.numeroconta as ak_cc, mov.ficharesp as an_codtit, 1 as an_parce, 1 as fan_item, '
            'mov.datatransacao as fan_data, mov.valortransacao as fan_valor '
       'from movimentacaobancaria mov '
       'join contas cta on cta.empresa = mov.empresa and cta.conta = mov.conta '
      'where mov.empresa = ' || quote_literal(in_empresa) || ' and mov.tipomovimento = ' || quote_literal('ES') || ' '
        'and mov.tipocobranca = ' || quote_literal('PRIN'))
          as fan(ak_cc varchar(25),
                 an_codtit integer,
                 an_parce integer,
                 fan_item integer,
                 fan_data timestamp,
                 fan_valor float)
        join [(san)] san on san.an_codtit = fan.an_codtit;              
   end if;                  

   -- Contas a Pagar
   if position('FAO' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      insert into [(sao)] ( ao_codtit, ao_parce, ac_codforn, ao_valor, ao_tipo, ao_emissao, ao_vencto, ao_venctoreal, f1_codnat, ao_historico )
      select sao.ao_codtit, sao.ao_parce, coalesce(sfj.sfj_pessoa, sao.ac_codforn) as ac_codforn, sao.ao_valor, sao.ao_tipo, sao.ao_emissao,   
             sao.ao_vencto, sao.ao_vencto, sao.f1_codnat, coalesce(sao.ao_historico, 'Titulo ' || cast(sao.ao_codtit as varchar)) as ao_historico
        from dblink('dbname=0021_protrevest_gd password=postgres.',
     'select pag.ficharesp as ao_codtit, 1 as ao_parce, pag.fornecedor + 10000 as ac_codforn, forn.cnpjcpf, pag.valordocumento as ao_valor, '
            'case when pag.tipodocumento = ' || quote_literal('NF') || ' then ' || quote_literal('DPL') || ' else '
            'case when pag.tipodocumento = ' || quote_literal('BLT') || ' then ' || quote_literal('BLT') || ' else ' || 
                                                quote_literal('AVL') || ' end end as ao_tipo, '
            'pag.dataemissao as an_emissao, pag.datavencimento as an_vencto, 13001 as f1_codnat, ' 
            'pag.tipodocumento || ' || quote_literal(': ') || ' || pag.documento as ao_historico '
       'from pagar pag '
       'left join fornecedores forn on forn.empresa = ' || quote_literal(in_empsac) || ' and forn.fornecedor = pag.fornecedor '  
      'where pag.empresa = ' || quote_literal(in_empresa) || ' and pag.valordocumento > 0')
          as sao(ao_codtit integer,
                 ao_parce integer,
                 ac_codforn integer,
                 cnpjcpf varchar(14),
                 ao_valor float,
                 ao_tipo varchar(3),
                 ao_emissao timestamp,
                 ao_vencto timestamp,
                 f1_codnat integer,
                 ao_historico varchar(80))
        left join (select sfj_pessoa, sfh_cnpj as cnpjcpf from [(sfh)]
                    union
                   select sfj_pessoa, sfi_cpf as cnpjcpf from [(sfi)]) sfj on sfj.cnpjcpf = sao.cnpjcpf;
   end if;                  
      
   iLimit := 1000;
   if position('FCL' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then  
      for xCursor in (select mov.ak_cc, mov.conta, mov.ficharesp_ini, mov.ficharesp_end,
                             mov.registros
                        from dblink('dbname=0021_protrevest_gd password=postgres.',
           'select min(cta.numeroconta) as ak_cc, mov.conta, min(mov.ficharesp) as ficharesp_ini, '
                  'max(mov.ficharesp) as ficharesp_end, count(*) as registros '
             'from movimentacaobancaria mov '
              'join contas cta on cta.empresa = mov.empresa and cta.conta = mov.conta '
            'where mov.empresa = ' || quote_literal(in_empresa) || ' and mov.tipomovimento = ' || quote_literal('SS') || ' '
              'and mov.tipocobranca = ' || quote_literal('PRIN') || ' '
            'group by mov.conta')
                as mov(ak_cc varchar(25),
                        conta integer,
                       ficharesp_ini integer,
                       ficharesp_end integer,
                       registros integer)) loop 
      
         fak_cc := xCursor.ak_cc;
         
         -- Processa os registros pelo periodo selecionado
         iOffSet := 0;
         While iOffSet < xCursor.registros Loop
            -- Baixas a Pagar
            insert into [(fcl)] ( ak_cc, ao_codtit, ao_parce, fcl_item, fcl_data, fcl_valor, 
                                  fcl_multa, fcl_docto )
            select fak_cc, fcl.ao_codtit, fcl.ao_parce, fcl.fcl_item, fcl.fcl_data,  
                   fcl.fcl_valor, 
                   case when fcl.fcl_valor > sao.ao_valor 
                        then fcl.fcl_valor - sao.ao_valor else 0 end as fcl_multa,
                   'BAIXA LOTE' as fcl_docto     
              from dblink('dbname=0021_protrevest_gd password=postgres.',
            'select mov.ficharesp as ao_codtit, 1 as ao_parce, 1 as fcl_item, '
                   'min(mov.datatransacao) as fcl_data, sum(mov.valortransacao) as fcl_valor '
              'from movimentacaobancaria mov '
             'where mov.empresa = ' || quote_literal(in_empresa) || ' '
               'and mov.conta = ' || cast(xCursor.conta as varchar) || ' '
               'and mov.ficharesp between ' || cast(xCursor.ficharesp_ini as varchar) || ' '
                                     'and ' || cast(xCursor.ficharesp_end as varchar) || ' '
               'and mov.tipomovimento = ' || quote_literal('SS') || ' '
               'and mov.tipocobranca = ' || quote_literal('PRIN') || ' '
             'group by mov.ficharesp '
             'limit ' || cast(iLimit as varchar) || ' offset ' || cast(iOffSet as varchar))
                 as fcl(ao_codtit integer,
                        ao_parce integer,
                        fcl_item integer,
                        fcl_data timestamp,
                        fcl_valor float)
               join [(sao)] sao on sao.ao_codtit = fcl.ao_codtit
              where sao.ao_saldo > 0;
         
            iOffSet := iOffSet + iLimit;
         end loop;
      
         -- Procedure: MC_00646 - Recompoe saldos diários da Conta Bancária selecionada.
         raise notice 'Recompoe saldos diários da Conta Bancária selecionada. %', fak_cc;
         Perform mc_00646####???('1980-01-01', fak_cc);
      end loop;
   
      -- Procedure: MC_00647 - Recompoe acumulado mensal por Natureza e Categoria Financeira.
      raise notice 'Recompoe acumulado mensal por Natureza e Categoria Financeira';
      Perform mc_00647####???();

      -- Procedure: MC_00648 - Recompoe acumulados mensais dos Rateios por Empresa e Centro de Custo
      raise notice 'Recompoe acumulados mensais dos Rateios por Empresa e Centro de Custo';
      Perform mc_00648####???();

      -- Procedure: MC_00670 - Recompoe movimentação bancária consolidada SAR/FAR -> FC8/FC9
      raise notice 'Recompoe movimentação bancária consolidada';
      Perform mc_00670####???('1980-01-01');
   end if;                  

   -- Cabeçalho da Nota de Saída
   if position('SAI' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      -- Recupera o regime de tributação
      select ss063_crt 
        into isai_crt
        from [(ss063)]
       where filial = ???; 
   
      -- Drop trigger mc_00009, mc_00129 e mc_00149 se existir
      perform sys_drop_trigger('sai' || vCodEmp || vFilial, 'mc_00009' || vCodEmp || vFilial);
      perform sys_drop_trigger('sai' || vCodEmp || vFilial, 'mc_00129' || vCodEmp || vFilial);
      perform sys_drop_trigger('sai' || vCodEmp || vFilial, 'mc_00149' || vCodEmp || vFilial);

      -- Cabeçalho da Nota de Saída
      Insert Into [(sai)] (sai_serial, at_serie, sai_tipo, sai_nf, sai_avulso, sai_status,
                           sai_estoque, a1_codcli, f4_tes, sai_faturar, se1_entrega,
                           sai_dtemissao, sai_frete, sai_seguro, sai_acessorias,
                           sai_crt, sai_ipi_antes, sai_total_pro, sai_total_fat,
                           sai_total_ger, sai_bsicm_pro, sai_vlicm_pro, sai_bsipi_pro,
                           sai_vlipi_pro, sai_codtable, icms_das, a7_codvend,
                           a7_bas_com, a7_comissao, sai_comissao )
      select sai.sai_serial, sai.at_serie, sai.sai_tipo, sai.sai_nf, sai.sai_avulso,  
             sai.sai_status, sai.sai_estoque, sai.a1_codcli, sai.f4_tes,  
             scr_00010_se2####???(sai.a1_codcli, 0, 1, 0) as sai_faturar, 1 as se1_entrega,
             sai.sai_dtemissao, sai.sai_frete, sai.sai_seguro, sai.sai_acessorias,
             isai_crt, sai.sai_ipi_antes, sai.sai_total_pro, sai.sai_total_fat,
             sai.sai_total_ger, sai.sai_bsicm_pro, sai.sai_vlicm_pro, 
             sai.sai_bsipi_pro, sai.sai_vlipi_pro, 'SAI' as sai_codtable, sai.icms_das,
             case when sai.sai_comissao > 0 then in_a7_codvend else null end as a7_codvend,
             sai.a7_bas_com, sai.a7_comissao, sai.sai_comissao
        from dblink('dbname=0021_protrevest_gd password=postgres.',
       'select nf.sequencial as sai_serial, cast(strzero(nf.serie as integer), 3) as at_serie, '
              'case when nf.buscacadastro = ' || quote_literal('F') || ' then 1 else 0 end as sai_tipo, '
              'cast(nf.nota as integer) as sai_nf, '
              'case when nf.tipo = ' || quote_literal('ST') || ' then 0 else 1 end as sai_avulso, '
              'case when motivonfe = ' || quote_literal('101') || ' then 2 else 1 end as sai_status, '
              '3 as sai_estoque, nf.clienteforn as a1_codcli, nf.natureza as f4_tes, '
              'nf.emissao as sai_dtemissao, nf.valorfrete as sai_frete, nf.valorseguro as sai_seguro, '
              'nf.valoracessorios as sai_acessorias, nf.ipiprimeiraparcela as sai_ipi_antes, '
              'nf.valorprodutos as sai_total_pro, parc.sai_total_fat, nf.valortotal as sai_total_ger, '
              'nf.baseicms as sai_bsicm_pro, nf.valoricms as sai_vlicm_pro, '
              'nf.baseipi as sai_bsipi_pro, nf.valoripi as sai_vlipi_pro, '
              'nf.aliquotaicmssn as icms_das, nf.valorprodutos as a7_bas_com, '
              'perccomissao as a7_comissao, valorcomissao as sai_comissao '
         'from notas nf '
         'left join (select parc.sequencial, sum(parc.valordocumento) as sai_total_fat '
                      'from notasparcelas parc '
                      'join notas nf on nf.empresa = parc.empresa and nf.sequencial = parc.sequencial '
                       'and nf.tipo in (' || quote_literal('SP') || ', ' || 
                                             quote_literal('ST') || ') '
                     'where parc.empresa = ' || quote_literal(in_empresa) || ' '
                     'group by parc.sequencial) parc on parc.sequencial = nf.sequencial '
        'where nf.empresa = ' || quote_literal(in_empresa) || ' '
          'and nf.tipo in (' || quote_literal('SP') || ', ' || quote_literal('ST') || ') '
          'and nf.nfe = -1 and nf.nota > ' || quote_literal('000001'))
          as sai(sai_serial integer,
                 at_serie varchar(3),
                 sai_tipo integer,
                 sai_nf integer,
                 sai_avulso integer,
                 sai_status integer,
                 sai_estoque integer,
                 a1_codcli integer,
                 f4_tes integer,
                 sai_dtemissao timestamp,
                 sai_frete float,
                 sai_seguro float,
                 sai_acessorias float,
                 sai_ipi_antes float,
                 sai_total_pro float,
                 sai_total_fat float,
                 sai_total_ger float, 
                 sai_bsicm_pro float, 
                 sai_vlicm_pro float, 
                 sai_bsipi_pro float, 
                 sai_vlipi_pro float, 
                 icms_das float,
                 a7_bas_com float,
                 a7_comissao float,
                 sai_comissao float)
        left join [(sai)] sai_2 on sai_2.sai_serial = sai.sai_serial
       where sai_2.sai_serial is null;
   end if;

   -- Itens da Nota de Saída
   if position('SAJ' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      -- Drop trigger mc_00124 e mc_00125 se existir
      perform sys_drop_trigger('saj' || vCodEmp || vFilial, 'mc_00124' || vCodEmp || vFilial);
      perform sys_drop_trigger('saj' || vCodEmp || vFilial, 'mc_00125' || vCodEmp || vFilial);

      -- Itens da da Nota de Saída
      Insert Into [(saj)] (sai_serial, b1_codpro, saj_quantos, f4_tes, z2_coduni, saj_unitario,
                           saj_total, saj_fatura, saj_bse_icm, saj_aliq_icm, saj_redu_icm,
                           saj_vlr_icm, saj_bse_ipi, saj_aliq_ipi, saj_vlr_ipi, 
                           saj_bs_pisfin, saj_aliq_pis, saj_vlr_pis, saj_aliq_fin,
                           saj_vlr_fin, sbn_codtrib, sbx_st, a0e_cod, a0f_cod, a0c_cod, 
                           codtable, saj_recno, saj_frete, saj_seguro, saj_acessorias)
      select saj.sai_serial, saj.b1_codpro, saj.saj_quantos, saj.f4_tes, saj.z2_coduni, 
             saj.saj_unitario, saj.saj_total, saj.saj_fatura, saj.saj_bse_icm, 
             saj.saj_aliq_icm, saj.saj_redu_icm, saj.saj_vlr_icm, saj.saj_bse_ipi,  
             saj.saj_aliq_ipi, saj.saj_vlr_ipi, saj.saj_bs_pisfin, saj.saj_aliq_pis, 
             saj.saj_vlr_pis, saj.saj_aliq_fin, saj.saj_vlr_fin, saj.sbn_codtrib,    
             saj.sbx_st, saj.a0e_cod, saj.a0f_cod, saj.a0c_cod, 'SAJ' as codtable, 
             0 as saj_recno, saj.saj_frete, saj.saj_seguro, saj.saj_acessorias                            
        from dblink('dbname=0021_protrevest_gd password=postgres.',
       'select item.sequencial as sai_serial, item.produto as b1_codpro, nf.natureza as f4_tes, '
              'item.quantidade as saj_quantos, item.unidade as z2_coduni, '
              'item.valorunitario as saj_unitario, item.valortotal as saj_total, '
              'case when nat.geracontas = -1 then item.valortotal else 0 end as saj_fatura, '
              'item.baseicms as saj_bse_icm, item.aliquotaicms as saj_aliq_icm, '
              'item.baseredicms as saj_redu_icm, item.valoricms as saj_vlr_icm, '
              'item.baseipi as saj_bse_ipi, item.aliquotaipi as saj_aliq_ipi, '
              'item.valoripi as saj_vlr_ipi, item.valorbasepis as saj_bs_pisfin, '
              'item.aliquotapis as saj_aliq_pis, item.valorpis as saj_vlr_pis, '
              'item.aliquotacofins as saj_aliq_fin, item.valorcofins as saj_vlr_fin, '
              'item.origemproduto as sbn_codtrib, item.tributacaoicms as sbx_st, '
              'item.situacaotribcofins as a0e_cod, item.situacaotribpis as a0f_cod, '
              'item.situacaotribipi as a0c_cod, item.valorfrete as saj_frete, '
              'item.valorseguro as saj_seguro, item.valoracessorios as saj_acessorias '
         'from notas nf '
         'join naturezascontroller nat on nat.natureza = nf.natureza '
         'join notasitens item on item.empresa = nf.empresa and item.sequencial = nf.sequencial '
        'where nf.empresa = ' || quote_literal(in_empresa) || ' '
          'and nf.tipo in (' || quote_literal('SP') || ', ' || quote_literal('ST') || ') '
          'and nf.nfe = -1')
          as saj(sai_serial integer,
                 b1_codpro varchar(25),
                 f4_tes integer,
                 saj_quantos float,
                 z2_coduni varchar(2),
                 saj_unitario float,
                 saj_total float,
                 saj_fatura float,
                 saj_bse_icm float,
                 saj_aliq_icm float,
                 saj_redu_icm float,
                 saj_vlr_icm float, 
                 saj_bse_ipi float, 
                 saj_aliq_ipi float, 
                 saj_vlr_ipi float, 
                 saj_bs_pisfin float, 
                 saj_aliq_pis float,
                 saj_vlr_pis float, 
                 saj_aliq_fin float, 
                 saj_vlr_fin float, 
                 sbn_codtrib varchar(1), 
                 sbx_st varchar(2), 
                 a0e_cod varchar(2), 
                 a0f_cod varchar(2), 
                 a0c_cod varchar(2), 
                 saj_frete float, 
                 saj_seguro float,
                 saj_acessorias float);
   end if;
     
   -- Parcelas da Nota de Saída
   if position('FNR' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      -- Drop trigger mc_00191 se existir
      perform sys_drop_trigger('fnr' || vCodEmp || vFilial, 'mc_00191' || vCodEmp || vFilial);

      -- Parcelas da Nota de Saída
      Insert Into [(fnr)] (sai_serial, fnr_parce, fnr_valor, fnr_vencto, fnr_valor_o, fnr_vencto_o)
      select fnr.sai_serial, fnr.fnr_parce, fnr.fnr_valor, fnr.fnr_vencto,
             fnr.fnr_valor_o, fnr.fnr_vencto_o
        from dblink('dbname=0021_protrevest_gd password=postgres.',
       'select parc.sequencial as sai_serial, cast(parc.docparcela as integer) as fnr_parce, '
              'parc.valordocumento as fnr_valor, parc.datavencimento as fnr_vencto, '
              'parc.valordocumento as fnr_valor_o, parc.datavencimento as fnr_vencto_o '
         'from notasparcelas parc ' 
         'join notas nf on nf.empresa = parc.empresa and nf.sequencial = parc.sequencial '
          'and nf.tipo in (' || quote_literal('SP') || ', ' || quote_literal('ST') || ') and nf.nfe = -1 '
        'where parc.empresa = ' || quote_literal(in_empresa))
          as fnr(sai_serial integer,
                 fnr_parce integer,
                 fnr_valor float,
                 fnr_vencto timestamp,
                 fnr_valor_o float,
                 fnr_vencto_o timestamp)
        join [(sai)] sai on sai.sai_serial = fnr.sai_serial
        left join [(fnr)] fnr_2 on fnr_2.sai_serial = fnr.sai_serial and fnr_2.fnr_parce = fnr.fnr_parce
       where fnr_2.sai_serial is null;
   end if;

   -- Geração da Danfe
   if position('NFA' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      for xCursor in (select sai.recno, sai.sai_serial, sai.at_serie, sai.sai_nf,
                             case when sai.sai_status = 2 then 101 else 204 end as cstat
                        from [(sai)] sai
                    left join [(nfa)] nfa on nfa.table_origem = 'NFA' and nfa.recno_origem = sai.recno
                        where sai.sai_nf > 0 and nfa.nfa_serial is null
                        order by sai.at_serie, sai.sai_nf) loop

         -- Ajusta o número da nota da série
         update [(sat)] set at_curr = xCursor.sai_nf - 1 where at_serie = xCursor.at_serie;

         perform mc_00270####???('SAI', xCursor.recno, xCursor.sai_serial, xCursor.cStat);
      end loop;

      -- Preenche o número da última nota
      update [(sat)] set at_curr = (select max(ide_nnf) from [(nfa)] where ide_serie = [(sat)].at_serie);
   end if;

   -- Cabeçalho da Nota de Compras
   if position('SAL' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      -- Drop trigger mc_00085 se existir
      perform sys_drop_trigger('sal' || vCodEmp || vFilial, 'mc_00085' || vCodEmp || vFilial);
      
      -- Cabeçalho da Nota de Saída
      Insert Into [(sal)] (al_serial, al_serie, al_coddoc, ac_codforn, f4_tes,
                           al_dtemissao, al_dtentrada, fa_codcond, al_frete,
                           al_seguro, al_acessorias, al_baseicms, al_toticms,
                           al_baseipi, al_totipi, al_totnf, al_ipi_antes, al_financas )
      select sal.al_serial, sal.al_serie, sal.al_coddoc, sal.ac_codforn, sf4.f4_tes,
             sal.al_dtemissao, sal.al_dtentrada, 2 as fa_codcond, sal.al_frete, sal.al_seguro,
             sal.al_acessorias, sal.al_baseicms, sal.al_toticms, sal.al_baseipi, sal.al_totipi,
             sal.al_totnf, sal.al_ipi_antes, 2 as al_financas
        from dblink('dbname=0021_protrevest_gd password=postgres.',
       'select nf.sequencial as al_serial, coalesce(nf.serie, ' || cast(quote_literal('1') as varchar(3)) || ') as al_serie, '
              'cast(nf.nota as integer) as al_coddoc, nf.clienteforn + 10000 as ac_codforn, '
              'nf.natureza as f4_tes, nf.emissao as al_dtemissao, nf.dataentrada as al_dtentrada, '
              'nf.valorfrete as al_frete, nf.valorseguro as al_seguro, '
              'nf.valoracessorios as al_acessorias, nf.baseicms as al_baseicms, '
              'nf.valoricms as al_toticms, nf.baseipi as al_baseipi, '
              'nf.valoripi as al_totipi, nf.valortotal as al_totnf, '
              'nf.ipiprimeiraparcela as al_ipi_antes, nf.cfop '
         'from notas nf '
        'where nf.empresa = ' || quote_literal(in_empresa) || ' and nf.tipo = ' || quote_literal('EC'))
          as sal(al_serial integer,
                 al_serie varchar(3),
                 al_coddoc integer,
                 ac_codforn integer,
                 f4_tes integer,
                 al_dtemissao timestamp,
                 al_dtentrada timestamp,
                 al_frete float,
                 al_seguro float,
                 al_acessorias float,
                 al_baseicms float,
                 al_toticms float,
                 al_baseipi float,
                 al_totipi float,
                 al_totnf float,
                 al_ipi_antes float,
                 cfop varchar(4))
        join (select min(f4_tes) as f4_tes, f8_cfop_de, f8_cfop_fe
                from [(sf4)]
               group by f8_cfop_de, f8_cfop_fe) sf4 on case when sys_left(sal.cfop, 1) = '2' then sf4.f8_cfop_fe else sf4.f8_cfop_de end = sal.cfop
        left join [(sal)] sal_2 on sal_2.al_serial = sal.al_serial
       where sal_2.al_serial is null;

      -- Inclui registro com dados do cabeçalho para uso nos rateios
      Insert Into [(faj)] ( faj_origem, faj_recno,     faj_data,
                            faj_opera,  faj_historico, faj_conta )
                    select 'SAL',       sal.recno,     sal.al_dtemissao,
                            0,          sal.al_obs,    'NF-Entrada ' || sal.al_coddoc || '/' || sal.al_serie 
                     from [(sal)] sal
                     left join [(faj)] faj on faj.faj_origem = 'SAL' and faj.faj_recno = sal.recno
                    where faj.recno is null;        
   end if;

   -- Itens da Nota de Compras
   if position('SAM' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      -- Drop trigger mc_00058 se existir
      perform sys_drop_trigger('sam' || vCodEmp || vFilial, 'mc_00058' || vCodEmp || vFilial);
      
      -- Itens da da Nota de Saída
      Insert Into [(sam)] (al_serial, b1_codpro, f4_tes, am_qtd, z2_coduni, am_vlunit,
                           am_icms, am_ipi, am_total, am_vl_ipi, am_bs_icms, am_vl_icms,
                           sam_frete, sam_seguro, sam_acessorias, f1_codnat)
      select sam.al_serial, sam.b1_codpro, sal.f4_tes, sam.am_qtd, sam.z2_coduni,
             sam.am_vlunit, sam.am_icms, sam.am_ipi, sam.am_total, sam.am_vl_ipi,
             sam.am_bs_icms, sam.am_vl_icms, sam.sam_frete, sam.sam_seguro,
             sam.sam_acessorias, case when sf4.f4_geradupl = 1 then 
             coalesce(sbf.f1_codnat, sb1.f1_codnat) else null end as f1_codnat
        from dblink('dbname=0021_protrevest_gd password=postgres.',
       'select item.sequencial as al_serial, item.produto as b1_codpro, '
              'item.quantidade as am_qtd, item.unidade as z2_coduni, '
              'item.valorunitario as am_vlunit, item.aliquotaicms as am_icms, '
              'cast(item.aliquotaipi as integer) as am_ipi, item.valortotal as am_total, '
              'item.valoripi as am_vl_ipi, item.baseicms as am_bs_icms, '
              'item.valoricms as saj_vl_icms, item.valorfrete as sam_frete, '
              'item.valorseguro as sam_seguro, item.valoracessorios as sam_acessorias '
         'from notas nf '
         'left join naturezascontroller nat on nat.natureza = nf.natureza '
         'join notasitens item on item.empresa = nf.empresa and item.sequencial = nf.sequencial '
        'where nf.empresa = ' || quote_literal(in_empresa) || ' '
          'and nf.tipo = ' || quote_literal('EC'))
          as sam(al_serial integer,
                 b1_codpro varchar(25), 
                 am_qtd float, 
                 z2_coduni varchar(2), 
                 am_vlunit float,
                 am_icms integer, 
                 am_ipi integer, 
                 am_total float, 
                 am_vl_ipi float, 
                 am_bs_icms float, 
                 am_vl_icms float, 
                 sam_frete float, 
                 sam_seguro float, 
                 sam_acessorias float)
        join [(sal)] sal on sal.al_serial = sam.al_serial
        join [(sb1)] sb1 on sb1.b1_codpro = sam.b1_codpro
        join [(sf4)] sf4 on sf4.f4_tes = sal.f4_tes
        left join [(sbf)] sbf on sbf.b1_codpro = sb1.b1_codpro;
   end if;

   -- Parcelas da Nota de Compra
   if position('FNP' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      -- Drop trigger mc_00652 se existir
      perform sys_drop_trigger('fnp' || vCodEmp || vFilial, 'mc_00652' || vCodEmp || vFilial);

      -- Parcelas da Nota de Saída
      Insert Into [(fnp)] (al_serial, fnp_parce, fnp_valor, fnp_vencto, fnp_valor_o, fnp_vencto_o)
      select fnp.al_serial, fnp.fnp_parce, fnp.fnp_valor, fnp.fnp_vencto,
             fnp.fnp_valor_o, fnp.fnp_vencto_o
        from dblink('dbname=0021_protrevest_gd password=postgres.',
       'select parc.sequencial as al_serial, cast(parc.docparcela as integer) as fnp_parce, '
              'parc.valordocumento as fnp_valor, '
              'case when parc.datavencimento < nf.emissao then nf.emissao '
                   'else parc.datavencimento end as fnp_vencto, '
              'parc.valordocumento as fnp_valor_o, '
              'case when parc.datavencimento < nf.emissao then nf.emissao '
                   'else parc.datavencimento end as fnp_vencto_o '
         'from notasparcelas parc '
         'join notas nf on nf.empresa = parc.empresa and nf.sequencial = parc.sequencial '
          'and nf.tipo = ' || quote_literal('EC') || ' '
        'where parc.empresa = ' || quote_literal(in_empresa))
          as fnp(al_serial integer,
                 fnp_parce integer,
                 fnp_valor float,
                 fnp_vencto timestamp,
                 fnp_valor_o float,
                 fnp_vencto_o timestamp)
        join [(sal)] sal on sal.al_serial = fnp.al_serial
        left join [(fnp)] fnp_2 on fnp_2.al_serial = fnp.al_serial and fnp_2.fnp_parce = fnp.fnp_parce
       where fnp_2.al_serial is null;
   end if;

   -- Aprovação da Nota de Compras
   if position('SAL' in in_tabelas) > 0 or position('*' in in_tabelas) > 0 then
      update [(sal)] set al_status = 2; 
   end if;
   
   return 1;
end;
$$
language 'plpgsql';
