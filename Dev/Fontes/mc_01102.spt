/**
   CFA - Trigger da tabela CFA - After

   @author    Fabio Carvalho
   @date      30/01/2018
   @trigger   CFA A U

   Histórico
   ---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso
*/
Create or Replace Function mc_01102####???()
Returns trigger As
$$
Declare
   vdescri     text;
   iupdate     integer;
   iRetorno    integer;
   ifil        [(ss063)].filial%type;
   cMotivo     [(nff)].nff_msg_rejeicao%type;
   dTransmi    [(nff)].nff_datahora%type;
   rStatus     record;
   vBranch     Varchar(004);
   vDirDanfe   Varchar(255);
   cSessao     [(ss027)].session%type;
   sCupom      varchar;
   vDirFile    Varchar(255);
   in_data     timestamp;
   Mxml        text;
   vPrinter    varchar(120);
begin
   cSessao := sys_session();

   if tg_op <> 'DELETE' then
   
      if (select count(*)
            from [(cfb)]
           where cfa_recno = new.recno) > 500 then
         raise '[[ATENÇÃO. O Cupom Fiscal Tem limite de 500 itens. Verifique!]]';
      end if;


      if tg_op = 'UPDATE' then

         -- Transmissão
         if new.cfa_estado = 1 and new.cfa_acao is not null then
            vdescri := format('CF-e %s com identificação interna nº %s', new.recno, new.recno_origem);

            if exists(select 1
                        from [(ss084)]
                       where codtable = 'CFA'
                         and ss084_recno = new.recno
                         and estado in (0,3)) then

               update [(ss084)] 
                  set estado = 0
                where codtable    = 'CFA'
                  and ss084_recno = new.recno
                  and estado in (0,3);
--                  and session is null;

               if not found then
                  perform sys_msg####???(3, Format('%s está aguardando processamento. Aguarde retorno da SEFAZ', vdescri));
               end if;
            else
               insert into [(ss084)] (servico, codtable, ss084_recno, estado, estagio, acao)
                              values (12,      'CFA',   new.recno,   0,      0,       new.cfa_acao);
            end if;
         end if;

         --Recuperar Codigo de Retorno para verificar se houve sucesso na operação
         select cff_cstat
           into iRetorno
           from [(cff)]
          where cfa_recno = new.recno
          order by recno desc
          limit 1;

         select coalesce(cf0_status,3) as cf0_status, cf0_descr
           into rStatus         --2-sucesso 3-Erro
           from [(cf0)]
          where cf0_cod = iRetorno;

         -- Falha na Comunicação com o Esat          cfa_estado: 0-dig 1-aguard 2-Falha 3-Sucesso
         if new.cfa_estado = 2 then
            if new.codtable = 'TGB' then     --Caso futuramente tenha outra origem
               -- apagar dados do Esat na Origem
               update [(tgb)] set tgb_xml = null,       tgb_dhrecbto   = null, tgb_tpamb   = null, tgb_nprot     = null,
                                  tgb_status_cupom = 0, tgb_tipo_cupom = null, tgb_cupom   = null, tgb_chnfe     = null,
                                  tgb_digval = null,    tgb_estado     = 0,    tgb_xmotivo = null, tgb_historico = null
                   where recno = new.recno_origem;
            end if;
            vdescri := 'Falha na Comunicação com ESat';

         elsif rStatus.cf0_status = 3 then                --2-Sucesso 3-Falha
            -- apagar dados do Esat na Origem
            if new.codtable = 'TGB' then     --Caso futuramente tenha outra origem
               -- apagar dados do Esat na Origem
               update [(tgb)] set tgb_xml = null,       tgb_dhrecbto   = null, tgb_tpamb   = null, tgb_nprot = null,
                                  tgb_status_cupom = 0, tgb_tipo_cupom = null, tgb_cupom   = null, tgb_chnfe = null,
                                  tgb_digval = null,    tgb_estado     = 0,    tgb_xmotivo = null, tgb_historico = null
                   where recno = new.recno_origem;
            end if;
            vdescri := 'Falha na Transmissão do ESat';

         elsif rStatus.cf0_status = 2 and new.cfa_estado = 3 then     -- Sucesso
            -- Atualizar a Origem
            if new.codtable  = 'TGB' then  -- Sucesso
               update [(tgb)] set tgb_xml          = new.xml,                  --xml
                                  tgb_dhrecbto     = new.ide_demi,
                                  tgb_tpamb        = new.ide_tpamb,            --Ambiente 1-
                                  tgb_status_cupom = 2,                        --status 2-gerado
                                  tgb_status       = 1,                        --status 1-entregue
                                  tgb_tipo_cupom   = 2,                        --tipo ccupom 2-esat
                                  tgb_cupom        = new.ide_ncfe,             --numero cupom
                                  tgb_chnfe        = substring(new.id,4,44),   --Chave
                                  tgb_estado       = 3                         --estado 1-aguardando transmissao
                where recno = new.recno_origem;
            end if;
            vdescri := 'Sucesso na Transmissão';

            --grava o pdf do cupom
            in_data  := current_date::timestamp;
            vDirFile := '_' || #### || '\_' || sys_strzero(sys_filial####???(), 3) || '\ESat\' ||
                        sys_year(in_data)::varchar(4) || '\' ||
                        sys_strzero(sys_month(in_data), 2) || '-' ||
                        lower(sys_monthname(sys_month(in_data))) || '\';
            sCupom   := 'Esat-' || new.ide_ncfe || '-D' || to_char(in_data,'YYYYMMDD');  -- || '-H' ||
--                                                         to_char(current_timestamp, 'HH24MISS');
            --Seleciona Impressora de Cupom Fiscal ESAT
            select ss143_impressora
              into vPrinter
              from [(sat)]
             where a2f_codigo = '59';

            insert into [(ss136)] (report,   print_to_file, filename,
                                   estado,   descri,        print_to_device,
                                   codtable, ss136_recno,   device_name)
                           values (932,      1,             vDirFile || sCupom || '.pdf',
                                   1,        sCupom,        sys_param_int####???('MON_PRN_SAT',1),
                                   'CFA',    new.recno,     vPrinter);

            select cff_xml into Mxml from [(cff)] where cfa_recno = new.recno;

            -- Geração do XML
            insert into [(ss135)] (estado, descri, nome,                         conteudo, codtable, ss135_recno, acao)
                  values          (1,      sCupom, vDirFile || sCupom || '.xml', Mxml,     'CFA',    new.recno,   10);

            --Enviar email do cupom fiscal
            if new.dest_email is not null then
               perform mc_01302####???(new.recno);
               -- criar log de ocorrencias
               Perform sys_log####???('CFA', new.recno, 'Enviado e-mail para ' || new.dest_email);
            end if;
         else
            vDescri := '';
         end if;
         -- criar log de ocorrencias
         Perform sys_log####???('TGB', new.recno_origem, vDescri);
      end if;
--       if new.nfa_estado = 1 and new.nfa_acao is not null then
--          vdescri := format('NF-e %s com identificação interna nº %s', new.recno, new.recno_origem);

--          if exists(
--             select 1
--               from [(ss084)]
--              where codtable = 'NFA'
--                and ss084_recno = new.recno
--                and estado in (0,3))
--          then
--             update [(ss084)] set estado = 0
--              where codtable    = 'NFA'
--                and ss084_recno = new.recno
--                and estado in (0,3)
--                and session is null;

--             if not found then
--                perform sys_msg####???(3, Format('%s está aguardando processamento. Aguarde retorno da SEFAZ', vdescri));
--             end if;
--          else
--             INSERT INTO [(ss084)] (codtable, ss084_recno, acao)
--                            values ('NFA',   new.recno,   new.nfa_acao);
--          end if;
--       end if;

--       if new.ide_mod <> '65' then --65=cupom fiscal
--          -- Processamento do envio de e-mail da Nota - Aprovada
--          if new.cstat = 100 and (new.nfa_xmnfe = 1 and new.nfa_prnfe = 1) and (old.nfa_xmnfe <> 1 or old.nfa_prnfe <> 1) then
--             perform mc_00267####???(new.nfa_serial);
--          -- Processamento do envio de e-mail da Nota - Cancelamento
--          elsif new.cstat = 101 and (new.nfa_xmnfe_c = 1 and new.nfa_prnfe_c = 1) and (old.nfa_xmnfe_c <> 1 or old.nfa_prnfe_c <> 1) then
--             perform mc_00267####???(new.nfa_serial);
--          -- CCe - Envio do E-mail
--          ElsIf new.nfa_cce_cod = 135 and (new.nfa_xmcce = 1 and new.nfa_prcce = 1) and (old.nfa_xmcce <> 1 or old.nfa_prcce <> 1) then
--             perform mc_00393####???(new.nfa_serial);
--          end if;
--       end if;
--    end if;

--    If new.cstat = 15 Then
--       Update [(nfa)] Set cstat = 100, nfa_estado = 3, xmotivo = 'Autorizado o uso da NF-e'
--        Where nfa_serial = new.nfa_serial;
--         if new.table_origem = 'SAI' then
--            Update [(sai)] Set sai_status = 1, sai_financas = 1, sai_estoque = 3, nf0_cod = 100, sai_xmotivo = 'Autorizado o uso da NF-e'
--             Where recno = new.recno_origem;

--	  delete from [(ss029)] where codtable = 'SAI' and recfile = new.recno_origem;

--         elsif new.table_origem = 'TGB' then
--            Update [(tgb)] set nf0_cod = 100, tgb_status = 1, tgb_estado = 3, tgb_status_cupom = 2,
--                               tgb_xmotivo = 'Autorizado o uso da NF-e'
--             Where recno = new.recno_origem;
--   end if;
--    End If;
--
-- -- Se nota processada com falha e origem for mensageria - Transmissão ou Cancelamento
-- if new.NFA_ESTADO = 2 and new.table_origem = 'FSL' then
--      cMotivo  := new.xmotivo;
--      dTransmi := new.dhrecbto;
--      if new.xmotivo is null then
--         select nff_msg_rejeicao, nff_datahora
--           into cMotivo,          dTransmi
--           from [(nff)]
--          where nfa_serial = new.nfa_serial
--          limit 1;
--      end if;
--  update [(fsl)]
--	  set fsl_status = 3,
--	      nfa_serial = new.nfa_serial,
--			   fsl_coderro = new.cstat,
--	      fsl_ocorre = cMotivo,
--		   fsl_dhtransmi = dTransmi
--   where recno = (case when new.table_cance = 'FSL' then new.recno_cance else new.recno_origem end);
-- end if;
--
-- -- Se sucesso
-- if new.NFA_ESTADO = 3 and new.table_origem = 'FSL' and new.cstat not in (101,135) then
--  update [(fsl)]
--     set fsl_status = 4,
--	      fsl_nota = new.ide_nnf,
--	      fsl_serie = new.ide_serie,
--	      nfa_serial = new.nfa_serial,
--	      fsl_chave = new.chnfe,
--             fsl_proto = new.nprot,
--	      fsl_coderro = new.cstat,
--	      fsl_ocorre = new.xmotivo,
--	      fsl_dhtransmi = new.dhrecbto
--   where recno = new.recno_origem;
-- end if;

-- if new.cstat in (101,135) and new.table_cance = 'FSL' then -- cancelamento
--  update [(fsl)]
--     set fsl_status = 4,
--	      fsl_nota = new.ide_nnf,
--	      fsl_serie = new.ide_serie,
--	      nfa_serial = new.nfa_serial,
--	      fsl_chave = new.chnfe,
--             fsl_proto = new.nprot,
--	      fsl_coderro = new.cstat,
--	      fsl_ocorre = new.xmotivo,
--	      fsl_dhtransmi = new.dhrecbto
--   where recno = new.recno_cance;
-- end if;

--    iUpdate := 1;
--    if tg_op = 'UPDATE' then
--       iUpdate := 0;
--       if coalesce(old.nfa_estado, 0)        <> coalesce(new.nfa_estado, 0)        or
--          coalesce(old.cstat, 0)             <> coalesce(new.cstat, 0)             or
--          coalesce(old.xmotivo, '')          <> coalesce(new.xmotivo, '')          or
--          coalesce(old.ide_nnf, 0)           <> coalesce(new.ide_nnf, 0)           or
--          coalesce(old.xml, '')              <> coalesce(new.xml, '')              or
--          coalesce(old.chnfe, '')            <> coalesce(new.chnfe, '')            or
--          coalesce(old.nprot, 0)             <> coalesce(new.nprot, 0)             or
--          coalesce(old.digval, '')           <> coalesce(new.digval, '')           or
--          coalesce(old.xmotivo, '')          <> coalesce(new.xmotivo, '')          or
--          coalesce(old.ide_tpamb, 0)         <> coalesce(new.ide_tpamb, 0)         or
--          coalesce(old.dhrecbto, '19800101') <> coalesce(new.dhrecbto, '19800101') or
--          coalesce(old.veraplic, '') <> coalesce(new.veraplic, '') then
--          iUpdate := 1;
--       end if;
--    end if;

--    if iUpdate = 1 then
--       perform mc_setflag####???(new.table_origem, new.recno_origem);
--
--       if new.table_origem = 'SAI' then
--          update [(sai)]
--             set sai_estado = new.nfa_estado, nf0_cod = new.cstat,         sai_xmotivo = new.xmotivo,
--                 sai_nf     = new.ide_nnf,    sai_xml = new.xml,           sai_chnfe = new.chnfe,
--                 sai_nprot  = new.nprot,      sai_digval = new.digval,     sai_historico = new.xmotivo,
--                 sai_tpamb  = new.ide_tpamb,  sai_dhrecbto = new.dhrecbto, sai_veraplic = new.veraplic,
--   sai_manual = new.nfa_manual
--           where recno = new.recno_origem;
--
--       elsif new.table_origem = 'TGB' then
--          update [(tgb)]
--             set tgb_xml    = new.xml,        tgb_chnfe     = new.chnfe,   tgb_dhrecbto = new.dhrecbto,
--                 nf0_cod    = new.cstat,      tgb_cupom     = new.ide_nnf, tgb_nprot    = new.nprot,
--                 tgb_estado = new.nfa_estado, tgb_xmotivo   = new.xmotivo, tgb_tpamb    = new.ide_tpamb,
--                 tgb_digval = new.digval,     tgb_historico = new.xmotivo, tgb_veraplic = new.veraplic,
--                 tgb_status_cupom = case when new.cstat = 101 then 3 else
--                                    case when new.cstat = 100 then 2 else tgb_status_cupom end end
--           where recno = new.recno_origem;
--       end if;
--       perform mc_delflag####???(new.table_origem, new.recno_origem);
--    end if;
--
      return new;
   else
      return old;
   end if;
End;
$$
language plpgsql;
