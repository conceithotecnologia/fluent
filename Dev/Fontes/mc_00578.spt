/*==================================================================================================================================
  Rotina...: <l> mc_00578 </l>
  --------------------------------------------------------------------------------------------------------------------------------
  Descrição: <d> Apresenta saldo diário Total do Fluxo de Caixa diário por empresa - tabela FC7  </d>
  --------------------------------------------------------------------------------------------------------------------------------
  Tipo.....: <t> Stored Procedure </t>
  --------------------------------------------------------------------------------------------------------------------------------
  Empresa..: MultCont Informática
  --------------------------------------------------------------------------------------------------------------------------------
  Autor....: Jurandy da Silva Costa
  --------------------------------------------------------------------------------------------------------------------------------
  Data.....: 20/04/2007 21:00:00                                       Alterado.: 23/06/2017
  --------------------------------------------------------------------------------------------------------------------------------
  Parametros
   [Entrada ]·····················································································································
            in_iAtraso:      Integer             Inclui Atrasados? 0-Não 1-Sim
            in_Data_A:       Date                Data inicial para os atrasados
            in_iSaldos:      Integer             Informa Saldo Inicial? 0-Não 1-Sim
            in_nSaldos:      Numeric(15,2)       Saldo Inicial Informado pelo Usuário
            in_APagar:       Integer             Inclui Contas a Pagar? 0-Não 1-Sim
            in_OPagtos:      Integer             Inclui Outros Pagamentos? 0-Não 1-Sim
            in_ARecebe:      Integer             Inclui Contas a Receber? 0-Não 1-Sim
            in_ORecbto:      Integer             Inclui Outros Recebimentos? 0-Não 1-Sim
   [Saida ]·······················································································································
            out_res:         Integer
==================================================================================================================================*/
Create or Replace Function mc_00578####???
( In  in_iAtraso    Integer,
  In  in_Data_A     Date,
  In  in_iSaldos    Integer,
  In  in_nSaldos    Numeric(15, 2),
  In  in_APagar     Integer,
  In  in_OPagtos    Integer,
  In  in_ARecebe    Integer,
  In  in_ORecbto    Integer,
  Out out_res       Integer )
As $$
Declare

-- {Variáveis para cursores}
   xFluxo     refcursor;                    -- Cursor para o movimento do fluxo de caixa
   xContas    refcursor;                    -- Cursor para as contas correntes

-- {Variáveis de uso interno}
   iRecno01   [(fc7)].recno%type;           -- Número do registro
   iFilial    [(fc7)].fc7_filial%type;      -- Código da filial
   cConta_1   [(fc7)].ak_cc%type;           -- Número da conta corrente
   cConta     [(fc7)].ak_cc%type;           -- Número da conta corrente
   dDataBase  [(fc7)].fc7_data%type;        -- Data base para saldo inicial
   dDataAntes [(fc7)].fc7_data%type;        -- Data base para saldo anterior
   dDataSaldo [(fc7)].fc7_data%type;        -- Data do último saldo bancario
   nAntesCta  [(fc7)].fc7_anterior%type;    -- Saldo anterior do dia - bancos
   nAnterior  [(fc7)].fc7_anterior%type;    -- Saldo anterior do dia
   nEntradas  [(fc7)].fc7_entradas%type;    -- Entradas do dia
   nSaidas    [(fc7)].fc7_saidas%type;      -- Saidas do dia
   nSaldo     [(fc7)].fc7_saldo%type;       -- Saldo do dia
   cObserva   [(fc7)].fc7_observa%type;     -- Observações sobre o saldo
   iCaixa     [(fa8)].fa8_caixa%type;       -- Número do caixa
   iOrdem     [(fr1)].fr1_ordem%type;       -- Número de ordem na tabela temporária FR1
   cSessao    [(fr2)].session%type;         -- Sessão atual do usuário

Begin
   out_res := 0;
   iOrdem  := 1;
   -- Recupera a sessão do usuário
   cSessao := sys_session();

   -- Busca data base informada pelo usuário
   Select sys_getdatabase####???() Into dDataBase;

   -- Calcula data anterior à data base
   dDataAntes := dDataBase - 1;

   -- Limpa os dados da Sessão antes de montar um novo relatório
   Delete From [(fr1)] Where session = cSessao;
   Delete From [(fr2)] Where session = cSessao;
   Delete From [(fc7)] Where session = cSessao;

   -- Atualiza a coluna FC5_DFLUXO antes da montagem do Fluxo de Caixa
   Perform mc_00576####???( in_iAtraso, dDataBase, in_Data_A, cSessao );

   cConta_1 := 'TODAS AS CONTAS';

   -- Transfere o detalhamento para a tabela temporária do usuário
   -- Não inclui os lançamentos dos tipos 1-Transferencia Entrada e 7-Transferência Saída
   Insert Into [(fr2)] ( session,    fr2_origem,  fr2_recno,  fr2_data,      fr2_tipo,        fr2_filial,
                         fr2_conta,  fr2_entrada, fr2_saida,  fr2_compete,   fr2_status,      fr2_cli_for,
                         fr2_vbaixa, fr2_dbaixa,  fr2_dfluxo, fr2_historico, fr2_nota_numero, fr2_nota_serie, fr2_emissao)
                 Select  cSessao,    fc5_origem,  fc5_recno,  fc5_data,      fc5_tipo,   fa8_filial,
                         Coalesce(Case When fc5.ak_cc Is Null Then 'Caixa ' || fa8_caixa
                                       Else fc5.ak_cc End, 'INDEFINIDA'),
                                     fc5_entrada, fc5_saida,  fc5_compete,   fc5_status,      fc5_cli_for,
                         fc5_vbaixa, fc5_dbaixa,  fc5_dfluxo, fc5_historico, fc5_nota_numero, fc5_nota_serie, fc5_emissao
                   From [(fc5)] fc5
              Left Join [(fak)] fak
                     On fc5.ak_cc = fak.ak_cc
                    And fc5.fa8_filial = fak.fak_filial
                  Where fc5_dfluxo >= dDataAntes
                    And fc5_fluxo = 1
                    And (fc5_status = 1 Or fc5_dfluxo > dDataAntes)
                    And ((fak.fak_fluxo = 1 And fak.fak_ativo = 1) Or fc5.ak_cc Is Null)
                    And ((fc5_tipo = 5 And fc5_origem = 'SAO'  And in_APagar  = 1)
                      Or (fc5_tipo > 4 And fc5_origem <> 'SAO' And in_OPagtos = 1)
                      Or (fc5_tipo = 0 And fc5_origem = 'SAN'  And in_ARecebe = 1)
                      Or (fc5_tipo < 5 And fc5_origem <> 'SAN' And in_ORecbto = 1));

   nAnterior := 0.00;
   -- Busca o saldo nas contas bancárias e caixas se o usuário indicou que NÃO vai informar o saldo inicial
   If in_iSaldos = 0 Then
      -- Abre cursor com as contas bancárias para busca do saldo
      Open xContas For
        Select ak_cc, Min(fak_filial)
          From [(fak)]
         Where fak_fluxo = 1
           And fak_ativo = 1
         Group by ak_cc
         Order by ak_cc;

      Fetch xContas Into cConta, iFilial;
      While Found Loop
         -- Busca saldo anterior nos bancos
         Select Max(faq_data) Into dDataSaldo
           From [(faq)]
          Where ak_cc = cConta
            And faq_data < dDataBase;
         If dDataSaldo Is Null Then
            nAntesCta := 0.00;
         Else
            Select Sum(Coalesce(faq_saldo, 0)) Into nAntesCta
              From [(faq)]
             Where ak_cc = cConta
               And faq_data = dDataSaldo;
            -- Inclui o saldo da conta na tabela temporária para detalhamento
            Insert Into [(fr1)] ( session, fr1_ordem, fr1_texto01, fr1_data01, fr1_data02, fr1_valor01 )
                 Values         ( cSessao, iOrdem,    cConta,      dDataBase,  dDataSaldo, nAntesCta );
            iOrdem := iOrdem + 1;
         End If;
         nAnterior := nAnterior + nAntesCta;
         Fetch xContas Into cConta, iFilial;
      End Loop;
      Close xContas;

      -- Abre cursor com os caixas para busca do saldo
      Open xContas For
           Select fa8_caixa, Min(fa8_filial)
             From [(fa8)]
            Where fa8_fluxo = 1
              And fa8_ativo = 1
            Group By fa8_caixa
            Order By fa8_caixa;
      Fetch xContas Into iCaixa, iFilial;
      While Found Loop
         -- Busca saldo anterior nos caixas
         Select Max(fa6_data) Into dDataSaldo
           From [(fa6)]
          Where fa8_caixa = iCaixa
            And fa6_data < dDataBase;
         If dDataSaldo Is Null Then
            nAntesCta := 0.00;
         Else
            Select Sum(Coalesce(fa6_saldo, 0)) Into nAntesCta
              From [(fa6)]
             Where fa8_caixa = iCaixa
               And fa6_data = dDataSaldo;
            -- Inclui o saldo do caixa na tabela temporária para detalhamento
            Insert Into [(fr1)] ( session, fr1_ordem, fr1_texto01,        fr1_data01, fr1_data02, fr1_valor01 )
                 Values         ( cSessao, iOrdem,    'Caixa ' || iCaixa, dDataBase,  dDataSaldo, nAntesCta );
            iOrdem := iOrdem + 1;
         End If;
         nAnterior := nAnterior + nAntesCta;
         Fetch xContas Into iCaixa, iFilial;
      End Loop;
      Close xContas;
   Else
      nAnterior := in_nSaldos;
   End If;

   -- Abre cursor para totalizar periodo selecionado por data em FC4
   Open xFluxo For
       Select fr2_dfluxo, Sum(fr2_entrada - (Case When fr2_tipo = 2 Or fr2_tipo = 8 Or fr2_entrada <= 0 Or fr2_entrada = fr2_vbaixa Then 0 Else fr2_vbaixa End)),
                          Sum(fr2_saida   - (Case When fr2_tipo = 2 Or fr2_tipo = 8 Or fr2_saida <= 0 Or fr2_saida = fr2_vbaixa Then 0 Else fr2_vbaixa End)),
              Min(fr2_filial)
          From [(fr2)]
         Where session = cSessao
      Group by fr2_dfluxo
      Order by fr2_dfluxo;

   Fetch xFluxo Into dDataSaldo, nEntradas, nSaidas, iFilial;
   While Found Loop
      -- Calcula o saldo da data atual
      If dDataSaldo = dDataAntes Then
         nSaldo := nAnterior;
      Else
         nSaldo := nAnterior + nEntradas - nSaidas;
      End If;
      If (nEntradas + nSaidas) > 0.00 Then
         -- Verifica a existencia de um registro para a data atual
         Select recno Into iRecno01
           From [(fc7)]
          Where session    = cSessao
            And ak_cc      = cConta_1
            And fc7_filial = iFilial
            And fc7_data   = dDataSaldo;
         -- Inclui ou atualiza saldo da data atual
         If iRecno01 Is Null Then
            If dDataSaldo = dDataAntes Then
               If in_iAtraso > 0 Then
                  cObserva := 'ATRASADOS ENTRE ' || to_char( in_Data_A, 'DD/MM/YYYY' ) || ' E ' ||
                              to_char( dDataAntes, 'DD/MM/YYYY' );
                  Insert Into [(fc7)] ( session,      ak_cc,      fc7_filial, fc7_data,   fc7_anterior,
                                        fc7_entradas, fc7_saidas, fc7_saldo,  fc7_observa )
                       Values         ( cSessao,      cConta_1,   iFilial,    dDataSaldo, 0,
                                        nEntradas,    nSaidas,    0,          cObserva );
               End If;
            Else
               Insert Into [(fc7)] ( session,      ak_cc,        fc7_filial, fc7_data,
                                     fc7_anterior, fc7_entradas, fc7_saidas, fc7_saldo )
                    Values         ( cSessao,      cConta_1,     iFilial,    dDataSaldo,
                                     nAnterior,    nEntradas,    nSaidas,    nSaldo );
            End If;
         Else
            Update [(fc7)]
               Set fc7_anterior = nAnterior, fc7_entradas = nEntradas,
                   fc7_saidas   = nSaidas,   fc7_saldo    = nSaldo
             Where recno = iRecno01;
         End If;
      End If;
      -- Calcula o saldo anterior para a proxima data
      nAnterior := nSaldo;
      Fetch xFluxo Into dDataSaldo, nEntradas, nSaidas;
   End Loop;
   Close xFluxo;
   out_res := 1;
End;
$$ language 'plpgsql';
