/*==================================================================================================================================
  Rotina...: <l> mc_00632 </l>
  --------------------------------------------------------------------------------------------------------------------------------
  Descrição: <d> Verifica datas de validade Inicial e Final do Rateio </d>
  --------------------------------------------------------------------------------------------------------------------------------
  Tipo.....: <t> Stored Procedure </t>
  --------------------------------------------------------------------------------------------------------------------------------
  Empresa..: MultCont Informática
  --------------------------------------------------------------------------------------------------------------------------------
  Autor....: Jurandy da Silva Costa
  --------------------------------------------------------------------------------------------------------------------------------
  Data.....: 08/07/2005 20:30:00                   Alterado.: 29/10/2007
  --------------------------------------------------------------------------------------------------------------------------------
==================================================================================================================================*/
Create or Replace Function mc_00632####???
() Returns trigger
As $$
Declare
-- {Variáveis de uso interno}

   iNatureza      [(fb1)].f1_codnat%type;       -- Código da Natureza Financeira
   dData_Ini      [(fb1)].data_ini%type;        -- Data inicial de validade do Rateio
   dData_Ant      [(fb1)].data_fim%type;        -- Data de validade anterior do Rateio
   dData_Pos      [(fb1)].data_fim%type;        -- Data de validade posterior do Rateio
   dData_Fim      [(fb1)].data_fim%type;        -- Data final de validade do Rateio
   iStatus        [(fb1)].fb1_status%type;      -- Status do Rateio
   iRecno01       [(fb1)].recno%type;           -- Número do registro
   iRecno02       [(fb3)].recno%type;           -- Número do registro
   iFilial        [(fb3)].fb3_filial%type;      -- Código da filial

Begin
   If tg_op <> 'DELETE' Then
      iNatureza := new.f1_codnat;
      dData_Ini := new.data_ini;
      -- A validade inicial não pode ser posterior à validade final
      If new.data_fim Is Not Null And dData_Ini > new.data_fim Then
         raise '[[A validade inicial do Rateio deve ser anterior a (%), validade final informada.]]', new.data_fim;
      End If;
   Else
      iNatureza := old.f1_codnat;
      dData_Ini := old.data_ini;
   End If;
   iRecno01 := 0;
   If tg_op = 'INSERT' Then
      -- Busca a maior validade inicial da mesma Natureza Financeira
      Select Max(recno), Max(data_ini), Max(fb1_status)
        Into iRecno01,   dData_Ant,     iStatus
        From [(fb1)]
       Where f1_codnat  = iNatureza
         And data_ini  <> dData_Ini;
      -- Busca a maior validade final da mesma Natureza Financeira
      Select Max(data_fim)
        Into dData_Fim
        From [(fb1)]
       Where f1_codnat  = iNatureza
         And data_ini  <> dData_Ini;
      -- Não permite incluir se o Rateio anterior não estiver OK
      If iStatus <> 0 Then
         raise '[[O Rateio anterior desta Natureza está em manutenção. Encerre-o antes de incluir outro.]]';
      End If;
      -- Não aceita datas menores que as validades já cadastradas
      If dData_Ant Is Not Null And dData_Ini <= dData_Ant Then
         raise '[[A validade inicial do Rateio deve ser posterior a (%), maior validade inicial cadastrada.]]', dData_Ant;
      End If;
      If dData_Fim Is Not Null And dData_Ini <= dData_Fim Then
         raise '[[A validade inicial do Rateio deve ser posterior a (%) maior validade final cadastrada.]]', dData_Fim;
      End If;
   ElsIf tg_op = 'UPDATE' Then
      -- Busca a maior validade inicial anterior da mesma Natureza Financeira
      Select Max(recno), Max(data_ini)
        Into iRecno01,   dData_Ant
        From [(fb1)]
       Where f1_codnat  = iNatureza
         And data_ini   < old.data_ini
         And data_ini  <> dData_Ini;
      -- Busca a maior validade final anterior para a mesma Natureza Financeira
      Select Max(data_fim)
        Into dData_Fim
        From [(fb1)]
       Where f1_codnat  = iNatureza
         And data_ini   < old.data_ini
         And data_ini  <> dData_Ini;
      -- Não aceita datas menores que as validades já cadastradas
      If dData_Ant Is Not Null And dData_Ini <= dData_Ant Then
         raise '[[A validade inicial do Rateio deve ser posterior a (%), maior validade inicial cadastrada.]]', dData_Ant;
      End If;
      If dData_Fim Is Not Null And dData_Ini <= dData_Fim Then
         raise '[[A validade inicial do Rateio deve ser posterior a (%), maior validade final cadastrada.]]', dData_Fim;
      End If;
      -- Busca a maior validade inicial posterior da mesma Natureza Financeira
      Select Max(data_ini)
        Into dData_Pos
        From [(fb1)]
       Where f1_codnat  = iNatureza
         And data_ini   > old.data_ini
         And data_ini  <> dData_Ini;
      -- Busca a maior validade final posterior para a mesma Natureza Financeira
      Select Max(data_fim)
        Into dData_Fim
        From [(fb1)]
       Where f1_codnat  = iNatureza
         And data_ini   > old.data_ini
         And data_ini  <> dData_Ini;
      -- Não aceita datas maiores que as validades já cadastradas
      If dData_Pos Is Not Null And dData_Ini >= dData_Pos Then
         raise '[[A validade inicial do Rateio deve ser anterior a (%), validade inicial seguinte cadastrada.]]', dData_Pos;
      End If;
      If dData_Fim Is Not Null And dData_Ini >= dData_Fim Then
         raise '[[A validade inicial do Rateio deve ser anterior a (%), validade final seguinte cadastrada.]]', dData_Fim;
      End If;
   End If;

   -- Fixa o código da Filial Ativa
   iFilial := ???;
   -- Busca o Centro de Custo / Filial
   Select recno Into iRecno02
     From [(fb3)]
    Where f1_codnat  = iNatureza
      And data_ini   = dData_Ini
      And fb3_filial = iFilial;

   If tg_op <> 'DELETE' Then
      -- Executa limpeza preventiva de lixo nas tabelas de consolidação
      Delete From [(fb4)]
       Where recno In (Select fb4.recno
                         From [(fb4)] fb4
                         Left Join [(fb2)] fb2
                           On fb4.fb3_filial = iFilial
                          And fb4.f1_codnat  = fb2.f1_codnat
                          And fb4.data_ini   = fb2.data_ini
                          And fb4.fb2_ccusto = fb2.fb2_ccusto
                        Where fb4.fb3_filial = iFilial And fb2.recno Is Null);
      -- Grava a validade final no registro anterior - caso exista
      If iRecno01 Is Not Null And iRecno01 > 0 Then
         Update [(fb1)]
            Set data_fim = dData_Ini - 1
          Where recno = iRecno01;
      End If;
      -- Inclui ou altera registro na tabela de Consolidação - FB3
      If tg_op = 'INSERT' Or iRecno02 Is Null Then
         Insert Into [(fb3)] ( fb3_filial, f1_codnat,     data_ini,     data_fim,     fb1_status )
              Values         ( iFilial,    new.f1_codnat, new.data_ini, new.data_fim, new.fb1_status );
      Else
         Update [(fb3)]
            Set data_ini = new.data_ini, data_fim = new.data_fim, fb1_status = new.fb1_status
             Where recno = iRecno02;
      End If;
      Return new;
   Else
      If old.data_fim Is Not Null Then
         raise '[[Não é permitido excluir Rateios depois de informar a validade final.]]';
      End If;
      -- Busca a maior validade inicial anterior da mesma Natureza Financeira
      Select Max(recno), Max(data_ini)
        Into iRecno01,   dData_Ant
        From [(fb1)]
       Where f1_codnat  = iNatureza
         And data_ini   < old.data_ini
         And data_ini  <> dData_Ini;
      -- Exclui a validade final no registro anterior - caso exista
      If iRecno01 Is Not Null And iRecno01 > 0 Then
         Update [(fb1)]
            Set data_fim = Null
          Where recno = iRecno01;
      End If;
      -- Exclui registro na tabela de Consolidação - FB3
      Delete From [(fb3)] Where recno = iRecno02;
      Return old;
   End If;
End;
$$ language plpgsql;