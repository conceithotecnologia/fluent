/**
   Processa estorno de matéria-prima do documento de produção

	@author    Ricardo Gonçalves
	@date      29/01/2008 21:02:45
	@trigger   SED A IUD

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso

   05/12/2018  Ricardo Gonçalves
      [+] Criação do facilitador para geração das partidas
*/
Create or Replace Function mc_00120####???()
Returns trigger As
$$
Declare
   xCursor        refCursor;
   vhistorico     [(a49)].a49_historico%type;
   fsaldo         [(sd1)].sd1_qtd%type;         
   isd3_lote      [(sd3)].sd3_lote%type;
   ised_recno     [(sed)].recno%type;
   vb1_codpro     [(sb1)].b1_codpro%type;   
   vlastb1_codpro [(sb1)].b1_codpro%type;
   fsd2_qtd       [(sd2)].sd2_qtd%type;
   fsec_qtd       [(sec)].sec_qtd%type;
   isec_recno     [(sec)].recno%type;
   fsee_qtd       [(see)].see_qtd%type;
   ise6_operacao  [(se7)].se6_operacao%type;   
   icount         integer;
   rmov          	mov;
   r				   record;
   rop   		   record;
   isd1_docto     [(sd1)].sd1_docto%type;
   i              integer;
BEGIN
   if tg_op <> 'DELETE' then
      isd1_docto := new.sd1_docto;
   else
      isd1_docto := old.sd1_docto;
   end if;
   
   -- Recuperando informações da operação
   select p.sfj_pessoa, p.b1_codpro, p.z2_coduni, p.sd1_custo, pro.a4i_tipo_s, rt.sdg_roteiro, p.recno,
          p.sd1_etapa
     into rop
     from [(sd1)] p
          join [(sdg)] rt
            on rt.sdg_roteiro = p.sdg_roteiro          
          join [(sbf)] pro
            on pro.b1_codpro = p.b1_codpro
    where p.sd1_docto = isd1_docto;
   
   -- Processa estorno de matéria-prima
   if tg_op = 'INSERT' then
      -- Recupera o saldo disponível para divisão entre as partidas restantes
      select (a.sd1_qtd - coalesce(b.sed_qtd, 0))::numeric(15, 4)
        into fsaldo
        from [(sd1)] a
             left join (
               select sd1_docto, sum(a.sed_qtd)::numeric(15,4) as sed_qtd
                 from [(sed)] a
                where a.sd1_docto = new.sd1_docto
                  and a.sed_partida <> new.sed_partida
                group by a.sd1_docto) b
                    on b.sd1_docto = a.sd1_docto
       where a.sd1_docto = new.sd1_docto;

      -- Verifica a quantidade informada na partida é válida
      if fsaldo < new.sed_qtd then
         raise '[[A partida "%" é maior que a quantidade disponível a produzir na OP "%"]]', new.sed_partida, new.sd1_docto;
      end if;

      -- registrando as operações para partida
      insert into [(se7)] 
         (sd1_docto, sed_partida, sdg_roteiro, se6_operacao)
      select
         new.sd1_docto, new.sed_partida, rop.sdg_roteiro, se6_operacao
        from [(se6)]
       where sdg_roteiro = rop.sdg_roteiro;
      
      -- LOG
      perform sys_log####???('SD1', rop.recno, format('Criação da partida %s', mask_00009(new.sed_partida)));
   end if;

   if tg_op <> 'DELETE' then
      -- Caso esteja em digitação retorna
      if new.sed_etapa = 1 then
         if tg_op = 'INSERT' then
            Return new;
         elsif new.sed_etapa = 1 and old.sed_etapa = 1 then
            Return new;
         elsif new.sed_etapa < old.sed_etapa and mc_getflag####???('SED', new.recno) <> 1 then
            raise '[[Desculpe, não é possível retroceder etapas. Partida "%"]]', new.sed_partida;
         end if;
      end if;
      
      ised_recno:= new.recno;
   else
      ised_recno:= old.recno;
   end if;

   if tg_op = 'UPDATE' then
      -- ==============================================================================================================
      -- Início da produção
      -- ==============================================================================================================
      if new.sed_etapa = 2 and old.sed_etapa = 1 then          
         -- Põe documento de produção na etapa de produção
         rop.sd1_etapa:= 3;

         --> ==================================================
         --  Registro consumo por lote
         --> ==================================================
         -- Abre cursor para registrar a quantidade necessária de matéria-prima para produzir a partida
         Open xCursor For
            select a.b1_codpro, c.sd3_lote, (sd2_qtd * new.sed_qtd / b.sd1_qtd)::numeric(18,4),
                  (c.sec_qtd - c.sec_qtdutil)::numeric(18,4), c.recno
              from [(sd2)] a
                   join [(sd1)] b
                     on b.sd1_docto = a.sd1_docto
                   join [(sec)] c
                     on c.sd1_docto = a.sd1_docto
                    and c.b1_codpro = a.b1_codpro
                    and c.sec_qtd > sec_qtdutil
             where a.sd1_docto = new.sd1_docto
             order by a.b1_codpro, c.sd3_lote;

         -- Incialização das variáveis de controle de quebra
         vlastb1_codpro:= '';
         fsaldo:= 0;

         Fetch xCursor Into vb1_codpro, isd3_lote, fsd2_qtd, fsec_qtd, isec_recno;

         while Found Loop
            -- registra quantidade no arquivo de materias-primas X partida
            if vlastb1_codpro <> vb1_codpro then
               fSaldo:= fsd2_qtd;
               vlastb1_codpro:= vb1_codpro;
            end if;

            if fSaldo > 0 then
               if fSaldo > fsec_qtd then
                  fsee_qtd:= fsec_qtd;
               else
                  fsee_qtd:= fSaldo;
               end if;

               -- Registro a matéria-prima nessa partida
               insert into [(see)] (sd1_docto,       b1_codpro,  sd3_lote,  sed_partida,     see_qtd)
                    values         (new.sd1_docto,   vb1_codpro, isd3_lote, new.sed_partida, fsee_qtd);


               perform mc_setflag####???('SEC', isec_recno);

               -- Atualiza a lista de matérias-primas da OP
               update [(sec)]
                  set sec_qtdutil = sec_qtdutil + fsee_qtd
                where recno = isec_recno;

               perform mc_delflag####???('SEC', isec_recno);

               fSaldo:= fSaldo - fsee_qtd;
            end if;

            Fetch xCursor Into vb1_codpro, isd3_lote, fsd2_qtd, fsec_qtd, isec_recno;
         end Loop;

         close xCursor;

         -- Atualiza quantidade em produção no cabeçalho da requisição
         perform mc_setflag####???('SD1', rop.recno);

         Update [(sd1)]
            set sd1_qtdproduzindo = sd1_qtdproduzindo + new.sed_qtd,
                sd1_etapa = rop.sd1_etapa
          where sd1_docto = new.sd1_docto;

         perform mc_delflag####???('SD1', rop.recno);

         -- LOG
         perform sys_log####???('SD1', rop.recno, format('Início de produção da partida %s', mask_00009(new.sed_partida)));

      -- ==============================================================================================================
      -- Partida enviada para revisão
      -- ==============================================================================================================
      elsif new.sed_etapa = 3 and old.sed_etapa = 2 then -- Envia partida para revisão
         -- Gerando o registro padrão da revisão
         insert into [(e19)] 
            (sd1_docto,     sed_partida,     b1_codpro,      z2_coduni,      e19_qtd, 
             sd3_lote,      e19_loteref,     e19_editavel)
         values
            (new.sd1_docto, new.sed_partida, rop.b1_codpro, rop.z2_coduni, new.sed_qtd, 
             new.sd3_lote,  new.sed_loteref, 0);
         
         perform sys_log####???('SD1', rop.recno, format('Partida %s enviada revisão.', 
               mask_00009(new.sed_partida)));
         
         -- Atualiza quantidade em produção no cabeçalho da requisição
         perform mc_setflag####???('SD1', rop.recno);
         
         Update [(sd1)]
            set sd1_qtdproduzindo = sd1_qtdproduzindo - old.sed_qtd,
                sd1_qtdproduzida = sd1_qtdproduzida + new.sed_qtd
          where sd1_docto = new.sd1_docto;
         
         perform mc_delflag####???('SD1', rop.recno);

      -- ==============================================================================================================
      -- Processamento da revisão da partida
      -- ==============================================================================================================
      elsif new.sed_etapa = 4 and old.sed_etapa = 3 then 
         -- Verfica se há informações sobre revisão
         if not exists(
            select 1
              from [(e19)]
             where sd1_docto = new.sd1_docto
               and sed_partida = new.sed_partida)
         then
            raise '[[Não foi possível encerrar a partida % da produção % porque não há revisões.]]', new.sed_partida, new.sd1_docto;
         end if;

         -- Baixa movimentação anterior com auxilio da memória de movimentação            
         rmov := mc_getmov####???(new.e20_recno);
         rmov.operac  := 2;

         -- Desbloqueando estoque
         if rmov.mlote = 1 then
            perform mc_setflag####???('SD3', rmov.lote);
            update [(sd3)]
               set sd3_bloq = 0
             where sd3_lote = rmov.lote
               and sd3_bloq = 1;
            perform mc_delflag####???('SD3', rmov.lote);
         end if;

         -- Movimentação do estoque
         perform mc_00968####???(rmov); -- baixa da reserva
         perform mc_00978####???(rmov); -- baixa do estoque

         -- Entradas revisadas
         rmov.operac  := 1;
         rmov.op := new.sd1_docto;
         -- Cursor para processamento das revisões
         for r in (
            select a.b1_codpro, a.z2_coduni, a.e19_qtd, a.sd3_lote, a.e19_loteref, a.e19_cq, a.recno, a.e19_revisao,
                   b.sbf_endereco_rec
              from [(e19)] a
                   join [(sbf)] b
                     on b.b1_codpro = a.b1_codpro
             where sd1_docto = new.sd1_docto
               and sed_partida = new.sed_partida
             order by recno)
         loop
            rmov.descri := format('Revisão %s da partida %s, produção %s', r.e19_revisao, new.sed_partida, new.sd1_docto);
            rmov.material := r.b1_codpro;
            rmov.unidade := r.z2_coduni;
            rmov.qtd := r.e19_qtd;
            rmov.tabela := 'E19';
            rmov.recno := r.recno;
            rmov.mfilial := 1;
            rmov.mser := 0;
            rmov.mender := mc_00061####???(rmov.material);
            rmov.mlote := mc_00049####???(rmov.material);            
            rmov.cfop := null;
            rmov.individual := 0;
            rmov.numser := null;
            rmov.ender := null;
            rmov.lote := null;

            if r.sd3_lote is not null then               
               rmov.lote := r.sd3_lote;

               -- Altera o material do lote
               update [(sd3)]
                  set b1_codpro = rmov.material, sd3_loteforn = r.e19_loteref
                where sd3_lote = r.sd3_lote;

               perform mc_00158####???(rmov.material, rmov.lote, rmov.unidade, rmov.qtd, 1); -- Corrigindo a quantidade no lote
               perform mc_00158####???(rmov.material, rmov.lote, rmov.unidade, rmov.qtd, 2); -- Corrigindo o saldo no lote
            else
               if rmov.mlote = 1 then                  
                  rmov.lote := mc_00046####???(rmov.material, r.e19_loteref, rmov.unidade, rmov.qtd, rmov.tabela, rmov.recno,
                         format('Produção %s partida %s', new.sd1_docto, new.sed_partida), rmov.pessoa); -- criação do lote

                  -- Registra ligação entre lotes - Lotes de origem deste lote               
                  insert into [(sdc)] (sd3_lote,   sdc_lote, sdc_tipo)
                               select rmov.lote, sd3_lote, 0
                                 from [(a0q)]
                                where sd1_docto = new.sd1_docto;

                  -- Registra ligação entre lotes - Lotes de origem deste lote               
                  insert into [(sdc)] (sd3_lote, sdc_lote, sdc_tipo)
                               select sd3_lote, rmov.lote, 1
                                 from [(a0q)]
                                where sd1_docto = new.sd1_docto;
               end if;                  
            end if;

            if rmov.mender = 1 then
               rmov.ender := r.sbf_endereco_rec;
            end if;

            -- Atualizando memória de movimentação
            update [(e19)]
               set e20_recno = mc_setmov####???(rmov), sd3_lote = rmov.lote
             where recno = r.recno;

            perform mc_00978####???(rmov); -- entrada no estoque

            -- Bloqueia o lote para envio ao CQ
            if r.e19_cq = 1 then
               perform mc_setflag####???('SD3', rmov.lote);
               update [(sd3)]
                  set sd3_bloq = 1, sd3_lote_ok = 0
                where sd3_lote = rmov.lote;
                perform mc_delflag####???('SD3', rmov.lote);
            end if;
         end loop;
      else
         if mc_getflag####???('SED', ised_recno) <> 1 then
            if old.sed_etapa = 4 then
               raise '[[A partida "%", da OP "%", está encerrada. Não pode sofrer alterações.]]', old.sed_partida, old.sd1_docto;
            else
               raise '[[A partida "%" da OP "%" deve cumprir todas as etapas sequencialmente.]]', old.sed_partida, old.sd1_docto;
            end if;
         end if;
      end if;
   end if;

	IF TG_OP = 'DELETE' THEN
		RETURN old;
	ELSE
		RETURN new;
	END IF;
END
$$

language 'plpgsql';