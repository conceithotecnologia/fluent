/**
   Verifica a validade da Natureza Financeira do item antes de aceita-lo em SAM

	@author    Jurandy da Silva Costa
	@date      19/06/2004 12:45:00
	@trigger   SAM B IUD

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso

   01/08/2009 00:00:00  v1    Jurandy da Silva Costa.
      [*] Histórico de alteração não informado

   01/10/2009 18:10:22  v2    Ricardo Gonçalves.
      [+] Criação do suporte a processamento de itens que contém rastreabilidade habilitada.

   21/08/2010 11:55:00  v3    Jurandy da Silva Costa.
      [+] Inclusão do cálculo do ICMS sobre o frete e despesas por item.

   18/12/2010 13:00:00  v4    Jurandy da Silva Costa.
      [*] Inclusão de teste para natureza de operação bloqueada.

   20/01/2011 11:30:00  v5    Wagner Mobile Costa
      [*] Calcular o imposto de ICMS e IPI se houver alíquota

   11/02/2011 20:30:00  v6    Wagner Mobile Costa
      [*] Obrigar preenchimento dos impostos ICMS/IPI/PIS e COFINS de acordo com a situação tributária do Item
      [*] Obrigar preenchimento dos impostos ICMS/IPI/PIS e COFINS de acordo com a situação tributária do Item

   19/03/2011 14:30:44  v7    Ricardo Gonçalves.
      [*] Checagem da TES passa a ser pela função ck_00004####???(new.f4_tes) <> 1

   17/11/2011 09:15:00  v8    Wagner Mobile Costa
      [*] Verifica o tipo de lucro do fornecedor para definir a digitação do imposto e
            calculo da substituição tributária

   26/03/2012 09:24:00  v9    Fabio Carvalho
      [*] Inclusao da Reducao na base de Calculo do icms

   24/03/2014 11:45:00  v10   Jurandy da Silva Costa
      [*] Passa o código do fornecedor como parâmetro para a procedure MC_ICMS_IPI_PIS
      
   06/08/2014 10:17:00  v11   Ricardo Gonçalves
      [+] Suporte a controle de nº de série
      [+] Processamento de quantidades e custos para 1ª e 2ª unidades de medida
      
   04/08/2017 16:05  Ricardo Gonçalves
      [*] Troca dos parâmetros na rotina mc_00047####??? por um tipo composto      
*/
Create or Replace Function mc_00058####???() 
Returns trigger As 
$$
Declare
-- {Variáveis de uso interno}
   aICMS_IPI     Numeric(15, 2) ARRAY[18];     -- aICMS_IPI[01] = Base de Cálculo do ICMS
                                               -- aICMS_IPI[02] = Alíquota do ICMS
                                               -- aICMS_IPI[03] = Valor do ICMS
                                               -- aICMS_IPI[04] = Base de Cálculo do IPI
                                               -- aICMS_IPI[05] = Alíquota do IPI
                                               -- aICMS_IPI[06] = Valor do IPI
                                               -- aICMS_IPI[07] = Base de Cálculo do PIS/COFINS
                                               -- aICMS_IPI[08] = Alíquota do PIS
                                               -- aICMS_IPI[09] = Valor do PIS
                                               -- aICMS_IPI[10] = Alíquota do COFINS
                                               -- aICMS_IPI[11] = Valor do COFINS
                                               -- aICMS_IPI[12] = Total do Produto (Quanto * Unitário)
                                               -- aICMS_IPI[13] = Total do Item (Produto + IPI + ST)
                                               -- aICMS_IPI[14] = Valor da Fatura
                                               -- aICMS_IPI[15] = Base de Calculo da Substituição Tributária
                                               -- aICMS_IPI[16] = Alíquota de ICMS para calculo da Substituição Tributária
                                               -- aICMS_IPI[17] = Valor da Substituição Tributária
                                               -- aICMS_IPI[18] = Sigla do estado do cliente ou fornecedor

   iAl_Serial        [(sal)].al_serial%Type;       -- Numero serial
   iPre_Nota         [(sal)].fpn_numero%type;      -- Número da pré-nota
   iInformar         [(sam)].sam_informa%type;     -- Total informado pelo usuário ??   
   nicms             [(sam)].am_icms%type;   
   vlunit            [(sam)].am_vlunit%type;
   svlunit           [(sam)].am_vlunit%type;
   rf4               record;
   
   nBase             Numeric(15, 2);
   iFlag             Integer;
   bFlag            boolean;
   cMensagem         Varchar(10);   
   iAlterou          Integer;
   ia4i_3os          integer;
   va4i_descri       varchar(60);
   
   rSam              record;
   xCursor           record;
   rm                record; -- Record materiais
   ro                record; -- Record CFOP  
   xconv             econv;  -- tipo composto para calculo de unidades
Begin
   If tg_op <> 'DELETE' then
      -- Processamento do items pela rotina de encerramento da nf
      if mc_getflag####???('SAM', new.recno) = 1 then
         return new;
      end if;

      ial_Serial := new.al_serial;
      iInformar  := new.sam_informa;
      If tg_op = 'INSERT' Then
         new.codtable := coalesce(new.codtable, 'SAM');
         if new.codtable = 'SAM' then
            new.sam_recno := new.recno;
         end if;
         
         cMensagem := 'Incluídos';
		 		 
      Else
         cMensagem := 'Alterados';
      End If;

      -- Recupera informação do material
      select a.b1_nome, a.b1_ativo, c.sbf_rastro, c.sbf_numser, c.sbf_estocavel, c.a4i_tipo_e
        into rm
        from [(sb1)] a             
             join [(sbf)] c
               on c.b1_codpro = a.b1_codpro             
       where a.b1_codpro = new.b1_codpro;                 
       
       
      if rm.sbf_rastro = 1 and new.sam_lote is null then 
         raise '[[É necessário informar o lote do fornecedor para o material % - %.]]', new.b1_codpro, rm.b1_nome;
      end if;
   Else
      ial_serial := old.al_serial;
      iInformar  := old.sam_informa;
      cMensagem  :=   'Excluídos';
   End If;
     
   -- Verifica status do documento
   Select sal.al_status, sal.recno, sal.fpn_numero, sal.al_financas, case when sfh.sfh_lucro = 3 then 1 else 3 end as iLucro, sal.ac_codforn, a2f_codigo
     into xCursor
     from [(sal)] sal
          left join [(sfh)] sfh 
            on sfh.sfj_pessoa = sal.ac_codforn
    Where sal.al_serial = ial_serial;
	
   If tg_op <> 'DELETE' then   
		if xCursor.a2f_codigo = '00' then
			if exists(
				select 1
				  from [(sf8)]
				 where f8_cfop = new.f8_cfop
				  and f8_estoque = 0)
				or exists(
				select 1
				  from [(sf4)] sf4
				 where sf4.f4_tes = new.f4_tes
				   and f4_geradupl = 1)
			then
				raise '[[ATENÇÃO. Para documentos de entrada do modelo ''00'' - Nota de Entrada para Movimentação Interna'' a CFOP deve movimentar estoque e a Natureza de operação não deve gerar financeiro.]]';
			end if;
		end if;
   end if;
   
   bFlag := (xCursor.al_status = 2 And xCursor.al_financas > 0);
      
   If xCursor.fpn_numero Is Not Null and not bFlag Then
      Raise '[[ATENÇÃO. Este documento foi gerado a partir da pré-nota % e não pode ter itens %.]]', xCursor.fpn_numero, cMensagem;
   End If;

   -- Verifica se documento está em processamento
   iFlag := mc_getflag####???('SAL', xCursor.recno);
   if (xCursor.al_status <> 1) and (iFlag = 0) and not bFlag then
      raise '[[ATENÇÃO. Este documento não pode ser alterado pois foi encerrado.]]';
   end if;

   if tg_op = 'DELETE' then
      return old;
   end if;
   
   -- Inicializa flag indicador de alteração na Natureza de Operação
   iAlterou := 0;
   If tg_op = 'UPDATE' Then
      If old.f4_tes <> new.f4_tes Then
         iAlterou := 1;
      End If;
   End If;
   
   If iAlterou = 1 Or (tg_op = 'INSERT' And new.f4_tes Is Not Null) Then
      If ck_00004####???(new.f4_tes) <> 1 Then
         Raise '[[ATENÇÃO. A natureza de operação % está inativa. Favor verificar.]]', new.f4_tes;
      End If;
   End If;

   -- Se o arquivo estive em processamento retorna sem efetuar calculos
   if (iFlag = 1) then
      return new;
   end if;
   
   new.f8_cfop := (mc_00040####???(xCursor.ac_codforn, mc_00205####???(xCursor.ac_codforn), new.f4_tes))[1];
   
   -- Recupera informação da cfop
   select f8_descri, f8_tipo, f8_consumo, f8_3os, f8_estoque
     into ro
     from [(sf8)]
    where f8_cfop = new.f8_cfop;     
    
   if ro.f8_tipo != 1 then      
      raise '[[A CFOP "% - %" é inválida para operações de entrada]]', new.f8_cfop, ro.f8_descri;
   end if;
   
   if ro.f8_estoque = 1 and rm.sbf_estocavel = 1 then
      new.a4i_tipo := coalesce(new.a4i_tipo, rm.a4i_tipo_e);
      if new.a4i_tipo is null then
         raise '[[A CFOP "% - %" exige o tipo de movimentação de estoque para o material "% - %"]]',
            new.f8_cfop, ro.f8_descri, new.b1_codpro, rm.b1_nome;
      end if;
      
      select a4i_tipoest, a4i_descri
        into ia4i_3os, va4i_descri
        from [(a4i)] 
       where a4i_tipo = new.a4i_tipo;
       
      if ro.f8_3os = 0 and ia4i_3os > 0 then
         raise '[[CFOP "% - %" de terceiros incompatível com a ficha "% - %".]]',new.f8_cfop, ro.f8_descri, new.a4i_tipo, va4i_descri;
--      elsif ro.f8_3os = 1 and ia4i_3os <> 1 then
--         raise '[[CFOP "% - %" de terceiros incompatível com a ficha "% - %".]]',new.f8_cfop, ro.f8_descri, new.a4i_tipo, va4i_descri;
      end if;      
      
   else
      new.a4i_tipo := null;
   end if; 
   
   -- Atribuindo valores padrão
   if tg_op = 'INSERT' then
      -- Verifica se o material está ativo
      if new.codtable = 'SAM' then
         new.sam_recno := new.recno;
         if rm.b1_ativo != 1  then
            raise '[[O material % - % não pode ser incluído na nota porque está inativo.]]', new.b1_codpro, rm.b1_nome;
         end if;
      end if;

      -- Verifica local de armazenamento padrão e unidade de medida
      perform ck_00013####???(new.b1_codpro, new.z2_coduni, array[1]);
   else
      if old.z2_coduni <> new.z2_coduni then
         raise '[[ATENÇÃO. A unidade de medida do produto não pode ser alterada.]]';
      end if;
   end if;
   
   -- Processa configuração da unidade de medida
   
   new.am_qtd := mc_00304####???(new.z2_coduni, new.am_qtd);

   -- Calcula o total do item se o usuário não informar
   If iInformar < 1 Then
      new.am_total := (new.am_qtd * new.am_vlunit);
      new.am_total := new.am_total - round((new.am_total * new.am_descto / 100), 2);
   End If;

   -- Chama procedure de calcula Bases, confirma Alíquotas e calcula Impostos
   select f4_redicms, sbn_codtrib
     into rf4
     from [(sf4)]
    where f4_tes = new.f4_tes;

   aICMS_IPI := mc_icms_ipi_pis####???(new.sam_informa,  new.f4_tes,         new.am_vlunit,  new.am_qtd,
                                       new.am_descto,    new.am_icms,        rf4.f4_redicms, new.am_ipi,
                                       0,                'NN',               0,              'NN',
                                       0,                new.am_total,       new.sam_frete,   new.sam_seguro,
                                       new.sam_encargos, new.sam_acessorias, xCursor.iLucro,
                                       Array[ new.am_vbcst, new.am_aliq_st, new.am_vicmsst, 0.00 ],
                                       xCursor.ac_codforn, new.sam_bs_pisfin, new.am_bs_icms);
   -- Aliquota de Icms não informada
   if aICMS_IPI[02] < 0 then
      raise '[[ATENÇÃO. A situação tributária do ICMS obriga a digitação da alíquota !]]';
   end if;

   -- Aliquota de Icms ST não informada
   if aICMS_IPI[16] < 0 then
      raise '[[ATENÇÃO. A situação tributária do ICMS obriga a digitação da alíquota da substituição tributária !]]';
   elsif aICMS_IPI[15] = 0 and aICMS_IPI[16] <> 0 then
      raise '[[ATENÇÃO. A situação tributária do ICMS obriga a digitação da base de calculo da substituição tributária !]]';
   end if;

   -- Aliquota de Ipi não informada
   if aICMS_IPI[05] < 0 then
      raise '[[ATENÇÃO. A situação tributária do IPI obriga a digitação da alíquota !]]';
   end if;

   -- Aliquota de PIS não informada
   if aICMS_IPI[08] < 0 then
      raise '[[ATENÇÃO. A situação tributária do PIS obriga a digitação da alíquota !]]';
   end if;

   -- Aliquota de COFINS não informada
   if aICMS_IPI[10] < 0 then
      raise '[[ATENÇÃO. A situação tributária do COFINS obriga a digitação da alíquota !]]';
   end if;

   -- Calcula do ICMS
   if rf4.sbn_codtrib <> '1' or aICMS_IPI[18] <> 1 then
      new.am_bs_icms := aICMS_IPI[01];
      new.am_icms    := aICMS_IPI[02];
      new.am_vl_icms := aICMS_IPI[03];
   end if;

   -- Calcula do ICMS ST
   new.am_vbcst   := aICMS_IPI[15];
   new.am_aliq_st := aICMS_IPI[16];
   new.am_vicmsst := aICMS_IPI[17];

   -- Cálculo do IPI
   new.am_ipi    := aICMS_IPI[05];
   new.am_vl_ipi := aICMS_IPI[06];

   -- Preenche a natureza financeira, (se vier de projeto, assume a natureza do projeto
   if new.fph_codigo is null then
      If aICMS_IPI[14] > 0 Then
         new.f1_codnat := mc_valnatureza####???( new.b1_codpro, new.f1_codnat );
      Else
         new.f1_codnat := Null;
      End if;
   End If;

   --Se houver valor de Desconto, calcular aliquota
   if new.am_descto_vr > 0 and
      coalesce(new.am_descto,0) = 0  then
      new.am_descto := round(new.am_descto_vr / new.am_total * 100,2);
   end if;


   -- Preenche alíquotas de PIS e COFINS
   new.sam_pis    := aICMS_IPI[08];
   new.sam_cofins := aICMS_IPI[10];

   -- =================================================================================================================
   -- Processamento das quantidades e custo
   -- =================================================================================================================

   -- Obtem as quantidades e custos
   xconv.material := new.b1_codpro;
   xconv.unidade  := new.z2_coduni;
   xconv.qtd      := new.am_qtd;
--   xconv.valor    := new.am_vlunit - round((new.am_vlunit * new.am_descto / 100), 2);
   xconv.custo    := round((new.am_total + new.am_vicmsst - new.am_descto + new.am_vl_ipi) / new.am_qtd,2);
   xconv.valor    := xconv.custo;
   xconv          := mc_00047####???(xconv);

   new.sam_qtd    := xconv.qtd_u1; -- Quantidade 1ª unidade
   new.sam_sqtd   := xconv.qtd_u2; -- Quantidade 2ª unidade

   -- Processamento do controle de nº de série
   case ck_00011####???(new.b1_codpro)
      when 1 then
         new.sam_qtdnsertot := round(new.sam_qtd);
      when 2 then
         new.sam_qtdnsertot := round(new.sam_sqtd);
   else
      new.sam_qtdnsertot := 0;
   end case;

   new.sam_valoru_u1 := xconv.valor_u1;
   new.sam_valoru_u2 := xconv.valor_u2;
   new.sam_custou    := new.sam_valoru_u1;
   new.sam_scustou   := new.sam_valoru_u2;
   new.sam_estado    := 0;

   if (rm.sbf_numser = 0) or (rm.sbf_numser = 1 and new.sam_qtdnser = new.sam_qtdnsertot) then
      new.sam_estado := 1;
   end if;

   -- Tipo de Lucro
   -- 0.Indefinido / 1.Real / 2.Presumido / 3.Simples Nacional
   --
   -- Não calcula custo caso seja estoque de terceiros / em poder de terceiros
   if sys_param_int####???('tipo_lucro', 0) != 3 and ro.f8_consumo = 0 and ro.f8_3os = 0 then
      nicms := 0;
      if new.am_icms > 0 then
         nicms := new.am_icms / 100;

         if rf4.f4_redicms > 0 then
            nicms := nicms * (100 - rf4.f4_redicms) / 100;
         end if;
      end if;

      new.sam_custou := new.sam_custou - xconv.valor_u1 * nicms;

      -- Tipo de incidência PIS/COFINS
      -- 0 - Cumulativa
      -- 1 - Não Cumulativa
      if sys_param_int####???('regime_piscofins', 0) = 1 then
         if new.sam_pis > 0 then
            new.sam_custou := new.sam_custou - xconv.valor_u1 * new.sam_pis / 100;
         end if;

         if new.sam_cofins > 0 then
            new.sam_custou := new.sam_custou - xconv.valor_u1 * new.sam_cofins / 100;
         end if;
      end if;

      if new.sam_sqtd > 0 or new.sam_scustou > 0 then
         new.sam_scustou := new.sam_scustou - xconv.valor_u2 * nicms;
         if sys_param_int####???('regime_piscofins', 0) = 1 then
            if new.sam_pis > 0 then
               new.sam_scustou := new.sam_scustou - xconv.valor_u2 * new.sam_pis / 100;
            end if;

            if new.sam_cofins > 0 then
               new.sam_scustou := new.sam_scustou - xconv.valor_u2 * new.sam_cofins / 100;
            end if;
         end if;
      end if;
   end if;
   
   new.sam_custo := new.sam_qtd * new.sam_custou;
   new.sam_scusto := new.sam_sqtd * new.sam_scustou;

   Return new;
End;
$$ language plpgsql;