/**
   Centro de Custos por Reserva

	@author    Wagner Mobile Costa
	@date      25/09/2010 23:25:00
	@trigger   LOP A ID

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso

	26/09/2010 00:15:00 v1.1  Wagner Mobile Costa
	  [-] Bug 695 - Submeter a reserva para aprovação de usuário a cada novo centro de custo incluido

	12/11/2012 21:30:00 v1.2  Wagner Mobile Costa
	  [-] Atendimento - Alterar o centro de custo do rateio por centro de custos
*/
Create or Replace Function mc_00277####???
() Returns trigger
As $$
Declare
   iCount     integer;
   radmin     record;
   rrow_lo3   record;
   rrow       record;
   rloq       [(loq)]%rowtype;
   vlo0_login [(lom)].lo0_login%type;
   irecno     integer;
Begin
   if tg_op = 'DELETE' then
      -- Verifica se ainda existe outro centro de custos para o excluido
      select count(*) into iCount from [(lop)]
       where lom_id = old.lom_id and a1_codcli = old.a1_codcli and loc_id = old.loc_id;

      -- Remove a aprovação por centro de custo
      if iCount = 0 Then
         delete from [(lob)]
          where lom_id = old.lom_id and a1_codcli = old.a1_codcli and loc_id = old.loc_id;
      end if;

      -- Envia instrução para submeter a aprovação do administrador
      update [(lom)]
         set lom_edit_cc = 3, loc_id_edit = old.loc_id where lom_id = old.lom_id;

      return old;
   else
      -- Verifica se reserva ja foi aprovada e nao existe registro de aprovacao
      if exists(select 1 from [(lom)]
                 where lom_id = new.lom_id and lom_status = 1 and lom_tipo_aprov = 2) and
     not exists(select 1 from [(lob)]
                 where lom_id = new.lom_id and a1_codcli = new.a1_codcli and loc_id = new.loc_id) then
         -- Obtem o administrador da reserva
         select lom.lo0_login, lo1.lo1_login, lo1.lo1_nome, lo1.lo1_email, loc.loc_nome
           into rrow
           from [(lom)] lom
           join [(loc)] loc on loc.a1_codcli = new.a1_codcli and loc.loc_id = new.loc_id
           join [(lo1)] lo1 on lo1.lo1_login = loc.lo1_login
          where lom.lom_id = new.lom_id;

         if rrow.lo1_login is null then
            raise '[[Não foi definido o responsável para o centro de custos %.]]', new.loc_id;
         end if;

         -- Grava tabela para aprovação da reserva por centro de custos
         insert into [(lob)] (lom_id, a1_codcli, loc_id, lo1_login, lob_status)
                       values( new.lom_id, new.a1_codcli, new.loc_id, rrow.lo1_login, 1);

         -- Recupera o registro incluido
         select recno into irecno from [(lob)]
          where lom_id = new.lom_id and a1_codcli = new.a1_codcli and loc_id = new.loc_id;

         for radmin in (
            select lo0_login, lo0_nome, lo0_email, lo0_fone
              from [(lo0)]
             where a1_codcli = new.a1_codcli)
         Loop
            if radmin.lo0_login = rrow.lo0_login then
               exit;
            end if;
         End Loop;

         if radmin is null then
            raise '[[Não há administrador(es) definido(s) para o cliente %.]]', new.a1_codcli;
         end if;

         select lo3_expedini, lo3_expedfin, lo3_url
           into rrow_lo3
           from [(lo3)]
          limit 1;

         -- Monta o e-mail
         rloq.loq_from    := radmin.lo0_nome || sys_form_email(radmin.lo0_email);
         rloq.loq_to      := rrow.lo1_nome  || sys_form_email(rrow.lo1_email);
         rloq.loq_cc      := null;
         rloq.loq_cco     := null;
         
         -- ==============================================================================================================
         -- Configura header do email
         -- ==============================================================================================================
         rloq.loq_header := 'From: ' || rloq.loq_from || '\n';
         rloq.loq_header := rloq.loq_header || 'Reply-To: ' || rloq.loq_from || '\n';
         rloq.loq_header := rloq.loq_header || 'Return-Path: ' || rloq.loq_from || '\n';

         rloq.loq_subject := 'Autorização para reserva ' || cast(new.lom_id as varchar);

         rloq.loq_message := 'Prezado(a) ' || rrow.lo1_nome;
         rloq.loq_message := rloq.loq_message || '<A href="' || rRow_lo3.lo3_url || 'login.php?lom_id=';
         rloq.loq_message := rloq.loq_message || cast(new.lom_id as varchar) || '&src_alcada=lob_alcada&recno=' || cast(irecno as varchar) || '">';
         rloq.loq_message := rloq.loq_message || ' favor autorizar o centro de custos ' || rrow.loc_nome;
         rloq.loq_message := rloq.loq_message || ' para reserva ' || cast(new.lom_id as varchar) || '</A>.<br /><br />';
         rloq.loq_message := rloq.loq_message || 'Atenciosamente, <br /><br /> A.C.Bertti Transportes ME.';

         insert into [(loq)] (lom_id,       loq_from,         loq_to,           loq_cc,
                              loq_cco,      loq_subject,      loq_message,      loq_header,
                              loq_show,     codtable,         src_recno)
                      values (new.lom_id,   rloq.loq_from,    rloq.loq_to,      rloq.loq_cc,
                              rloq.loq_cco, rloq.loq_subject, rloq.loq_message, rloq.loq_header,
                              0,            'LOB',            irecno);
      end if;

      -- Envia instrução para submeter a aprovação do administrador
      update [(lom)]
         set lom_edit_cc = case when tg_op = 'INSERT' then 1 else 2 end, loc_id_edit = new.loc_id where lom_id = new.lom_id;

      -- Mudança do centro de custos
      if tg_op = 'UPDATE' then
         if new.loc_id <> old.loc_id then
            update [(loj)]
               set loc_id = new.loc_id
             where lom_id = new.lom_id and loc_id = old.loc_id;
         end if;
      end if;

      return new;
   end if;
End;
$$ language plpgsql;