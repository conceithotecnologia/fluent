/**
   Transferência do arquivo texto dos diretórios monitorados

	@author    Jurandy da Silva Costa
	@date      17/11/2017 16:10:00
	@trigger   AFTER - SS131

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso

   17/11/2017 16:10:00  v1    Jurandy da Silva Costa
      [+] Criação da rotina de transferência dos arquivos texto dos diretórios monitorados

*/
Create or Replace Function mc_01088####???() 
Returns trigger As $$

Declare
-- {Variáveis de uso interno}
   iSSRecno   [(ss130)].recno%type;
   cDestino   [(ss130)].codtable%type;
   iRecno     [(sam)].recno%type;
   vFilial    varchar(7);
   rSAT       record;
   rRec       Record;
   rItem      Record;
   rPessoa    Record;
   rProduto   Record;
   rFcc       Record;
   rPgto      Record;
Begin
   vFilial := #### || sys_strzero(???, 3);

   If tg_op = 'INSERT' Then
      -- Recupera o nome da tabela de destino para o conteúdo do arquivo importado
      Select codtable
        Into cDestino
        From [(ss130)]
       Where recno = new.ss130_recno;

      -- Transfere o conteúdo para a tabela indicada
      If cDestino = 'FSL' Then
         -- Insere conteúdo do arquivo lido na tabela FSL
         iSSRecno := nextval('[(fsl)]_recno_seq'::regclass);
         Insert Into [(fsl)] ( recno,    fsl_dhevento, fsl_nome,    fsl_texto )
                      Values ( iSSRecno, new.leitura,  new.arquivo, new.conteudo );
         -- Atualiza Status da tabela FSL
         Update [(fsl)] Set fsl_status = 1
          Where recno = iSSRecno;
      -- Transfere o conteúdo para a tabela indicada
      ElsIf cDestino = 'NFA' Then
          update [(ss131)]
  	         set conteudo = Replace(conteudo, ' xmlns="http://www.portalfiscal.inf.br/nfe"','')
	       where recno = new.recno;

          -- Cabecalho da Nota
		  Insert Into [(nfa)]
         (recno_origem, ide_cUF, ide_cNF, ide_natOp, ide_indPag, ide_mod, ide_serie, ide_nNF, ide_dEmi, ide_dSaiEnt, ide_tpNf,
          ide_cMunFG, ide_tpImp, ide_tpEmis, ide_cDV, ide_tpAmb, ide_finNFe, ide_procEmi, ide_verProc, emit_CNPJ, emit_CPF,
			 emit_xNome, emit_xFant, enderemit_xLgr, enderemit_nro, enderemit_xCpl, enderemit_xBairro, enderemit_cMun, enderemit_xMun,
          enderemit_UF, enderemit_CEP, enderemit_cPais, enderemit_xPais, enderemit_fone, emit_IE, emit_IEST, emit_IM, emit_CNAE,
          emit_CRT, dest_CNPJ, dest_CPF, dest_xNome, enderdest_xLgr, enderdest_nro, enderdest_xCpl, enderdest_xBairro,
          enderdest_cMun, enderdest_xMun, enderdest_UF, enderdest_CEP, enderdest_cPais, enderdest_xPais, enderdest_fone, dest_IE,
			 dest_ISUF, dest_email, transporta_cnpj, transporta_xnome, transporta_ie, transporta_xender, transporta_xmun, transporta_uf,
			 vol_qvol, vol_esp, vol_marca, vol_nvol, vol_pesol, vol_pesob, fat_nfat, fat_vorig, fat_vdesc, fat_vliq, infAdFisco, infCpl,
			 icmstot_vbc, icmstot_vicms, icmstot_vbcst, icmstot_st, icmstot_vprod, icmstot_vfrete, icmstot_vseg,
			 icmstot_vdesc, icmstot_vii, icmstot_vipi, icmstot_vpis, icmstot_vcofins, icmstot_voutro, icmstot_vnf, veraplic,
			 chnfe, dhRecbto, nprot, digval, cstat, xmotivo, xml, table_origem)
         select
          recno, ide_cUF, ide_cNF, ide_natOp, ide_indPag, ide_mod, ide_serie, ide_nNF, ide_dhEmi::date, ide_dhSaiEnt::date, ide_tpNf,
                 ide_cMunFG, ide_tpImp, ide_tpEmis, ide_cDV, ide_tpAmb, ide_finNFe, ide_procEmi, ide_verProc, emit_CNPJ, emit_CPF,
		         emit_xNome, emit_xFant, enderemit_xLgr, enderemit_nro, enderemit_xCpl, enderemit_xBairro, enderemit_cMun, enderemit_xMun,
                 enderemit_UF, enderemit_CEP, enderemit_cPais, enderemit_xPais, enderemit_fone, emit_IE, emit_IEST, emit_IM, emit_CNAE,
                 emit_CRT, dest_CNPJ, dest_CPF, dest_xNome, enderdest_xLgr, enderdest_nro, enderdest_xCpl, enderdest_xBairro,
                 enderdest_cMun, enderdest_xMun, enderdest_UF, enderdest_CEP, enderdest_cPais, enderdest_xPais, enderdest_fone, dest_IE,
		         dest_ISUF, dest_email,
				 transporta_cnpj, transporta_xnome, transporta_ie, transporta_xender, transporta_xmun, transporta_uf,
				 vol_qvol, vol_esp, vol_marca, vol_nvol, coalesce(vol_pesol, 0) as vol_pesol, coalesce(vol_pesob, 0) as vol_pesob, fat_nfat,
				 coalesce(fat_vorig, 0) as fat_vorig, coalesce(fat_vdesc, 0) as fat_vdesc, coalesce(fat_vliq, 0) as fat_vliq, infAdFisco, infCpl,
				 icmstot_vbc, icmstot_vicms, icmstot_vbcst, icmstot_vst, icmstot_vprod, icmstot_vfrete, icmstot_vseg,
				 icmstot_vdesc, icmstot_vii, icmstot_vipi, icmstot_vpis, icmstot_vcofins, icmstot_voutro, icmstot_vnf, veraplic,
				 chnfe, dhRecbto, nprot, digval, cstat, xmotivo, new.conteudo, 'NFA'
                 from xpath_table('recno','conteudo','SS131' || vFilial,
                       '/nfeProc/NFe/infNFe/ide/cUF|/nfeProc/NFe/infNFe/ide/cNF|/nfeProc/NFe/infNFe/ide/natOp|/nfeProc/NFe/infNFe/ide/indPag' ||
                      '|/nfeProc/NFe/infNFe/ide/mod|/nfeProc/NFe/infNFe/ide/serie|/nfeProc/NFe/infNFe/ide/nNF|/nfeProc/NFe/infNFe/ide/dhEmi' ||
                      '|/nfeProc/NFe/infNFe/ide/dhSaiEnt|/nfeProc/NFe/infNFe/ide/tpNF|/nfeProc/NFe/infNFe/ide/cMunFG' ||
                      '|/nfeProc/NFe/infNFe/ide/tpImp|/nfeProc/NFe/infNFe/ide/tpEmis|/nfeProc/NFe/infNFe/ide/cDV' ||
                      '|/nfeProc/NFe/infNFe/ide/tpAmb|/nfeProc/NFe/infNFe/ide/finNFe|/nfeProc/NFe/infNFe/ide/procEmi|/nfeProc/NFe/infNFe/ide/verProc' ||
                      '|/nfeProc/NFe/infNFe/emit/CNPJ|/nfeProc/NFe/infNFe/emit/CPF|/nfeProc/NFe/infNFe/emit/xNome|/nfeProc/NFe/infNFe/emit/xFant' ||
                      '|/nfeProc/NFe/infNFe/emit/enderEmit/xLgr|/nfeProc/NFe/infNFe/emit/enderEmit/nro|/nfeProc/NFe/infNFe/emit/enderEmit/xCpl' ||
                      '|/nfeProc/NFe/infNFe/emit/enderEmit/xBairro|/nfeProc/NFe/infNFe/emit/enderEmit/cMun|/nfeProc/NFe/infNFe/emit/enderEmit/xMun' ||
                      '|/nfeProc/NFe/infNFe/emit/enderEmit/UF|/nfeProc/NFe/infNFe/emit/enderEmit/CEP|/nfeProc/NFe/infNFe/emit/enderEmit/cPais' ||
                      '|/nfeProc/NFe/infNFe/emit/enderEmit/xPais|/nfeProc/NFe/infNFe/emit/enderEmit/fone|/nfeProc/NFe/infNFe/emit/IE' ||
                      '|/nfeProc/NFe/infNFe/emit/IEST|/nfeProc/NFe/infNFe/emit/IM|/nfeProc/NFe/infNFe/emit/CNAE|/nfeProc/NFe/infNFe/emit/CRT' ||
                      '|/nfeProc/NFe/infNFe/dest/CNPJ|/nfeProc/NFe/infNFe/dest/CPF|/nfeProc/NFe/infNFe/dest/xNome' ||
                      '|/nfeProc/NFe/infNFe/dest/enderDest/xLgr|/nfeProc/NFe/infNFe/dest/enderDest/nro|/nfeProc/NFe/infNFe/dest/enderDest/xCpl' ||
                      '|/nfeProc/NFe/infNFe/dest/enderDest/xBairro|/nfeProc/NFe/infNFe/dest/enderDest/cMun|/nfeProc/NFe/infNFe/dest/enderDest/xMun' ||
                      '|/nfeProc/NFe/infNFe/dest/enderDest/UF|/nfeProc/NFe/infNFe/dest/enderDest/CEP|/nfeProc/NFe/infNFe/dest/enderDest/cPais' ||
                      '|/nfeProc/NFe/infNFe/dest/enderDest/xPais|/nfeProc/NFe/infNFe/dest/enderDest/fone|/nfeProc/NFe/infNFe/dest/IE' ||
                      '|/nfeProc/NFe/infNFe/dest/ISUF|/nfeProc/NFe/infNFe/dest/email' ||
                      '|/nfeProc/NFe/infNFe/transp/transporta/CNPJ|/nfeProc/NFe/infNFe/transp/transporta/xNome' ||
                      '|/nfeProc/NFe/infNFe/transp/transporta/IE|/nfeProc/NFe/infNFe/transp/transporta/xEnder' ||
                      '|/nfeProc/NFe/infNFe/transp/transporta/xMun|/nfeProc/NFe/infNFe/transp/transporta/UF' ||
                      '|/nfeProc/NFe/infNFe/transp/vol/qVol|/nfeProc/NFe/infNFe/transp/vol/esp' ||
                      '|/nfeProc/NFe/infNFe/transp/vol/marca|/nfeProc/NFe/infNFe/transp/vol/nVol' ||
                      '|/nfeProc/NFe/infNFe/transp/vol/pesoL|/nfeProc/NFe/infNFe/transp/vol/pesoB' ||
                      '|/nfeProc/NFe/infNFe/cobr/fat/nFat|/nfeProc/NFe/infNFe/cobr/fat/vOrig' ||
                      '|/nfeProc/NFe/infNFe/cobr/fat/vDesc|/nfeProc/NFe/infNFe/cobr/fat/vLiq' ||
                      '|/nfeProc/NFe/infNFe/infAdic/infAdFisco|/nfeProc/NFe/infNFe/infAdic/infCpl' ||
                      '|/nfeProc/NFe/infNFe/total/ICMSTot/vBC|/nfeProc/NFe/infNFe/total/ICMSTot/vICMS|/nfeProc/NFe/infNFe/total/ICMSTot/vBCST' ||
                      '|/nfeProc/NFe/infNFe/total/ICMSTot/vST|/nfeProc/NFe/infNFe/total/ICMSTot/vProd|/nfeProc/NFe/infNFe/total/ICMSTot/vFrete' ||
                      '|/nfeProc/NFe/infNFe/total/ICMSTot/vSeg|/nfeProc/NFe/infNFe/total/ICMSTot/vDesc|/nfeProc/NFe/infNFe/total/ICMSTot/vII' ||
                      '|/nfeProc/NFe/infNFe/total/ICMSTot/vIPI|/nfeProc/NFe/infNFe/total/ICMSTot/vPIS|/nfeProc/NFe/infNFe/total/ICMSTot/vCOFINS' ||
                      '|/nfeProc/NFe/infNFe/total/ICMSTot/vOutro|/nfeProc/NFe/infNFe/total/ICMSTot/vNF' ||
                      '|/nfeProc/protNFe/infProt/verAplic|/nfeProc/protNFe/infProt/chNFe|/nfeProc/protNFe/infProt/dhRecbto' ||
                      '|/nfeProc/protNFe/infProt/nProt|/nfeProc/protNFe/infProt/digVal|/nfeProc/protNFe/infProt/cStat' ||
                      '|/nfeProc/protNFe/infProt/xMotivo',
                       'recno = ' || new.recno::varchar(9))
                 AS xml(recno int4, ide_cUF varchar(2), ide_cNF varchar(8), ide_natOp varchar(60), ide_indPag varchar(1), ide_mod varchar(2),
                        ide_serie varchar(3), ide_nNF integer, ide_dhEmi timestamp, ide_dhSaiEnt timestamp, ide_tpNf integer,
                        ide_cMunFG varchar(7), ide_tpImp integer, ide_tpEmis varchar(1), ide_cDV integer, ide_tpAmb integer, ide_finNFe varchar(1),
                        ide_procEmi integer, ide_verProc varchar(20),
                        emit_CNPJ varchar(14), emit_CPF varchar(14), emit_xNome varchar(60), emit_xFant varchar(60), enderemit_xLgr varchar(60),
                        enderemit_nro varchar(60), enderemit_xCpl varchar(60), enderemit_xBairro varchar(60), enderemit_cMun integer, enderemit_xMun varchar(60),
                        enderemit_UF varchar(60), enderemit_CEP varchar(08), enderemit_cPais integer, enderemit_xPais varchar(60), enderemit_fone varchar(14),
                        emit_IE varchar(14), emit_IEST varchar(14), emit_IM varchar(15), emit_CNAE varchar(7), emit_CRT varchar(1),
                        dest_CNPJ varchar(14), dest_CPF varchar(14), dest_xNome varchar(60),
                        enderdest_xLgr varchar(60), enderdest_nro varchar(60), enderdest_xCpl varchar(60), enderdest_xBairro varchar(60), enderdest_cMun integer,
                        enderdest_xMun varchar(60), enderdest_UF varchar(60), enderdest_CEP varchar(08), enderdest_cPais integer, enderdest_xPais varchar(60),
                        enderdest_fone varchar(14), dest_IE varchar(14), dest_ISUF varchar(9), dest_email varchar(60),
						transporta_cnpj varchar(14), transporta_xnome varchar(60), transporta_ie varchar(14), transporta_xender varchar(60),
						transporta_xmun varchar(60), transporta_uf varchar(2),
						vol_qvol numeric(18,4), vol_esp varchar(60), vol_marca varchar(60), vol_nvol varchar(60),
						vol_pesol numeric(18,4), vol_pesob numeric(18,4),
						fat_nfat varchar(60), fat_vorig numeric(15,2), fat_vdesc numeric(15,2), fat_vliq numeric(15,2), infAdFisco text, infCpl text,
			            icmstot_vbc numeric(15,2), icmstot_vicms numeric(15,2), icmstot_vbcst numeric(15,2), icmstot_vst numeric(15,2),
			            icmstot_vprod numeric(15,2), icmstot_vfrete numeric(15,2), icmstot_vseg numeric(15,2), icmstot_vdesc numeric(15,2),
			            icmstot_vii numeric(15,2), icmstot_vipi numeric(15,2), icmstot_vpis numeric(15,2), icmstot_vcofins numeric(15,2),
			            icmstot_voutro numeric(15,2), icmstot_vnf numeric(15,2),
			            veraplic varchar(20), chnfe varchar(44), dhRecbto timestamp, nprot bigint, digval varchar(28), cstat integer,
			            xmotivo varchar(255));

            -- @@todo
            -- icms_modbc, icms_vbc, icms_picms, icms_vicms, icms_modbcst, icms_pmvast, icms_predbcst, icms_vbcst, icms_picmsst, icms_vicmsst, icms_predbc,

            -- Itens da Nota
	      Insert Into [(nfb)] (nfa_serial, nfb_item, prod_cProd, prod_cEAN, prod_xProd, prod_NCM, prod_extipi, prod_CFOP, prod_uCom, prod_qCom,
			                   prod_vUnCom, prod_vProd, prod_cEANTrib, prod_uTrib, prod_qTrib, prod_vunTrib, prod_vFrete, prod_vSeg, prod_vDesc,
			                   prod_vOutro, prod_indTot, icms_orig, icms_cst, infadprod, table_origem)
	      select nfa.nfa_serial, item, prod_cProd, prod_cEAN, prod_xProd, prod_NCM, prod_extipi, prod_CFOP, prod_uCom, prod_qCom, prod_vUnCom,
                 prod_vProd, prod_cEANTrib, prod_uTrib, prod_qTrib, prod_vunTrib, coalesce(prod_vFrete, 0), coalesce(prod_vSeg, 0),
                 coalesce(prod_vDesc, 0), coalesce(prod_vOutro, 0), prod_indTot,
                 case when not prod_icmsorig_00 is null then prod_icmsorig_00 when not prod_icmsorig_10 is null then prod_icmsorig_10
                      when not prod_icmsorig_20 is null then prod_icmsorig_20 when not prod_icmsorig_30 is null then prod_icmsorig_30
                      when not prod_icmsorig_40 is null then prod_icmsorig_40 when not prod_icmsorig_51 is null then prod_icmsorig_51
                      when not prod_icmsorig_60 is null then prod_icmsorig_60 when not prod_icmsorig_90 is null then prod_icmsorig_90
			          else null end as icms_orig,
                 case when not prod_icmscst_00 is null then prod_icmscst_00 when not prod_icmscst_10 is null then prod_icmscst_10
                      when not prod_icmscst_20 is null then prod_icmscst_20 when not prod_icmscst_30 is null then prod_icmscst_30
                      when not prod_icmscst_40 is null then prod_icmscst_40 when not prod_icmscst_51 is null then prod_icmscst_51
                      when not prod_icmscst_60 is null then prod_icmscst_60 when not prod_icmscst_90 is null then prod_icmscst_90
			          else null end as icms_cst,
					  infadprod, 'NFB'
              from xpath_table('recno','conteudo','SS131' || vFilial,
                   '/nfeProc/NFe/infNFe/det/@nItem|/nfeProc/NFe/infNFe/det/prod/cProd|/nfeProc/NFe/infNFe/det/prod/cEAN|/nfeProc/NFe/infNFe/det/prod/xProd' ||
                   '|/nfeProc/NFe/infNFe/det/prod/NCM|/nfeProc/NFe/infNFe/det/prod/EXTIPI|/nfeProc/NFe/infNFe/det/prod/CFOP|/nfeProc/NFe/infNFe/det/prod/uCom' ||
                   '|/nfeProc/NFe/infNFe/det/prod/qCom|/nfeProc/NFe/infNFe/det/prod/vUnCom|/nfeProc/NFe/infNFe/det/prod/vProd|/nfeProc/NFe/infNFe/det/prod/cEANTrib' ||
                   '|/nfeProc/NFe/infNFe/det/prod/uTrib|/nfeProc/NFe/infNFe/det/prod/qTrib|/nfeProc/NFe/infNFe/det/prod/vUnTrib|/nfeProc/NFe/infNFe/det/prod/vFrete' ||
                   '|/nfeProc/NFe/infNFe/det/prod/vSeg|/nfeProc/NFe/infNFe/det/prod/vDesc|/nfeProc/NFe/infNFe/det/prod/vOutro|/nfeProc/NFe/infNFe/det/prod/indTot' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/orig|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/CST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/modBC' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/vBC|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/pICMS|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/vICMS' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/orig|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/CST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/modBC' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/vBC|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/pICMS|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/vICMS' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/modBCST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/pMVAST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/pRedBCST' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/vBCST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/pICMSST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/VICMSST' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS20/orig|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS20/CST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS20/modBC' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS20/pRedBC|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS20/vBC|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS20/pICMS' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS20/vICMS' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS30/orig|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS30/CST'
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS30/modBCST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS30/pMVAST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS30/pRedBCST' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS30/vBCST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS30/pICMSST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS30/VICMSST' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS40/orig|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS40/CST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS40/vICMS' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS40/motDesICMS' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS51/orig|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS51/CST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS51/modBC' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS51/pRedBC|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS51/vBC|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS51/pICMS' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS51/vICMS' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS60/orig|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS60/CST|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS60/vBCSTRet' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS60/vICMSSTRet' ||
                   '|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS90/orig|/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS90/CST' ||
                   '|/nfeProc/NFe/infNFe/det/infAdProd',
                   'recno = ' || new.recno::varchar(9))
                AS xml(recno int4, item integer, prod_cProd varchar(60), prod_cEAN varchar(14), prod_xProd varchar(120), prod_NCM varchar(8), prod_extipi varchar(3),
                       prod_CFOP varchar(4), prod_uCom varchar(6), prod_qCom numeric(15,4), prod_vUnCom numeric(15,4), prod_vProd numeric(15,2), prod_cEANTrib varchar(14),
                       prod_uTrib varchar(6), prod_qTrib numeric(15,4), prod_vunTrib numeric(15,4), prod_vFrete numeric(15,2), prod_vSeg numeric(15,2), prod_vDesc numeric(15,2),
                       prod_vOutro numeric(15,2), prod_indTot varchar(1),
                       prod_icmsorig_00 integer, prod_icmscst_00 integer, prod_icmsmodBC_00 integer, prod_icmsvbc_00 numeric(15,2), prod_icmspICMS_00 numeric(5,2),
                       prod_icmsvICMS_00 numeric(15,2),
                       prod_icmsorig_10 integer, prod_icmscst_10 integer, prod_icmsmodBC_10 integer, prod_icmsvbc_10 numeric(15,2), prod_icmspICMS_10 numeric(5,2),
                       prod_icmsvICMS_10 numeric(15,2), prod_icmsmodBCST_10 integer, prod_icmspMVAST_10 numeric(5,2), prod_icmspRedBCST_10 numeric(5,2),
                       prod_icmsvbcST_10 numeric(15,2), prod_icmspICMSST_10 numeric(5,2), prod_icmsvICMSST_10 numeric(15,2),
                       prod_icmsorig_20 integer, prod_icmscst_20 integer, prod_icmsmodBC_20 integer, prod_icmspRedBC_20 numeric(5,2), prod_icmsvbc_20 numeric(15,2),
                       prod_icmspICMS_20 numeric(5,2), prod_icmsvICMS_20 numeric(15,2),
                       prod_icmsorig_30 integer, prod_icmscst_30 integer, prod_icmsmodBCST_30 integer, prod_icmspMVAST_30 numeric(5,2), prod_icmspRedBCST_30 numeric(5,2),
                       prod_icmsvbcST_30 numeric(15,2), prod_icmspICMSST_30 numeric(5,2), prod_icmsvICMSST_30 numeric(15,2),
                       prod_icmsorig_40 integer, prod_icmscst_40 integer, prod_icmsvICMS_40 numeric(15,2),
                       prod_icmsorig_51 integer, prod_icmscst_51 integer, prod_icmsmodBC_51 integer, prod_icmspRedBC_51 numeric(5,2), prod_icmsvbc_51 numeric(15,2),
                       prod_icmspICMS_51 numeric(5,2), prod_icmsvICMS_51 numeric(15,2),
                       prod_icmsorig_60 integer, prod_icmscst_60 integer, prod_icmsvBCSTRet_60 numeric(15,2), prod_icmsvICMSSTRet_60 numeric(15,2),
                       prod_icmsorig_90 integer, prod_icmscst_90 integer,
					   infadprod varchar(500))
		      join [(nfa)] nfa on nfa.table_origem = 'NFA' and nfa.recno_origem = xml.recno;

          -- Duplicatas da Nota
	      Insert Into [(nfc)] (nfa_serial, dup_ndup, dup_dvenc, dup_vdup, table_origem, recno_origem)
	      select nfa.nfa_serial, dup_ndup, dup_dvenc, dup_vdup, 'NFC', xml.recno
            from xpath_table('recno','conteudo','SS131' || vFilial,
                 '/nfeProc/NFe/infNFe/cobr/dup/nDup|/nfeProc/NFe/infNFe/cobr/dup/dVenc|/nfeProc/NFe/infNFe/cobr/dup/vDup',
                   'recno = ' || new.recno::varchar(9))
                AS xml(recno int4, dup_ndup varchar(60), dup_dvenc date, dup_vdup numeric(13,2))
		      join [(nfa)] nfa on nfa.table_origem = 'NFA' and nfa.recno_origem = xml.recno;

          -- Notas Referencias
	      Insert Into [(nfg)] (nfa_serial, nfg_nfe, table_origem, recno_origem)
	      select nfa.nfa_serial, nfg_nfe, 'NFG', xml.recno
            from xpath_table('recno','conteudo','SS131' || vFilial,
                 '/nfeProc/NFe/infNFe/ide/NFref/refNFe',
                   'recno = ' || new.recno::varchar(9))
                AS xml(recno int4, nfg_nfe varchar(44))
		      join [(nfa)] nfa on nfa.table_origem = 'NFA' and nfa.recno_origem = xml.recno;
      ElsIf cDestino = 'A18' Then

         select split_part(conteudo,'|',7)::integer as irecno,
                split_part(conteudo,'|',8) as status,
                split_part(conteudo,'|',9) as cretorno,
                modificacao as dretorno
           into rSAT
           from [(ss131)]
          where recno = new.recno;

         update [(a18)] a18
            set a18_status   = sys_iif(rSAT.status = 'OK', 3, 2),
                a18_cretorno = rSAT.cretorno,
                a18_dretorno = rSAT.dretorno
          where a18.recno = rSAT.irecno;

      ElsIf cDestino = 'F03' Then
         Perform gera_esat(new.recno, 1);
      elsif cDestino = 'FCC' then    -- para notas de entrada
         --Pode Cair Qualquer Tipo de Xml Na Pasta.
         --Se For XML de NFe Fazer Testes e Incluir como documento de entrada.

         if (strpos(new.conteudo,'NFe')     > 0) and   -- NFE
            (strpos(new.conteudo,'<mod>55') > 0) then  -- Nota eletronica       testar se nota de entrada / contra a filial, etc.....

            --Apaga tag pois nao consegue recuperar informacoes
            update [(ss131)]
    	         set conteudo = Replace(conteudo, ' xmlns="http://www.portalfiscal.inf.br/nfe"','')
             where recno = new.recno;

            update [(ss131)]
    	         set conteudo = Replace(conteudo, '/vUnTrib><indTot>','/vUnTrib><vDesc>0</vDesc><indTot>')
             where recno = new.recno;

            --Recupera Informações para Um Record pois pode ser necessario cadastrar o fornecedor
            select 0 as sfj_pessoa, *
              into rRec
              from xpath_table('recno', 'conteudo', 'ss131' || vFilial,
                                        '/nfeProc/protNFe/infProt/chNFe|'             || '/nfeProc/NFe/infNFe/ide/mod|'              ||
                                        '/nfeProc/NFe/infNFe/ide/serie|'              || '/nfeProc/NFe/infNFe/ide/nNF|'              ||
                                        '/nfeProc/NFe/infNFe/ide/dhEmi|'              || '/nfeProc/NFe/infNFe/ide/tpNF|'             ||
                                        '/nfeProc/NFe/infNFe/ide/idDest|'             || '/nfeProc/NFe/infNFe/ide/tpEmis|'           ||
                                        '/nfeProc/NFe/infNFe/ide/finNFe|'             || '/nfeProc/NFe/infNFe/emit/CNPJ|'            ||
                                        '/nfeProc/NFe/infNFe/emit/xNome|'             || '/nfeProc/NFe/infNFe/emit/enderEmit/xLgr|'  ||
                                        '/nfeProc/NFe/infNFe/emit/enderEmit/nro|'     || '/nfeProc/NFe/infNFe/emit/enderEmit/xCpl|'  ||
                                        '/nfeProc/NFe/infNFe/emit/enderEmit/xBairro|' || '/nfeProc/NFe/infNFe/emit/enderEmit/cMun|'  ||
                                        '/nfeProc/NFe/infNFe/emit/enderEmit/xMun|'    || '/nfeProc/NFe/infNFe/emit/enderEmit/UF|'    ||
                                        '/nfeProc/NFe/infNFe/emit/enderEmit/CEP|'     || '/nfeProc/NFe/infNFe/emit/enderEmit/cPais|' ||
                                        '/nfeProc/NFe/infNFe/emit/enderEmit/xPais|'   || '/nfeProc/NFe/infNFe/emit/IE|'              ||
                                        '/nfeProc/NFe/infNFe/emit/CRT',
                                        'recno = ' || new.recno::varchar(9)
                              ) as xml  (recno             integer,     nfe_chave      varchar(44), ide_mod         varchar(2),
                                         ide_serie         varchar,     ide_nnf        integer,     ide_dhEmi       varchar,
                                         ide_tpnf          varchar(01), ide_iddest     varchar(01), ide_tpemiss     varchar(01),
                                         ide_fimnfe        varchar(01), emit_cnpj      varchar(15), emit_xnome      varchar(120),
                                         enderemit_xlgr    varchar(60), enderemit_nro  varchar(06), enderemit_xcpl  varchar(21),
                                         enderemit_xbairro varchar(50), enderemit_cmun varchar(07), enderemit_xmun  varchar(60),
                                         enderemit_uf      varchar(02), enderemit_cep  varchar(08), enderemit_cpais integer,
                                         enderemit_xpais   varchar(60), emit_ie        varchar(25), emit_crt        varchar);

            --Verifica se Existe a Pessoa Cadastrada
            select sfk.sfj_pessoa, case when sfn.sfj_pessoa is null then 0 else 1 end as fornecedor, 0 as recno,
                   coalesce(sac.fa_codcond,1) as fa_codcond
              into rPessoa
              from      [(sfk)] sfk
              left join [(sfn)] sfn on sfn.sfj_pessoa = sfk.sfj_pessoa
              left join [(sac)] sac on sac.ac_codforn = sfn.sfj_pessoa
             where sfk.sfh_cnpj = rRec.emit_cnpj;

            if not found then
               rPessoa.recno      := nextval('[(sfj)]_recno_seq'::regclass);
               rPessoa.sfj_pessoa := nextval('[(sfj)]_sfj_pessoa_seq'::regclass);

               insert into [(sfj)] (sfj_nome,        sfj_apelido,              sfj_situacao, sfj_pessoa,         recno)
                            values (rRec.emit_xnome, lpad(rRec.emit_xNome,30), 1,            rPessoa.sfj_pessoa, rPessoa.recno);
               insert into [(sfh)] (sfj_pessoa,         sfh_cnpj)
                            values (rPessoa.sfj_pessoa, rRec.emit_cnpj);
               insert into [(sac)] (ac_codforn)
                            values (rPessoa.sfj_pessoa);
               insert into [(se2)] (se2_cep,             se2_ender,           se2_num,            se2_compl,            se2_bairro,
                                    sz9_municipio,       se2_vigencia,        a1_codcli,          sz6_pais,             se2_tipo)
                            values (rRec.enderemit_cep,  rRec.enderemit_xlgr, rRec.enderemit_nro, rRec.enderemit_xcpl,  rRec.enderemit_xbairro,
                                    rRec.enderemit_cmun, current_date - 1,    rPessoa.sfj_pessoa, rRec.enderemit_cpais, 1);
            end if;

            --Verifica se Existe o Perfil de Fornecedor, Senão Cria
            if rPessoa.fornecedor = 0 then
               insert into [(sac)] (ac_codforn)
                            values (rPessoa.sfj_pessoa);
            end if;

            --Verifica se Nota Ja nao foi Importada
            if not exists(select 1
                            from [(sal)]
                           where sal_nfechave = rRec.nfe_chave
                             and al_serie     = rRec.ide_serie
                             and al_coddoc    = rRec.ide_nnf
                             and ac_codforn   = rPessoa.sfj_pessoa) then

               --Recupera a Tes Padrao de Entrada
               select * from [(fcc)] into rFcc;
               if rFcc.a4i_tipo_e    is null or
                  rFcc.a4i_tipo_s    is null or
                  rFcc.f1_codnat_prd is null then
                  raise '[[ATENÇÃO. É necessário incluir informações da ficha de estoque/natureza financeira em configurações da filial. Verifique!!]]';
               end if;

               --Insere Dados na Tabela SAL
               iRecno := nextval('[(sal)]_recno_seq'::regclass);
               insert into [(sal)] (a2f_codigo,          sal_nfechave,   al_serie,       al_coddoc,    ac_codforn,         al_dtemissao,
                                    f4_tes,              al_dtentrada,   recno,          sfj_proprietario)
                            values (rRec.ide_mod,        rRec.nfe_chave, rRec.ide_serie, rRec.ide_nnf, rPessoa.sfj_pessoa, rRec.ide_dhemi::date,
                                    rFcc.f4_tes_entrada, current_date,   iRecno,         ???);

               --Mercadorias
               for rItem in (select recno, item, ean, eantrib, ncm, cfop, indtot, pedido, pedidoitem, ipi_trib_cst, ipi_n_cst, pis_cst, pis_o_cst,
                                    cof_cst, cof_o_cst, ipi_cenq, cest,
                                    coalesce(quantidade,0)     as quantidade,     coalesce(quanttribu,0)   as quanttribu,
                                    coalesce(unitario,0)       as unitario,       coalesce(unittrib,0)     as unittrib,
                                    coalesce(total,0)          as total,          coalesce(descto,0)       as desconto,
                                    trim(cProd)                as cProd,          trim(cProd)              as cProdForn,
                                    trim(descricao)            as descricao,
                                    upper(trim(unidade))       as unidade,        upper(trim(utrib))       as utrib,
                                    coalesce(icms_00bc,0)      as icms_00bc,      coalesce(icms_00al,0)    as icms_00al,
                                    coalesce(icms_00vr,0)      as icms_00vr,      coalesce(icms_10stbc,0)  as icms_10stbc,
                                    coalesce(icms_10stal,0)    as icms_10stal,    coalesce(icms_10stvr,0)  as icms_10stvr,
                                    coalesce(icms_10bc,0)      as icms_10bc,
                                    coalesce(icms_10al,0)      as icms_10al,      coalesce(icms_10vr,0)    as icms_10vr,
                                    coalesce(icms_40bc,0)      as icms_40bc,      coalesce(icms_40al,0)    as icms_40al,
                                    coalesce(icms_40vr,0)      as icms_40vr,      coalesce(descto,0)       as desconto,
                                    coalesce(ipi_trib_bc,0)    as ipi_trib_bc,    coalesce(ipi_trib_ali,0) as ipi_trib_ali,
                                    coalesce(ipi_trib_valor,0) as ipi_trib_valor, coalesce(pis_vbc,0)      as pis_vbc,
                                    coalesce(pis_ali,0)        as pis_ali,        coalesce(pis_vPis,0)     as pis_vPis,
                                    coalesce(pis_o_vbc,0)      as pis_o_vbc,      coalesce(pis_o_ali,0)    as pis_o_ali,
                                    coalesce(pis_o_vPis,0)     as pis_o_vPis,     coalesce(cof_vbc,0)      as cof_vbc,
                                    coalesce(cof_ali,0)        as cof_ali,        coalesce(cof_vcofins,0)  as cof_vcofins,
                                    coalesce(cof_o_vbc,0)      as cof_o_vbc,      coalesce(cof_o_ali,0)    as cof_o_ali,
                                    coalesce(cof_o_vcofinS,0)  as cof_o_vcofins,
                                    case when icms_snbc > total
                                         then coalesce(icms_snbc,0) - coalesce(total,0)
                                         else 0
                                         end                   as icms_snbc,
                                    coalesce(icms_snal,0)      as icms_snal,      coalesce(icms_snvr,0)    as icms_snvr,
                                    rFcc.f4_tes_entrada        as tes,            rFcc.f1_codnat_prd       as f1_codnat
                               from xpath_table('recno','conteudo', 'ss131' || vFilial,
                                    '/nfeProc/NFe/infNFe/det/@nItem|'                            ||
                                    '/nfeProc/NFe/infNFe/det/prod/cProd|'                        ||
                                    '/nfeProc/NFe/infNFe/det/prod/cProd|'                        ||
                                    '/nfeProc/NFe/infNFe/det/prod/cEAN|'                         ||
                                    '/nfeProc/NFe/infNFe/det/prod/xProd|'                        ||
                                    '/nfeProc/NFe/infNFe/det/prod/NCM|'                          ||
                                    '/nfeProc/NFe/infNFe/det/prod/CEST|'                         ||
                                    '/nfeProc/NFe/infNFe/det/prod/CFOP|'                         ||
                                    '/nfeProc/NFe/infNFe/det/prod/uCom|'                         ||
                                    '/nfeProc/NFe/infNFe/det/prod/qCom|'                         ||
                                    '/nfeProc/NFe/infNFe/det/prod/vUnCom|'                       ||
                                    '/nfeProc/NFe/infNFe/det/prod/vProd|'                        ||
                                    '/nfeProc/NFe/infNFe/det/prod/cEANTrib|'                     ||
                                    '/nfeProc/NFe/infNFe/det/prod/uTrib|'                        ||
                                    '/nfeProc/NFe/infNFe/det/prod/qTrib|'                        ||
                                    '/nfeProc/NFe/infNFe/det/prod/vUnTrib|'                      ||
                                    '/nfeProc/NFe/infNFe/det/prod/vDesc|'                        ||
                                    '/nfeProc/NFe/infNFe/det/prod/indTot|'                       ||
                                    '/nfeProc/NFe/infNFe/det/prod/xPed|'                         ||
                                    '/nfeProc/NFe/infNFe/det/prod/nItemPed|'                     ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMSSN202/vBCST|'      ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMSSN202/pICMSST|'    ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMSSN202/vICMSST|'    ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/vBC|'           ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/pICMS|'         ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS00/vICMS|'         ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/vBC|'           ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/pICMS|'         ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/vICMS|'         ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/vBCST|'         ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/pICMSST|'       ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS10/vICMSST|'       ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS40/vBCST|'         ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS40/pICMSST|'       ||
                                    '/nfeProc/NFe/infNFe/det/imposto/ICMS/ICMS40/vICMSST|'       ||
                                    '/nfeProc/NFe/infNFe/det/imposto/IPI/cEnq|'                  ||
                                    '/nfeProc/NFe/infNFe/det/imposto/IPI/IPITrib/CST|'           ||
                                    '/nfeProc/NFe/infNFe/det/imposto/IPI/IPITrib/vBC|'           ||
                                    '/nfeProc/NFe/infNFe/det/imposto/IPI/IPITrib/pIPI|'          ||
                                    '/nfeProc/NFe/infNFe/det/imposto/IPI/IPITrib/vIPI|'          ||
                                    '/nfeProc/NFe/infNFe/det/imposto/IPI/IPINT/CST|'             ||
                                    '/nfeProc/NFe/infNFe/det/imposto/PIS/PISAliq/CST|'           ||
                                    '/nfeProc/NFe/infNFe/det/imposto/PIS/PISAliq/vBC|'           ||
                                    '/nfeProc/NFe/infNFe/det/imposto/PIS/PISAliq/pPIS|'          ||
                                    '/nfeProc/NFe/infNFe/det/imposto/PIS/PISAliq/vPIS|'          ||
                                    '/nfeProc/NFe/infNFe/det/imposto/PIS/PISOutr/CST|'           ||
                                    '/nfeProc/NFe/infNFe/det/imposto/PIS/PISOutr/vBC|'           ||
                                    '/nfeProc/NFe/infNFe/det/imposto/PIS/PISOutr/pPIS|'          ||
                                    '/nfeProc/NFe/infNFe/det/imposto/PIS/PISOutr/vPIS|'          ||
                                    '/nfeProc/NFe/infNFe/det/imposto/COFINS/COFINSAliq/CST|'     ||
                                    '/nfeProc/NFe/infNFe/det/imposto/COFINS/COFINSAliq/vBC|'     ||
                                    '/nfeProc/NFe/infNFe/det/imposto/COFINS/COFINSAliq/pCOFINS|' ||
                                    '/nfeProc/NFe/infNFe/det/imposto/COFINS/COFINSAliq/vCOFINS|' ||
                                    '/nfeProc/NFe/infNFe/det/imposto/COFINS/COFINSOutr/CST|'     ||
                                    '/nfeProc/NFe/infNFe/det/imposto/COFINS/COFINSOutr/vBC|'     ||
                                    '/nfeProc/NFe/infNFe/det/imposto/COFINS/COFINSOutr/pCOFINS|' ||
                                    '/nfeProc/NFe/infNFe/det/imposto/COFINS/COFINSOutr/vCOFINS',
                                    'recno = ' || new.recno::varchar(9) ) as xml
                                    (recno         integer,            item           integer,       cProd       varchar,
                                     cProdForn     varchar,            ean            varchar,       descricao   varchar,
                                     ncm           varchar,            cest           varchar,       cfop        varchar,
                                     unidade       varchar(6),         quantidade     numeric(15,4), unitario    numeric(15,4),
                                     total         numeric(15,2),      eantrib        varchar,       utrib       varchar,
                                     quanttribu    numeric(15,4),      unittrib       numeric(15,4), descto      numeric(15,2),
                                     indtot        varchar,            pedido         varchar,       pedidoitem  varchar,
                                     icms_snbc     numeric(15,2),      icms_snal      numeric(15,4), icms_snvr   numeric(15,2),
                                     icms_00bc     numeric(15,2),      icms_00al      numeric(15,4), icms_00vr   numeric(15,2),
                                     icms_10bc     numeric(15,2),      icms_10al      numeric(15,4), icms_10vr   numeric(15,2),
                                     icms_10stbc   numeric(15,2),      icms_10stal    numeric(15,4), icms_10stvr numeric(15,2),
                                     icms_40bc     numeric(15,2),      icms_40al      numeric(15,4), icms_40vr   numeric(15,2),
                                     ipi_cenq      varchar,            ipi_trib_cst   integer,       ipi_trib_bc numeric(15,4),
                                     ipi_trib_ali  numeric(15,4),      ipi_trib_valor numeric(15,4), ipi_n_cst   integer,
                                     pis_cst       varchar,            pis_vbc        numeric(15,2), pis_ali     numeric(6,4),
                                     pis_vPis      numeric(15,2),
                                     pis_o_cst     varchar,            pis_o_vbc      numeric(15,2), pis_o_ali   numeric(6,4),
                                     pis_o_vPis    numeric(15,2),
                                     cof_cst       varchar,            cof_vbc        numeric(15,2), cof_ali     numeric(6,4),
                                     cof_vcofins   numeric(15,2),
                                     cof_o_cst     varchar,            cof_o_vbc      numeric(15,2), cof_o_ali   numeric(6,4),
                                     cof_o_vcofins numeric(15,2),
                                     tes           varchar,            f1_codnat      integer)) loop

                  --Ajustes de Cadastro (Verifica se Existe a Cest
                  if rItem.cest is not null and not exists(select 1 from [(sbp)] where sbp_cod = rItem.cest) then
                     insert into [(sbp)] (sbe_cod,                   sbp_cod)
                                  values (substring(rItem.cest,1,2), rItem.cest);
                  end if;

                  --Ajustes de Cadastro (Verifica se Existe a Ncm Cadastrada)
                  if rItem.ncm is not null and not exists(select 1 from [(sbm)] where sbm_clf = rItem.ncm) then
                     insert into [(sbm)] (sbm_clf,   sbp_cod,    sbm_descri,   sbm_ativo)
                                  values (rItem.ncm, rItem.cest, 'Automatico', 1);

                  --Verifica se Esta cadastrado a Cest na NCM
                  elsif not exists(select 1 from [(sbm)] where sbm_clf = rItem.ncm and sbp_cod = rItem.cest) then
                     update [(sbm)] set sbp_cod = rItem.cest where sbm_clf = rItem.ncm;
                  end if;

                  --Verifica Unidade de Medida se Precisa Cadastrar
                  if not exists(select 1 from [(sz2)] where z2_coduni = rItem.unidade) then
                     insert into [(sz2)] (z2_coduni,     z2_descri)
                                  values (rItem.unidade, rItem.unidade);
                  end if;

                  --Verifica se Existe a Mercadoria
                  if not exists(select 1 from [(sb1)] where b1_codpro = rItem.cProd) then
                     insert into [(sb1)] (b1_codpro,    b1_nome,                  b1_descri,       z2_coduni,     sbm_clf,   b1_estocavel,
                                          b1_dtcad,     b1_ativo,                 b4_codfam,       a2h_cod,       f1_codnat)
                                  values (rItem.cProd,  rpad(rItem.descricao,40), rItem.descricao, rItem.unidade, rItem.ncm, 1,
                                          current_date, 1,                        rFcc.b4_codfam,  rFcc.a2h_cod,  rItem.f1_codnat);
                  end if;

                  --verifica se Há Informação Complementar da Mercadoria
                  if not exists(select 1 from [(sbf)] where b1_codpro = rItem.cProd) then
                     insert into [(sbf)] (b1_codpro,           z2_coduni,     f1_codnat,       a4i_tipo_e,          a4i_tipo_s,      ac_codforn,
                                          f4_tes,              b1_coduni,     sbf_estocavel,   f4_tesentr,          bf_ativo)
                                  values (rItem.cProd,         rItem.unidade, rItem.f1_codnat, rFcc.a4i_tipo_e,     rFcc.a4i_tipo_s, rPessoa.sfj_pessoa,
                                          rFcc.f4_tes_entrada, rItem.unidade, 1,               rFcc.f4_tes_entrada, 1);
                  end if;

                  --Verifica se Há Correlação Entre o Cadastro de Produto do Fornecedor x Cadastro da Empresa
                  if exists(select 1
                              from [(sa4)]
                             where ac_codforn = rPessoa.sfj_pessoa
                               and sa4_codpro = rItem.cProd) then
                     select sa4.b1_codpro, coalesce(sbf.f1_codnat, sb1.f1_codnat,rFcc.f1_codnat_prd)
                       into rItem.cProd,   rItem.f1_codnat
                       from [(sa4)] sa4
                            join [(sb1)] sb1 on sb1.b1_codpro = sa4.b1_codpro
                       left join [(sbf)] sbf on sbf.b1_codpro = sa4.b1_codpro
                      where sa4.ac_codforn = rPessoa.sfj_pessoa
                        and sa4.sa4_codpro = rItem.cProd;
                  else
                     --Se nao existir o cadastro de produto/mercadoria precisa criar
                     if not exists(select 1 from [(sb1)] where b1_codpro = rItem.cProd) then
                        insert into [(sb1)] (b1_codpro,    b1_nome,                  b1_descri,       z2_coduni,     sbm_clf,   b1_estocavel,
                                             b1_dtcad,     b1_ativo,                 b4_codfam,       a2h_cod,       f1_codnat)
                                     values (rItem.cProd,  rpad(rItem.descricao,40), rItem.descricao, rItem.unidade, rItem.ncm, 1,
                                             current_date, 1,                        rFcc.b4_codfam,  rFcc.a2h_cod,  rItem.f1_codnat);

                        insert into [(sbf)] (b1_codpro,           f1_codnat,          bf_ativo, sbf_estocavel, a4i_tipo_e,      a4i_tipo_s,
                                             f4_tesentr,          ac_codforn,         z2_coduni)
                                     values (rItem.cProd,         rItem.f1_codnat,    1,        0,             rFcc.a4i_tipo_e, rFcc.a4i_tipo_s,
                                             rFcc.f4_tes_entrada, rPessoa.sfj_pessoa, rItem.unidade);

                        if not exists(select 1 from [(sa4)] where ac_codforn = rPessoa.sfj_pessoa and b1_codpro = rItem.cProd) then
                           insert into [(sa4)] (ac_codforn,          b1_codpro,   z2_coduni,     sa4_nome,           sa4_valor,
                                                f4_tes,              sa4_codpro,  sa4_gtin,      fa_codcond,         sa4_ipi)
                                        values (rPessoa.sfj_pessoa,  rItem.cProd, rItem.unidade, rItem.descricao,    rItem.unitario,
                                                rFcc.f4_tes_entrada, rItem.cProd, rItem.ean,     rPessoa.fa_codcond, rItem.ipi_trib_ali);
                        end if;
                     end if;
                  end if;

                  --Pesquisa se Há a CFOP Cadastrada pelo fornecedor e propoe no cadastro
                  if exists(select 1
                              from [(sgv)]
                             where ac_codforn = rPessoa.sfj_pessoa
                               and f8_cfop    = rItem.cfop) then
                     select coalesce(sgv.f4_tes,rFcc.f4_tes_entrada), coalesce(sf4.f1_codnat,rFcc.f1_codnat_prd)
                       into rItem.tes,                                rItem.f1_codnat
                       from [(sgv)] sgv
                       join [(sf4)] sf4 on sf4.f4_tes = sgv.f4_tes
                      where ac_codforn = rPessoa.sfj_pessoa
                        and f8_cfop    = rItem.cfop;

                  --Senao Testa pela CFOP Padrao
                  elsif exists(select 1
                                from [(sgu)]
                             where f8_cfop = rItem.cfop) then
                     select coalesce(sgu.f4_tes,rFcc.f4_tes_entrada), sf4.f1_codnat
                       into rItem.tes,                                rItem.f1_codnat
                       from [(sgu)] sgu
                       join [(sf4)] sf4 on sf4.f4_tes = sgu.f4_tes
                      where f8_cfop    = rItem.cfop;
                  end if;

                  --Insere Dados dos Itens da Nota de Entrada
                  insert into [(sam)] (al_serial,          b1_codpro,          am_qtd,            z2_coduni,            am_vlunit,
                                       f4_tes,             f1_codnat,
                                       am_ipi,             am_bs_ipi,          am_vl_ipi,
                                       sa4_codpro,         am_descto_vr,       sam_pis,           sam_cofins,           sam_bs_pisfin,
                                       am_icms,            am_bs_icms,         am_vl_icms,
                                       am_vbcst,           am_aliq_st,         am_vicmsst)
                               values (iRecno,             rItem.cProd,        rItem.quantidade,  rItem.unidade,        rItem.unitario,
                                       rItem.tes,          rItem.f1_codnat,
                                       rItem.ipi_trib_ali, rItem.ipi_trib_bc,  rItem.ipi_trib_valor,
                                       rItem.cProdForn, rItem.desconto,     rItem.pis_ali,     rItem.cof_ali,        rItem.pis_vbc,
                                       rItem.icms_00al + rItem.icms_10al + rItem.icms_40al,
                                       rItem.icms_00bc + rItem.icms_10bc + rItem.icms_40bc,
                                       rItem.icms_00vr + rItem.icms_10vr + rItem.icms_40vr,
                                       rItem.icms_10stbc + rItem.icms_snbc,
                                       rItem.icms_10stal + rItem.icms_snal,
                                       rItem.icms_10stvr + rItem.icms_snvr);
               end loop;

               --Condicoes de Pagamento
               for rPgto in (select recno, duplicata::integer, vencimento, valor
                                from xpath_table('recno','conteudo', 'ss131' || vFilial,
                                     '/nfeProc/NFe/infNFe/cobr/dup/nDup|'    ||
                                     '/nfeProc/NFe/infNFe/cobr/dup/dVenc|'   ||
                                     '/nfeProc/NFe/infNFe/cobr/dup/vDup',
                                     'recno = ' || new.recno::varchar) as xml
                                    (recno integer, duplicata varchar, vencimento date, valor numeric(15,4)))  loop

                   --Insere Dados dos Itens da Nota de Entrada
                   insert into [(fnp)] (al_serial, fnp_parce,       fnp_valor,   fnp_valor_o, fnp_vencto,       fnp_vencto_o)
                                values (iRecno,    rPgto.duplicata, rPgto.valor, rPgto.valor, rPgto.vencimento, rPgto.vencimento);
               end loop;
            end if;
         end if;
      end if;

	   If cDestino = 'FSP' Then
		   -- chamar rotina para tratar o conteudo e inserir na FSP
		   perform mc_01089####???(new.recno);
	   End If;

      Return new;
   Else
      If tg_op = 'DELETE' Then
         Return old;
      Else
      -- Recupera o nome da tabela de destino para o conteúdo do arquivo importado
      Select codtable
        Into cDestino
        From [(ss130)]
       Where recno = new.ss130_recno;
         Return new;
      End If;
   End If;
End;
$$ language 'plpgsql';