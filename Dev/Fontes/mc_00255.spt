/**
   Estoque - Recompõe saldos diários por proprietário / depositário

	@author    Ricardo Gonçalves
	@date      24/09/2015 20:34:40
	@trigger   
   
   @param in_pessoa  código do proprietário / depositário
   @param in_tipomov ficha de estoque que deverá ser reprocessada
   @param in_codpro código do material que precisa ser reprocessado
   @param in_data data inicial do reprocessamento

	Histórico
	---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - Implementação de recurso   
   
   18/05/2018  Ricardo Gonçalves
      [*] Modificação da chamada de recomposição de reservas em aberto (mc_01077). Remoção do parâmetro data. 
*/
Create or Replace Function mc_00255####???(
   in in_pessoa integer,   
   in in_codpro varchar,
   in in_tipomov integer,
   in in_data date)
Returns integer As
$$
Declare
   r           record;
   rp          record;
   r00         [(e00)]%rowtype;
   ddata       [(a12)].a12_data%type;             
Begin   
   -- Gera parâmetro de sessão. Não criticar estoque no reprocessamento;
   perform sys_00012####???('est_criticar', 'false');
   
   -- Limpa arquivos de saldo e reservas
   perform mc_00024####???(in_pessoa, in_codpro, in_tipomov, in_data);
      
   ddata := '1800-01-01';
      
   -- seleciona registros e recompõe arquivo
   for r in (
      select a12_tipo, a12_data, a12_evento, a12_qtd, a12_custo_t, a12_sqtd, a12_scusto_t, 
             a12_saldo, a12_ssaldo, a12_custo, a12_scusto, a12_saldov, a12_ssaldov, a12_evento
        from [(a12)]
       where sfj_pessoa = in_pessoa
         and b1_codpro = in_codpro
         and a4i_tipo = in_tipomov         
         and a12_data >= in_data
         and a12_evento >= 0
       order by a12_data, a12_evento, a12_tipo, recno)
   loop      
      if ddata != r.a12_data then                      
         r00.e00_qtde_u1 := 0; r00.e00_vlre_u1 := 0; r00.e00_qtde_u2 := 0; r00.e00_vlre_u2 := 0; r00.e00_saldor_u1 := 0;
         r00.e00_qtds_u1 := 0; r00.e00_vlrs_u1 := 0; r00.e00_qtds_u2 := 0; r00.e00_vlrs_u2 := 0; r00.e00_saldor_u2 := 0;

         if r.a12_tipo = 1 then
            r00.e00_qtde_u1 := r.a12_qtd;
            r00.e00_vlre_u1 := r.a12_custo_t;
            r00.e00_qtde_u2 := r.a12_sqtd;
            r00.e00_vlre_u2 := r.a12_scusto_t;
         elsif r.a12_tipo = 2 then
            r00.e00_qtds_u1 := r.a12_qtd;
            r00.e00_vlrs_u1 := r.a12_custo_t;
            r00.e00_qtds_u2 := r.a12_sqtd;            
            r00.e00_vlrs_u2 := r.a12_scusto_t;
         end if;

         r00.recno := nextval('[(e00)]_recno_seq'::regclass);
         
         -- Criando linha de saldo para data
         insert into [(e00)] (a4i_tipo,          b1_codpro,         e00_data,        e00_qtde_u1,     e00_vlre_u1, 
                              e00_qtde_u2,       e00_vlre_u2,       e00_qtds_u1,     e00_vlrs_u1,     recno,
                              e00_qtds_u2,       e00_vlrs_u2,       e00_competencia, 
                              e00_saldor_u1,     e00_saldor_u2,     sfj_pessoa)
                 values      (in_tipomov,        in_codpro,         r.a12_data,      r00.e00_qtde_u1, r00.e00_vlre_u1, 
                              r00.e00_qtde_u2,   r00.e00_vlre_u2,   r00.e00_qtds_u1, r00.e00_vlrs_u1, r00.recno,
                              r00.e00_qtds_u2,   r00.e00_vlrs_u2,   to_char(r.a12_data, 'yyyymm'), 
                              r00.e00_saldor_u1, r00.e00_saldor_u2, in_pessoa);
         
         ddata := r.a12_data;
      else
         -- Lançamento padrão
         if r.a12_tipo = 1 then
            update [(e00)]
               set e00_qtde_u1 = e00_qtde_u1 + r.a12_qtd, e00_vlre_u1 = e00_vlre_u1 + r.a12_custo_t,
                   e00_qtde_u2 = e00_qtde_u2 + r.a12_sqtd, e00_vlre_u2 = e00_vlre_u2 + r.a12_scusto_t
             where sfj_pessoa = in_pessoa
               and b1_codpro = in_codpro
               and a4i_tipo = in_tipomov               
               and e00_data = r.a12_data
               and e00_evento = 0;
         elsif r.a12_tipo = 2 then
            update [(e00)]
               set e00_qtds_u1 = e00_qtds_u1 + r.a12_qtd, e00_vlrs_u1 = e00_vlrs_u1 + r.a12_custo_t,
                   e00_qtds_u2 = e00_qtds_u2 + r.a12_sqtd, e00_vlrs_u2 = e00_vlrs_u2 + r.a12_scusto_t
             where sfj_pessoa = in_pessoa
               and b1_codpro = in_codpro
               and a4i_tipo = in_tipomov               
               and e00_data = r.a12_data
               and e00_evento = 0;
         end if;               
      end if;   
   end loop;   
   
   -- Reprocessamento de saldos e custo médio
   perform mc_00000####???(in_pessoa, in_codpro, in_tipomov, in_data);
   
   -- Reprocessamento de reservas
   perform mc_01077####???(in_pessoa, in_codpro, in_tipomov);   
   
   -- Processamento das conciliações
   -- seleciona registros e recompõe arquivo
   for r in (
      select a12_data
        from [(a12)]
       where sfj_pessoa = in_pessoa
         and b1_codpro = in_codpro
         and a4i_tipo = in_tipomov         
         and a12_data >= in_data
         and a12_evento = -1       
       group by a12_data  
       order by a12_data)
   loop   
      -- Criando linha de saldo para data
      insert into [(e00)] 
         (sfj_pessoa, b1_codpro,  a4i_tipo,  e00_data,   e00_evento, e00_competencia)
      values
         (in_pessoa,  in_codpro, in_tipomov, r.a12_data, -1,         to_char(r.a12_data, 'yyyymm'));
   end loop;   
   
   -- Gera parâmetro de sessão. Criticar estoque
   perform sys_00012####???('est_criticar', 'true');
   
   return 1;
End;
$$
language plpgsql;