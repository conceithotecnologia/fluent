/**
   Efetuar pedido de compras em lote, tabela shj - Itens aprovados

	@author    Gabriel Montes
	@date      22/07/2013 09:58:00
	@trigger

	Histórico
---------------------------------------------------------------------------------------------------------------------
   Legenda: [-] - Correção / [*] - Recurso modificado/melhorado / [+] - 
   
   27/11/2013 16:04:00  v1 Gabriel Montes
      [+] Preenchimento da natureza de operação no item do pedido de compra de acordo com a N.O de entrada cadastrada nos "Dados Complementares" do material.
   
   28/11/2013 09:50:00  v1.1 Gabriel Montes
      [*] Alteração da ordem dos parâmetros do order by.

   05/12/2013 17:50:00  v1.3 Gabriel montes
      [-] Adicionado parâmetro sew_servico no order by
      
   09/12/2013 10:29:00  v1.4 Gabriel montes
      [+] Preenchimento da natureza de operação do item utilizando a última TES utilizada para este item ou a natureza padrão de entrada no cadastro de materiais;
*/
CREATE OR REPLACE FUNCTION mc_00554####???()
  RETURNS integer AS
$$
DECLARE
   ifpc_ano                integer; -- Exercício
   iNum_Pedido             integer; -- Número do pedido atual
   iLNum_Pedido            integer; -- Número do pedido anterior
   if1_codnat              integer; --
   Ites_entr               Integer;
   Ites_prod               Integer;
   
   rsb1                    record;
   rsew                    record;
   rsol                    record;
   r                       record;  -- linha atual
   rl                      record;  -- linha anterior  
   xcur                    refcursor;
   cSessao                 VarChar(35); -- Sessao atual do usuário
   
   bFound            boolean;
   bGeraPedido       boolean;
   bGeraItem         boolean;
BEGIN
   
   -- Recupera a Sessão atual
   cSessao := sys_session();
   
   iNum_Pedido  := -1;
   iLNum_Pedido := -1;
   
   bGeraPedido  := true;
   bGeraItem    := true;
   
   rl := null;
   
   ifpc_ano := sys_year(sys_getdatabase####???());
   
   -- Processamento de cotações marcadas
   open xcur for  
      select shj.recno,       shk.ac_codforn,  shk.fa_codcond,  shk.shk_tpfrete, shk.shk_prazodt,  shk.shk_obs , -- Cabeçalho  
             sh8.a3u_recno ,  sh8.sh8_item  ,  sh8.sh8_tipo  ,  sh8.b1_codpro,   sh8.sew_servico,  sh8.z2_coduni, -- Detalhe
             sh8.sh8_descri,  a3v.a3v_qtd ,    a3v.a3v_valor ,  a3v.a3v_bse_ipi, a3v.a3v_aliq_ipi, a3v.a3v_prazo, -- Detalhe
             SHK.shk_emissao, a3u.coduser_sol, sh8.fph_codigo
        from [(shj)]  shj
               join [(ss029)] ss029
              on ss029.recfile = shj.recno
             and ss029.codtable = 'SHJ'
             and session = sys_session()
            join [(shk)] shk
              on shk.shj_recno = shj.recno
            join [(shm)] shm
              on shm.shj_recno = shj.recno
             and shm.ac_codforn = shk.ac_codforn 
            join [(sh8)] sh8
              on sh8.a3u_recno = shm.a3u_recno  
             and sh8.sh8_item = shm.sh8_item
            join [(a3u)] a3u
              on a3u.recno = sh8.a3u_recno
            join [(a3v)] a3v
              on a3v.a3u_recno = shm.a3u_recno  
             and a3v.sh8_item = shm.sh8_item
       where shk.ac_codforn = shm.ac_codforn
         and a3v.ac_codforn = shk.ac_codforn
         and shj.shj_estado = 2
         and shk.shk_estado = 2 
      order by shk.ac_codforn, shk.shk_tpfrete, sh8.b1_codpro, sh8.sew_servico, a3v.a3v_aliq_ipi,shk.shk_prazodt;
            
   fetch xcur into r;         
   bFound := FOUND;
   
   while bFound loop  
      if bGeraPedido then
         --iNum_Pedido := nextval('[(fpc)]_recno_seq'::regclass); 
         
         select coalesce(max(fpc_pedido),0) +1
           into iNum_Pedido
           from [(fpc)]
          where fpc_ano = ifpc_ano;
                
         bGeraPedido := false;         
      end if;
      --raise '[["%"]]',iNum_Pedido;
      if iNum_Pedido != iLNum_Pedido then
         -- Insere o cabeçalho do pedido de compras
         insert into [(fpc)] (fpc_pedido   , fpc_ano   , ac_codforn  , fa_codcond  , fpc_emissao , fpc_tpfrete,
                              fpc_entrega  , codtable  , shj_recno   , fpc_observa , a3u_recno    )
                     values  (iNum_Pedido  , sys_year(current_date)  , r.ac_codforn, r.fa_codcond, current_date, r.shk_tpfrete,
                              current_date + r.a3v_prazo * interval'1 day',  'SHJ'    , r.recno     , 'Pedido de compra gerado a partir da requisição ' || r.recno ||'.', r.a3u_recno);  
         
         if exists(
            select 1
              from [(sbv)]
             where a3u_recno = r.a3u_recno)
         then
            update [(sbv)] 
		         set a3u_recno = null,
		             sbv_dtreq = null
		       where recno = r.a3u_recno;
         end if;

         -- Apresenta os pedidos de compra gerados ao usuário 
         Perform sys_msg####???(1, 'Pedidos de compra gerados:' || iNum_Pedido || '.' );
         
         iLNum_Pedido := iNum_Pedido;  
         bGeraItem    := true;
      end if;
            
      -- Se o item for um material
      if r.sh8_tipo = 1 then
         
         if bGeraItem then
         
            select sb1.f1_codnat, sb1.z2_coduni, sb1.b1_nome
              into rsb1
              from [(sb1)] sb1
                  join [(sh8)] sh8
                    on sh8.a3u_recno = r.a3u_recno  
                   and sh8.sh8_item = r.sh8_item
             where sb1.b1_codpro = sh8.b1_codpro;
            
            -- Recupera a última tes utilizada deste produto
            select fpd.f4_tes
              into Ites_prod
              from [(fpd)] fpd
                  join [(fpc)] fpc
                    on fpd.fpc_pedido = fpc.fpc_pedido
                   and fpd.fpc_ano    = fpc.fpc_ano
             where fpd.b1_codpro = r.b1_codpro
               and fpd.f4_tes is not null
             order by fpc.fpc_emissao desc
             limit 1;
            -- Recupera a TES padrão de entrada em dados complementares do material
            select sbf.f4_tesentr
              into Ites_entr
              from [(sbf)] sbf
                  join [(sf4)] sf4
                    on sf4.f4_tes = sbf.f4_tesentr
             where b1_codpro = r.b1_codpro
               and sf4.f4_tipo = 1;
               
            -- Insere materiais no detalhe do pedido de compra
            insert into [(fpd)] (fpc_pedido     , fpc_ano      , b1_codpro     , fpd_status     , fpd_quantos , 
                                 z2_coduni      , fpd_unitario , fpd_bse_ipi   , fpd_aliq_ipi   , f1_codnat   , 
                                 codtable       , shj_recno    , f4_tes        , fph_codigo)
                         values (iNum_Pedido    , ifpc_ano     , r.b1_codpro   ,      1         , r.a3v_qtd , 
                                 rsb1.z2_coduni , r.a3v_valor  , r.a3v_bse_ipi , r.a3v_aliq_ipi , rsb1.f1_codnat,
                                  'SHJ'         , r.recno      , coalesce(Ites_prod,Ites_entr), r.fph_codigo);
            
            if not exists(
               select 1
                 from [(sa4)] sa4
                where sa4.ac_codforn = r.ac_codforn
                  and sa4.b1_codpro = r.b1_codpro)
            then
            insert into [(sa4)] (ac_codforn   , b1_codpro   , fa_codcond   , sa4_nome     , z2_coduni   , sa4_entrega , sa4_valor   , sa4_ipi       ) 
                         values (r.ac_codforn , r.b1_codpro , r.fa_codcond , rsb1.b1_nome , r.z2_coduni , r.a3v_prazo , r.a3v_valor , r.a3v_aliq_ipi);         
            else
            end if;
            
         else
      
            update [(fpd)]
               set fpd_quantos = fpd_quantos + r.a3v_qtd
             where fpc_pedido = iNum_Pedido
               and fpc_ano =  ifpc_ano
               and b1_codpro = r.b1_codpro;
         
         end if;  
         
            -- Validação de teste caso os itens não sejam inseridos no pedido de compra
            if not exists (
            select 1
              from [(fpd)] fpd
             where fpc_pedido = iNum_Pedido
               and fpc_ano = ifpc_ano)
            then
               raise '[[Material]]';
            end if;
         
      else
         --raise '[["%"]]',bGeraItem;
         if bGeraItem then
            
            select sew_descri
              into rsew
              from [(sew)] sew
                  join [(sh8)] sh8
                    on sh8.a3u_recno = r.a3u_recno  
                   and sh8.sh8_item = r.sh8_item
             where sew.sew_servico = sh8.sew_servico;
            
            -- Insere serviços no detalhe do pedido de compra
            insert into [(fpe)] (fpc_pedido   , fpc_ano  , sew_servico   , fpe_status , fpe_quantos    , z2_coduni   , 
                                 fpe_unitario , codtable , shj_recno     , fph_codigo)
                         values (iNum_Pedido  , ifpc_ano , r.sew_servico , 1          , r.a3v_qtd      , r.z2_coduni ,
                                 r.a3v_valor  , 'SHJ'    , r.recno       , r.fph_codigo); 
            
            if not exists(
               select 1
                 from [(sh1)] sh1
                where sh1.ac_codforn = r.ac_codforn
                  and sh1.sew_servico = r.sew_servico)
            then
            insert into [(sh1)] (ac_codforn   , sew_servico   , fa_codcond , sh1_nome     , z2_coduni   , sh1_entrega , sh1_valor  ) 
                         values (r.ac_codforn , r.sew_servico , r.fa_codcond , rsew.sew_descri , r.z2_coduni , r.a3v_prazo , r.a3v_valor);
            else
            
            end if;
            
         else
               
            update [(fpe)]
               set fpe_quantos = fpe_quantos + r.a3v_qtd
             where fpc_pedido = iNum_Pedido
               and fpc_ano =  ifpc_ano
               and sew_servico = r.sew_servico;
               
         end if;
            
            -- Validação de teste caso os itens não sejam inseridos no pedido de compra
            if not exists (
            select 1
              from [(fpe)] fpe
             where fpc_pedido = iNum_Pedido
               and fpc_ano = ifpc_ano)
            then
               raise '[[Serviço]]';
            end if;
         
      end if;   
      
      update [(shj)]
         set shj_estado = 4
       where recno = r.recno;
      
      -- Altera o item para "Pedido"   
      update [(sh8)]
         set sh8_estado = 7
       where sh8_item  = r.sh8_item
         and a3u_recno = r.a3u_recno;
      
      -- Memoriza linha atual
      rl := r;
      fetch xcur into r;         
      bFound := FOUND;
      
      if bFound then         
         if not bGeraPedido then
            bGeraPedido := (rl.ac_codforn != r.ac_codforn) or
               (rl.fa_codcond != r.fa_codcond) or
               (rl.shk_tpfrete != r.shk_tpfrete);
         end if;
      end if;
      
      if rl.sew_servico <> r.sew_servico or (rl.sew_servico is null and r.sew_servico is not null) or 
         rl.b1_codpro   <> r.b1_codpro   or (rl.sew_servico is null and r.sew_servico is not null) then
         bGeraItem := true;
      else
         bGeraItem := false;
      end if;
      
   end loop;

   close xcur;
   
   -- Envio de e-mail para os solicitantes
   for rsol in 
      (select distinct a3u.coduser_sol
        from [(shj)]  shj
            join [(ss029)] ss029
              on ss029.recfile = shj.recno
             and ss029.codtable = 'SHJ'
            join [(shm)] shm
              on shm.shj_recno = shj.recno
            join [(a3u)] a3u
              on a3u.recno = shm.a3u_recno
       where shj.shj_estado = 2
      order by a3u.coduser_sol)
   loop
      --perform mc_00633####???('mc_00554',rsol.coduser_sol);
   end loop;
   
   -- Exclui os registros processados da Seleção
   Delete From [(ss029)]
    Where [(ss029)].session = cSessao;
   
   return 1;
END;
$$
  LANGUAGE 'plpgsql' VOLATILE;